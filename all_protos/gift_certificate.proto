syntax = "proto3";

package appointy.giftcertificate.v1;

option go_package = "./pb";

import "types/types.proto";
import "validate/chaku.proto";
import "eventspush/push.proto";
import "validate/validate.proto";
import "pehredaar/pehredaar.proto";
import "google/protobuf/empty.proto";
import "annotations/annotations.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "schema/schema.proto";
import "crudgen/crudgen.proto";
import "logging/log.proto";

service GiftCertificates {

    // Client request to create a gift certificate
    // Accepts CreateGiftCertificateRequest which contains parent information and
    // GiftCertificate and returns newly created GiftCertificate if all the
    // validations are passed
    rpc CreateGiftCertificate (CreateGiftCertificateRequest) returns (GiftCertificate) {
        option (google.api.http) = {
            post : "/v1/gift-certificate"
            body : "*"
        };
        option (pehredaar.paths) = {
            resource: "parent"
            resource: "level_ids"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "createGiftCertificate"
        };
        option (crudgen.generator) = {
            skip: true
        };
    };

    // GiftCertificate takes the GiftCertificate id as input and returns the
    rpc GetGiftCertificate (GetGiftCertificateRequest) returns (GiftCertificate) {
        option (google.api.http) = {
            get : "/v1/gift-certificate/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "giftCertificate"
        };
        option (logging.skip_log) = true;
    };

    // ListGiftCertificates list the all the GiftCertificate of the given parent
    rpc ListGiftCertificate (ListGiftCertificateRequest) returns (ListGiftCertificateResponse) {
        option (google.api.http) = {
            get : "/v1/gift-certificates"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "giftCertificates"
        };
        option (logging.skip_log) = true;
    }

    // DeleteGiftCertificate deletes a specific GiftCertificate identified by the
    // passed ID. This method will only soft delete the GiftCertificate
    rpc DeleteGiftCertificate (DeleteGiftCertificateRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/gift-certificate/{id=**}"
        };
        option (pehredaar.paths) = {
            resource_and: "id"
            resource_and: "base_id"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "deleteGiftCertificate"
        };
        option (crudgen.generator) = {
            skip: true
        };
    };

    // UpdateGiftCertificate updates a GiftCertificate, uniquely identified by its
    // ID and returns the updated GiftCertificate
    rpc UpdateGiftCertificate (UpdateGiftCertificateRequest) returns (GiftCertificate) {
        option (google.api.http) = {
            put : "/v1/gift-certificate/{giftCertificate.id=**}"
        };
        option (pehredaar.paths) = {
            resource_and: "giftCertificate.id"
            resource_and: "base_id"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "updateGiftCertificate"
        };
        option (crudgen.generator) = {
            skip: true
        };
    }

    // Client request to create gift-certificate(s)
    // Accepts BatchCreateGiftCertificateRequest which contains parent
    // information and list of gift-certificate and returns list of newly created
    // gift-certificate(s) if all the validations are passed
    rpc BatchCreateGiftCertificate (BatchCreateGiftCertificateRequest) returns (BatchCreateGiftCertificateResponse) {
        option (google.api.http) = {
            post : "/v1/gift-certificate:batch"
            body : "*"
        };
        option (pehredaar.paths) = {
            resource: "parent"
            resource: "level_gift_certificates.level_ids"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "batchCreateGiftCertificate"
        };
    };

    // BatchGetGiftCertificates will give the list of all the GiftCertificate
    // specified by the given IDs
    rpc BatchGetGiftCertificate (BatchGetGiftCertificateRequest) returns (BatchGetGiftCertificateResponse) {
        option (google.api.http) = {
            post : "/v1/gift-certificate:batchGet"
            body : "*"
        };
        option (pehredaar.paths) = {
            resource: "ids"
        };
        option (logging.skip_log) = true;
    };

    rpc GetGiftCertificateLinking(GetGiftCertificateLinkingRequest) returns (GetGiftCertificateLinkingResponse) {
        option (pehredaar.paths) = {
            resource: "base_id"
        };
    }

}

message GetGiftCertificateLinkingRequest {
    string base_id = 1 [(validate.rules).string = {min_len: 1}];
    google.protobuf.FieldMask view_mask = 2;
}

message GetGiftCertificateLinkingResponse {
    repeated GiftCertificate gift_certificates = 1;
}

message GiftCertificate {
    option (chaku.root) = true;
    option (chaku.prefix) = 'gic';
    option (crudgen.meta_details) = true;
    
    string id = 1;
    // Title of the gift certificate
    string title = 2 [(validate.rules).string = {min_len: 1 max_len: 50}];
    // description of the gift certificate
    string description = 3 [(validate.rules).string = {max_len: 500}];
    // Images in gift certificate
    saastack.types.Gallery gallery = 4 [(chaku.constraints).json = true];
    // Different priced variants
    repeated Variant variants = 5 [(validate.rules).repeated.min_items = 1];
    // metadata for storing additional information like : color
    map<string, string> metadata = 6;
    // different gift certificate settings
    GiftCertificateSettings settings = 7 [(chaku.constraints).json = true];
    // Is the gift certificate allowed for purchase from client side
    bool enable_for_sale = 8;
    // Used to group gift certificates by an event : eg: halloween
    string event_type = 9;
    // time at which the gift certificate was created
    google.protobuf.Timestamp created_on = 10;
    // used to group the gift certificate when created by a batch request
    string batch_id = 11;
    // used in linking gift certificates at different levels
    string base_id = 12;
    //specifies the consumed count
    int32 consumed_count = 13;
}

message GiftCertificateSettings {
    // How many gift cards to be sold on client side
    int32 number_for_sale = 1;
    // How much amount can be of variant maximum amount
    saastack.types.Price variant_min_amount = 2;
    // How much amount can be of variant minimum amount
    saastack.types.Price variant_max_amount = 3;
    // Till how much time, the gift certificate can be used after purchase in days
    google.protobuf.Duration expireDuration = 4;
    // From which date, the gift certificate can be purchased
    google.protobuf.Timestamp purchase_window_start = 5;
    // Till which date, the gift certificate can be purchased
    google.protobuf.Timestamp purchase_window_end = 6;
    // Allow client to modify the image
    bool allow_client_image = 7;
}

// Variants are different price types of Gift certificates
message Variant {
    option (chaku.prefix) = 'gcv';
    
    string id = 1;
    // purchasing price is the price at which the consumer consumes the GC
    saastack.types.Price purchasing_price = 3 [(validate.rules).message.required = true];
}

message CreateGiftCertificateRequest {
    // Parent contains the hierarchical information of the given gift-certificate
    // like business/group.
    string parent = 1 [(validate.rules).string.min_len = 1];

    GiftCertificate giftCertificate = 2 [(validate.rules).message.required = true];

    repeated string level_ids = 3;
}


message GetGiftCertificateRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 2;

}
message ListGiftCertificateRequest {
    // Parent contains the hierarchical information of the given gift-certificate
    // like business/group.
    string parent = 1 [(validate.rules).string.min_len = 1];

    // First specifies the number of arguments that are to be returned starting at
    // the cursor.
    uint32 first = 2;
    // After takes the cursor type to indicate the slice should start at this
    // cursor.
    string after = 3;
    // Last specifies the number of arguments that are to be returned ending at
    // the cursor.
    uint32 last = 4;
    // Before takes the cursor type to indicate the slice should end at this
    // cursor.
    string before = 5;

    google.protobuf.FieldMask view_mask = 6;

    string query = 7;

}

message ListGiftCertificateResponse {
    // Nodes contains the list of GiftCertificate with their rowNumber
    repeated GiftCertificateNode nodes = 1 [(graphql.field_name) = "edges"];
    // HasNext is used to indicate whether more edges exist following the set
    // defined by the clients arguments. If the client is paginating with
    // first/after, then the server must return true if further edges exist,
    // otherwise false. If the client is paginating with last/before, then the
    // client may return true if edges further from before exist, if it can do so
    // efficiently, otherwise may return false.

    // HasPrevious is used to indicate whether more edges exist prior to the set
    // defined by the clients arguments.
    // If the client is paginating with last/before, then the server must return
    // true if prior edges exist, otherwise false. If the client is paginating
    // with first/after, then the client may return true if edges prior to after
    // exist, if it can do so efficiently, otherwise may return false.
    saastack.types.PageInfo page_info = 2;
}

message GiftCertificateNode {
    // Position is the current position of the cursor in the GiftCertificate list
    // eg :row number
    string position = 1 [(graphql.field_name) = "cursor"];
    // Node contains the actual GiftCertificate object
    GiftCertificate node = 2;
}

message DeleteGiftCertificateRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
    string base_id = 2 [(validate.rules).string.min_len = 1];
}

message UpdateGiftCertificateRequest {
    GiftCertificate giftCertificate = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2; // update mask := "name", "gallery", "metadata", "variants"
    string base_id = 3 [(validate.rules).string.min_len = 1];
}

message BatchCreateGiftCertificateRequest {
    string parent = 1 [(validate.rules).string.min_len = 1];
    repeated LevelGiftCertificate level_gift_certificates = 2 [(validate.rules).repeated.max_items = 500];
}

message LevelGiftCertificate {
    repeated string level_ids = 1;
    GiftCertificate gift_certificate = 2 ;
}

message BatchUpdateGiftCertificateMetadataRequest {
    repeated BatchUpdateGiftCertificateMetadataRequestWrapper gift_certificates = 1 [(validate.rules).repeated.min_items = 1];
}

message BatchUpdateGiftCertificateMetadataRequestWrapper {
    string id = 1;
    // MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it
    saastack.types.MetaDetailsWrapper meta_details = 2;
}

message BatchUpdateGiftCertificateMetadataResponse {
    repeated BatchUpdateGiftCertificateMetadataResponseWrapper gift_certificates = 1;
}

message BatchUpdateGiftCertificateMetadataResponseWrapper {
    string id = 1;
    bool error = 2;
    string error_message = 3;
}

message CreateGiftCertificateResponseWrapper {
    GiftCertificate gift_certificate = 1;
    bool error = 2;
    string error_message = 3;
}

message BatchCreateGiftCertificateResponse {
    repeated CreateGiftCertificateResponseWrapper gift_certificates = 1;
}
message GiftCertificateList {
    repeated GiftCertificate giftCertificate = 1;
}


message BatchGetGiftCertificateRequest {
    repeated string ids = 1 [(validate.rules).repeated = {unique: true min_items: 1}];
    google.protobuf.FieldMask view_mask = 2;
}

message BatchGetGiftCertificateResponse {
    repeated GiftCertificate giftCertificate = 1;
}

message UpdateGiftCertificateLog {
    GiftCertificate old_gift_certificate = 1;
    GiftCertificate new_gift_certificate = 2;
    google.protobuf.FieldMask update_mask = 3;
}

message BatchCreateGiftCertificateLog {
    int32 count = 1;
    repeated string ids = 2;
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "GiftCertificates"
    rpc: "GetGiftCertificate"
    rpc: "ListGiftCertificate"
    rpc: "BatchGetGiftCertificate"
    rpc: "GetGiftCertificateLinking"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    service_name: "GiftCertificates"
    rpc: "GetGiftCertificate"
    rpc: "ListGiftCertificate"
    rpc: "BatchGetGiftCertificate"
    rpc: "GetGiftCertificateLinking"
    rpc: "CreateGiftCertificate"
    rpc: "UpdateGiftCertificate"
    rpc: "BatchCreateGiftCertificate"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "GiftCertificates"
    pattern: "{parent}**/.*"
};


//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
    rpc BatchValidateParent (BatchValidateParentRequest) returns (BatchValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;
    string id = 1;
}

message ValidateParentResponse {
    option (graphql.skip) = true;
    bool valid = 1;
}

message BatchValidateParentRequest {
    option (graphql.skip) = true;
    repeated string ids = 1;
}

message BatchValidateParentResponse {
    option (graphql.skip) = true;
    bool valid = 1;
}