syntax = "proto3";

package saastack.WebhookPreference.v1;

option go_package = "./pb";

import "annotations/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";
import "validate/chaku.proto";
import "pehredaar/pehredaar.proto";
import "eventspush/push.proto";
import "schema/schema.proto";

service WebhookPreferences {

    // CreateWebhookPreference creates new webhook preference.
    rpc CreateWebhookPreference (CreateWebhookPreferenceRequest) returns (WebhookPreference) {
        option (google.api.http) = {
            post: "/v1/webhook-preferences"
            body: "*"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (eventspush.event) = {
            push: true
        };
    }

    // GetWebhookPreference returns the webhook preference by its unique id.
    rpc GetWebhookPreference (GetWebhookPreferenceRequest) returns (WebhookPreference) {
        option (google.api.http) = {
            get: "/v1/webhook-preferences/{id}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };

    }
    rpc GetWebhookPreferenceByParent (GetWebhookPreferenceByParentRequest) returns (WebhookPreference) {
        option (google.api.http) = {
            get: "/v1/webhook-preferences/{parent}"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "webhookPreferenceByParent"
        };
    }

    // DeleteWebhookPreference will delete the webhook preference from the system by Id.
    // This will be a soft delete from the system
    rpc DeleteWebhookPreference (DeleteWebhookPreferenceRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/webhook-preferences/{id}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (eventspush.event) = {
            push: true
        };

    }

    // UpdateWebhookPreference will update the webhook preference identified by its webhook preference id.
    // Update WebhookPreference uses Field Mask to update specific properties of webhook preference object
    rpc UpdateWebhookPreference (UpdateWebhookPreferenceRequest) returns (WebhookPreference) {
        option (google.api.http) = {
            put: "/v1/webhook-preferences/{webhook_preference.id}"
            body: "*"
        };
        option (pehredaar.paths) = {
            resource: "webhook_preference.id"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "updateWebhookPreference"
        };
    }

    // ListWebhookPreference lists all the WebhookPreference(s)
    rpc ListWebhookPreference (ListWebhookPreferenceRequest) returns (ListWebhookPreferenceResponse) {
        option (google.api.http) = {
            get : "/v1/webhook-preferences"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };

    }

    // Gets all the WebhookPreference(s) by their ids
    rpc BatchGetWebhookPreference (BatchGetWebhookPreferenceRequest) returns (BatchGetWebhookPreferenceResponse) {
        option (google.api.http) = {
            get: "/v1/webhook-preferences:batchGet"
        };
        option (pehredaar.paths) = {
            resource: "ids"
        };
    }
}

message WebhookPreference {

    option (chaku.root) = true;
    option (chaku.prefix) = 'web';

    string id = 1;

    // fields
    repeated string event_id = 2;
    string key = 3;
    string url = 4;
    bool enabled = 5;

}

message CreateWebhookPreferenceRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    WebhookPreference webhook_preference = 2 [(validate.rules).message.required = true];
}

message GetWebhookPreferenceRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2;
}
message GetWebhookPreferenceByParentRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2;
}

message DeleteWebhookPreferenceRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message UpdateWebhookPreferenceRequest {
    WebhookPreference webhook_preference = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2;
}

message ListWebhookPreferenceRequest {
    string parent = 1 [(validate.rules).string.min_len = 1];
    EventFilters filters = 2;
    google.protobuf.FieldMask view_mask = 3;
}

message EventFilters {
    string event_id = 1;
}

message ListWebhookPreferenceResponse {
    repeated WebhookPreference webhookPreference = 1;
}

message BatchGetWebhookPreferenceRequest {
    repeated string ids = 1;
    google.protobuf.FieldMask view_mask = 2;
}

message BatchGetWebhookPreferenceResponse {
    repeated WebhookPreference webhook_preference = 1;
}

message UpdateWebhookPreferenceLog {
    WebhookPreference old_pref = 1;
    WebhookPreference new_pref = 2;
    google.protobuf.FieldMask update_mask = 3;
}


/////////////////////////////////////// ----------------------------------------------------------------------------


option (pehredaar.module_roles).module_role = {
  module_role_name : "Viewer"
  display_name : "Viewer"
  service_name : "WebhookPreferences"
  rpc : "ListWebhookPreference"
  rpc : "GetWebhookPreference"
  rpc : "BatchGetWebhookPreference"
};

option (pehredaar.module_roles).module_role = {
  module_role_name : "Editor"
  display_name : "Editor"
  service_name : "WebhookPreferences"
  rpc : "CreateWebhookPreference"
  rpc : "GetWebhookPreference"
  rpc : "DeleteWebhookPreference"
  rpc : "UpdateWebhookPreference"
  rpc : "ListWebhookPreference"
  rpc : "BatchGetWebhookPreference"
};

option (pehredaar.module_roles).module_role = {
  module_role_name : "Admin"
  display_name : "Admin"
  service_name : "WebhookPreferences"
  pattern : "{parent}**/.*"
};

//////////////////////////////---------------------------------------------------------------------------------

service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1;
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
}

