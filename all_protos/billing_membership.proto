syntax = "proto3";

package saastack.billing.v1;

option go_package = "./pb";

import "annotations/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";
import "validate/chaku.proto";
import "types/types.proto";
import "eventspush/push.proto";
import "schema/schema.proto";
import "crudgen/crudgen.proto";


service BillingMemberships {

    // CreateBillingMembership creates new billing membership.
    rpc CreateBillingMembership (BillingMembership) returns (BillingMembership) {
        option (crudgen.generator) = {
            skip :true
        };
    }

    // GetBillingMembership returns the billing membership by its unique id.
    rpc GetBillingMembership (GetBillingMembershipRequest) returns (BillingMembership) {
        option (google.api.http) = {
            get: "/v1/billing-memberships/{id=**}"
        };
        option (graphql.schema) = {
            query : "billingMembership"
        };
        // open endpoint
    }

    // DeleteBillingMembership will delete the billing membership from the system by Id.
    // This will be a soft delete from the system
    rpc DeleteBillingMembership (DeleteBillingMembershipRequest) returns (google.protobuf.Empty) {}

    // UpdateBillingMembership will update the billing membership identified by its billing membership id.
    // Update BillingMembership uses Field Mask to update specific properties of billing membership object
    rpc UpdateBillingMembership (UpdateBillingMembershipRequest) returns (BillingMembership) {}

    // ListBillingMembership lists all the BillingMembership(s)
    rpc ListBillingMembership (ListBillingMembershipRequest) returns (ListBillingMembershipResponse) {
        option (google.api.http) = {
            get : "/v1/billing-memberships"
        };
        option (graphql.schema) = {
            query : "billingMemberships"
        };
        // open endpoint
    }

    // Gets all the BillingMembership(s) by their ids
    rpc BatchGetBillingMembership (BatchGetBillingMembershipRequest) returns (BatchGetBillingMembershipResponse) {}
}

message GetBillingMembershipRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2;
}

message DeleteBillingMembershipRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message UpdateBillingMembershipRequest {
    BillingMembership billing_membership = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2;
}

// BillingMembership groups the plans of a license.
message BillingMembership {
    option (chaku.root) = true;
    option (chaku.prefix) = 'bmp';
    option (graphql.type) = 'BillingMembershipCopy';
    
    string id = 1;
    string name = 2 [(validate.rules).string.min_len = 3];
    string description = 3;
    saastack.types.Gallery gallery = 4 [(chaku.constraints).json = true];
    string license_id = 5 [(validate.rules).string.min_len = 3];
    string product = 6 [(graphql.input_skip)=true, (graphql.payload_skip)=true];
    map<string, string> metadata = 7;
    bool show_to_u_i = 8; // to be shown in UI or not
}


message ListBillingMembershipRequest {
    // Product is optional parameter. If passed, then billing memberships related to this product are returned
    string product = 1 [(graphql.input_skip)=true, (graphql.payload_skip)=true];
    google.protobuf.FieldMask view_mask = 2;
}

message ListBillingMembershipResponse {
    repeated BillingMembership billing_membership = 1;
}

message BatchGetBillingMembershipRequest {
    repeated string ids = 1;
    google.protobuf.FieldMask view_mask = 2;
}

message BatchGetBillingMembershipResponse {
    repeated BillingMembership billing_membership = 1;
}