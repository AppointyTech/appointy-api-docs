syntax = "proto3";

import "event.proto";
import "schema/schema.proto";
import "eventspush/push.proto";
import "types/enums.proto";
import "crudgen/crudgen.proto";
import "validate/chaku.proto";
import "validate/validate.proto";
import "pehredaar/pehredaar.proto";
import "annotations/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

package saastack.messaging.v1;

option go_package = "./pb";

/*
**Query Service**: As a company admin, I want to see the list of users who are matching
with criteria, so that I can ensure messages are getting send to right users.

Query will store the query(criteria) for the messaging.

```proto
message Query {
    string id = 1; // parent will be company
    string title = 2;
    string description = 3;
    Channel channel = 4;
    string query_string = 5;
}
```

Method:
- CreateQuery
- UpdateQuery
- DeleteQuery
- ListQuery
- GetQuery
- GetUsersCount(parent, (one_of query_id/ query), channel)
    - It will return the count with matching criteria
- GetUsers(parent, (one_of query/query_id), channel)
    - It will return all the user_event_profile without the pagination.

All methods will have normal validations.
*/
message Query {
    option (chaku.root) = true;
    option (chaku.prefix) = 'que';
    option (graphql.name) = 'MessagingQuery';

    string id = 1;
    string title = 2 [(validate.rules).string.min_len = 1, (validate.rules).string.max_len = 30];
    string description = 3 [(validate.rules).string.max_len = 200];
    saastack.types.ChannelType channel = 4 [(validate.rules).enum = {not_in: [0]}];
    string query_string = 5;
}

service QueryService {
    // CreateQuery will create a query with the provided criteria, so that
    // messages are sent to right users.
    rpc CreateQuery (CreateQueryRequest) returns (Query) {
        option (google.api.http) = {
            post : "/v1/messaging/query/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            mutation : "createQuery"
        };
    }

    // UpdateQuery will update a query's details e.g. title, query, channel
    rpc UpdateQuery (UpdateQueryRequest) returns (Query) {
        option (google.api.http) = {
            put : "/v1/messaging/query/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (crudgen.generator) = {
            skip: true
        };
        option (graphql.schema) = {
            mutation : "updateQuery"
        };
    }

    // DeleteQuery will deletes the query using id
    rpc DeleteQuery (DeleteQueryRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/messaging/query/{id=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            mutation : "deleteQuery"
        };
    }

    // GetQuery by query id
    rpc GetQuery (GetQueryRequest) returns (Query) {
        option (google.api.http) = {
            get : "/v1/messaging/query/{id=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "query"
        };
    }

    // ListQuery will list all the queries within the company (parent), using the
    // channel or query filter
    rpc ListQuery (ListQueryRequest) returns (ListQueryResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/query/list/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "queries"
        };
    }

    // GetQueryUsersCount will return the count with matching criteria using query string
    // or query id and channel
    rpc GetQueryUsersCount (GetQueryUsersCountRequest) returns (GetQueryUsersCountResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/query/user/count/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "queryUserCount"
        };
    }

    // ListQueryUsers will return all the user_event_profile without the pagination.
    rpc ListQueryUsers (GetQueryUsersCountRequest) returns (ListQueryUsersResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/query/users/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "queryUsers"
        };
    }
}

message CreateQueryRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Query query = 2 [(validate.rules).message.required = true];
}

message UpdateQueryRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Query query = 2 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 3 [(validate.rules).message.required = true];
}

message DeleteQueryRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message ListQueryRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    // optional filters
    saastack.types.ChannelType channel = 2 [(validate.rules).enum = {not_in: [0]}];
    google.protobuf.FieldMask view_mask = 3 [(validate.rules).message.required = true];
}

message ListQueryResponse {
    repeated Query query = 1;
}

message GetQueryRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message GetQueryUsersCountRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    oneof filter {
        string query_id = 2;
        string query_string = 3;
    }
    saastack.types.ChannelType channel = 4 [(validate.rules).enum = {not_in: [0]}];
}

message GetQueryUsersCountResponse {
    int64 users_count = 1;
}

message ListQueryUsersResponse {
    repeated UserEventProfile users = 1;
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "QueryService"
    rpc: "GetQuery"
    rpc: "ListQuery"
    rpc: "ListQueryUsers"
    rpc: "GetQueryUsersCount"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    service_name: "QueryService"
    rpc: "GetQuery"
    rpc: "ListQuery"
    rpc: "UpdateQuery"
    rpc: "ListQueryUsers"
    rpc: "GetQueryUsersCount"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "QueryService"
    rpc: "GetQuery"
    rpc: "ListQuery"
    rpc: "CreateQuery"
    rpc: "UpdateQuery"
    rpc: "DeleteQuery"
    rpc: "ListQueryUsers"
    rpc: "GetQueryUsersCount"
};
