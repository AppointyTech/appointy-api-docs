syntax = "proto3";

package saastack.cart.v1;

import "google/protobuf/empty.proto";
import "validate/chaku.proto";
import "validate/validate.proto";
import "crudgen/crudgen.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/field_mask.proto";
import "types/types.proto";
import "types/enums.proto";
import "schema/schema.proto";
import "pehredaar/pehredaar.proto";
import "annotations/annotations.proto";
import "eventspush/push.proto";
import "options/pii.proto";

option go_package = "./pb";
option (chaku.idempotent_sql_query_file_path) = "queries/structure.sql";

service CartService {

    // Retrieve cart of user/buyer using guest login flow
    rpc GuestCart (GuestCartRequest) returns (Cart) {
        option (google.api.http) = {
            get : "/v1/cart/buyer/guest/{buyer_id=**}"
        };
        option (graphql.schema) = {
            query : "guestCart"
        };
    }

    // Retrieve cart of logged-in user/buyer
    rpc GetCartOfBuyer (GetCartOfBuyerRequest) returns (Cart) {
        option (google.api.http) = {
            get : "/v1/cart/buyer/{buyer_id=**}"
        };
        option (pehredaar.paths) = {
            resource: "parent"
            resource: "buyer_id"
        };
        option (graphql.schema) = {
            query : "cartOfBuyer"
        };
    }

    // List all carts created on admin-side within a business
    rpc ListCart (ListCartRequest) returns (ListCartResponse) {
        option (google.api.http) = {
            get : "/v1/cart/list/{parent=**}"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "carts"
        };
    };

    // Retrieve cart using its unique identifier
    rpc GetCart (GetCartRequest) returns (Cart) {
        option (google.api.http) = {
            get : "/v1/cart/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "cart"
        };
    };

    // Delete items in cart using cart and items identifier corresponding to customer
    rpc DeleteCartItems (DeleteCartItemsRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/cart/items/{cart_id=**}"
        };
        // internal rights
        option (graphql.schema) = {
            mutation : "deleteCartItems"
        };
    };

    // Delete cart using its unique identifier
    rpc DeleteCart (DeleteCartRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/cart/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            mutation : "deleteCart"
        };
    };

    // Upsert cart for logged-in user/buyer, used to add/override items to cart
    rpc UpsertCart (UpsertCartRequest) returns (Cart) {
        option (google.api.http) = {
            post: "/v1/cart/upsert"
            body: "*"
        };
        // internal rights
        option (graphql.schema) = {
            mutation : "upsertCart"
        };
    }

    // Upsert cart for guest-login user/buyer, used to add/override items to cart
    rpc UpsertGuestCart (UpsertCartRequest) returns (Cart) {
        option (google.api.http) = {
            post: "/v1/cart/upsert/guest"
            body: "*"
        };
        option (graphql.schema) = {
            mutation : "upsertGuestCart"
        };
    }

    // apply/override discount on cart
    rpc CartApplyDiscount (CartApplyDiscountRequest) returns (Cart) {
        option (google.api.http) = {
            put: "/v1/cart/apply/discount/{customer_id=**}"
            body : "*"
        };
        option (graphql.schema) = {
            mutation : "cartApplyDiscount"
        };
    };

    rpc CartRemoveDiscount (CartRemoveDiscountRequest) returns (Cart) {
        option (google.api.http) = {
            put: "/v1/cart/remove/discount/{customer_id=**}"
            body : "*"
        };
        option (graphql.schema) = {
            mutation : "cartRemoveDiscount"
        };
    };

    // Validate public & automatically applicable discounts corresponding to cart
    rpc ValidatePublicDiscount (ValidateDiscountRequest) returns (ValidateDiscountResponse) {
        option (google.api.http) = {
            post : "/v1/cart/validate/discount/{customer_id=**}"
            body: "*"
        };
        option (graphql.schema) = {
            mutation : "validatePublicDiscount"
        };
    }

    rpc AddCartPaymentSources (AddCartPaymentSourcesRequest) returns (Cart) {
        option (google.api.http) = {
            post : "/v1/cart/payment-sources/add"
            body: "*"
        };
        option (graphql.schema) = {
            mutation : "addCartPaymentSources"
        };
    }

    rpc RemoveCartPaymentSources (RemoveCartPaymentSourcesRequest) returns (Cart) {
        option (google.api.http) = {
            post : "/v1/cart/payment-sources/remove"
            body: "*"
        };
        option (graphql.schema) = {
            mutation : "removeCartPaymentSources"
        };
    }

    rpc GetCartPaymentInfo(GetCartPaymentInfoRequest) returns (GetCartPaymentInfoResponse) {
        option (google.api.http) = {
            get: "/v1/cart/payment-info"
        };
        // internal rights
        option (graphql.schema) = {
            query : "getCartPaymentInfo"
        };
    }

    rpc DeletePastGuestCarts(DeletePastGuestCartsRequest) returns (.google.protobuf.Empty) {}
}

message Cart {
    option (chaku.root) = true;
    option (chaku.prefix) = 'crt';
    option (chaku.limit_multiplier) = 10;

    // parent of cart is location
    string id = 1;
    repeated CartItem items = 2 [(validate.rules).repeated.items.message.required = true, (chaku.constraints).loosely_dependent = true];
    string buyer_id = 3; // customer_id(empty in case of guest login)
    saastack.types.Price final_price = 4; // final price after adding tax and discount without saved payment-sources
    saastack.types.Price tax = 5;
    CartType cart_type = 6;
    bool guest = 7; // represent if cart is created using guest user or not
    string discount_code = 8; // optional, discount applied on cart
    saastack.types.Price discounted_amount = 10;
    repeated CartPaymentSource cart_payment_sources = 12 [(chaku.constraints).json = true]; // just to hold payment-sources-info corresponding to cart
    saastack.types.Price actual_price = 13;
    string buyer_details = 14; // contains buyer details(cart-customer object) to hold data for guest login case
    map<string, string> metadata = 15; // to store additional data
    repeated CartPolicyData policy_data = 16 [(chaku.constraints).json = true]; // to store policy data for order
    string timezone = 17;
}

message CartPolicyData {
    string policy_id = 1;
    uint64 version = 2;
    string source_id = 3; // cannot be repeated as different source-ids can be accepted at different times
    google.protobuf.Timestamp timestamp = 4;
    // UI: Always check before placing order if latest versions are accepted or not.
}

// Payment sources just to hold payment-sources-info corresponding to cart
// will be used while placing and paying for order
message CartPaymentSource {
    saastack.types.PaymentMethod type = 1;
    saastack.types.Price price = 2;
    string source_identifier = 3;
    string item_id = 4;
    uint32 quantity = 5;
    PaymentSourceConsumptionType consumption_type = 6;
}

enum PaymentSourceConsumptionType {
    UNSPECIFIED = 0;
    QUANTITY = 1;
    AMOUNT = 2;
}

// CartType represents who has created: business-admins or end-customer
enum CartType {
    CartType_UNSPECIFIED = 0;
    CLIENT_SIDE = 1;
    ADMIN_SIDE = 2;
}

message CartItem {
    option (chaku.prefix) = 'crtItem';
    
    string id = 1;
    saastack.types.Protobuf item = 2 [(chaku.constraints).json = true];
    saastack.types.Price final_price = 3; // final price after adding tax and discount without saved payment-sources
    // Display price to be used in UI
    saastack.types.Price actual_price = 4;
    saastack.types.Price min_amount = 5;
    bool valid = 6; // specify if cart-item is bookable
    string recurring_id = 16;

    // additional fields
    repeated saastack.types.TaxInfo tax = 7 [(chaku.constraints).json = true];
//    string title = 8;
//    string sub_title = 9;
//    string description = 10;
//    map<string, string> template_data = 11;
//    saastack.types.ItemType item_type = 12;
//    string image = 13;
//    map<string, string> actions = 14;
    map<string, string> metadata = 15;

    saastack.types.Price discounted_amount = 18;
    repeated CartPaymentSource cart_payment_sources = 19 [(chaku.constraints).json = true]; // just to hold payment-sources-info corresponding to cart-item

    repeated string consumable_ids = 20;
    int32 duration_in_minutes = 21;
    saastack.types.Timeslot timeslot = 22;

    string item_type = 23;

    string reference_id = 24; // to be transferred to order-item as reference

    string message = 25;
    string leased_id = 26;
    google.protobuf.Timestamp lease_valid_till = 27;
    uint32 quantity = 28;
    // will be used to create linking with appointment id
    string buyer_organization_id = 29;
}

message GetCartRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 2;
}

message ListCartRequest {
    string parent = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 7;
}

message ListCartResponse {
    repeated Cart cart = 1;
}

message DeleteCartRequest {
    string id = 1 [(validate.rules).string.min_len = 1];
}

message DeleteCartItemsRequest {
    string cart_id = 1 [(validate.rules).string.min_len = 1];
    repeated string item_ids = 2; // if empty, delete all items
    string customer_id = 3 [(validate.rules).string.min_len = 1];
}

message GetCartOfBuyerRequest {
    // customer_id of business
    string buyer_id = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 2;
    // get client/admin side cart of customer
    CartType cart_type = 3;
    string parent = 4 [(validate.rules).string.min_len = 1]; // location-id
}

message GuestCartRequest {
    string buyer_id = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 2;
    string parent = 3 [(validate.rules).string.min_len = 1]; // location-id
}

message UpsertCartRequest {
    // parent is location id
    string parent = 1 [(validate.rules).string.min_len = 1];
    // cart-items to be add/updated to cart
    repeated CartItem items = 2 [(validate.rules).repeated.items.message.required = true];
    // buyer of cart
    oneof buyer {
        option (validate.required) = true;
        // validate against business
        string customer_id = 3;
        // create/get customer against business
        CartCustomer customer = 4;
    }
    // cart belongs to admin/client side
    CartType cart_type = 5;
    // to delete and override over old cart items, or to append to them
    bool override = 6;

    // can be empty
    string discount_code = 7;
    // timezone to restrict discount (optional)
    string timezone = 8;

    repeated CartPolicyData policy_data = 9; // to store policy data for order
    repeated types.PaymentMethod apply_payment_methods = 10;
}

message CartCustomer {
    // fields of customer (copied)

    // Unique email of the customer
    string email = 2 [(validate.rules).string.email = true];
    // First name of the customer
    string first_name = 3 [(validate.rules).string.max_len = 50];
    // Last Name of the customer
    string last_name = 4 [(validate.rules).string.max_len = 50];
    // Date of Birth of the customer
    google.protobuf.Timestamp birth_date = 5;
    // Url of the profile Image
    saastack.types.GalleryItem profile_image = 6;
    // Telephone/Mobile Numbers of the customer // Validation can be added for numbers
    repeated string telephones = 7 [deprecated = true];
    string phone_number = 14;
    // Address of the customer
    saastack.types.Address address = 8;
    // Gender of Customer
    saastack.types.Gender gender = 9;

    // Tags saved against by a customer
    repeated string tag = 10;
    // Timezone of the customer
    string timezone = 11;
    // Preferred Languages of a customer
    string preferred_language = 12;
    // Additional metadata of the customer
    map<string, string> metadata = 13;
}

message CartApplyDiscountRequest {
    string code = 1;
    string cart_id = 2;
    string customer_id = 3;
    // timezone to restrict discount (optional)
    string timezone = 4;
}

message CartRemoveDiscountRequest {
    string cart_id = 1;
    string customer_id = 2;
}

message ValidateDiscountRequest {
    option (graphql.name) = "CartValidateDiscountRequest";
    //customer_id unique id of customer who will be consuming this discount
    string customer_id = 1 [(validate.rules).string.min_len = 1];
    string cart_id = 2;
    string parent = 3 [(validate.rules).string = {min_len : 5}];

    // timezone to restrict discount (optional)
    string timezone = 5;
}

message ValidateDiscountResponse {
    option (graphql.name) = "CartValidateDiscountResponse";
    repeated ApplicableDiscount applicable_discount = 1;
}

message ApplicableDiscount {
    option (graphql.name) = "CartApplicableDiscount";
    string code = 1;
    string discount_id = 2;
    repeated Discountable discountables = 3;
    saastack.types.Price total_discount = 4;
    string title = 5;
    string description = 6;
    // holds value for discount-type enum in discount
    // 0: PERCENTAGE; 1: FIXED
    CartDiscountType discount_type = 7;
    DiscountValue discount_value = 8;
}

enum CartDiscountType {
    CartDiscountType_UNSPECIFIED = 0;
    PERCENTAGE = 1;
    FIXED = 2;
}

message DiscountValue {
    option (graphql.name) = "CartDiscountValue";
    // This value is used for discount percentage, this percent is used
    double discount_percentage = 1;
    // This value is used for fixed discount value and different currencies
    saastack.types.Price discount_prices = 2;
}

message Discountable {
    option (graphql.name) = "CartDiscountable";

    // item id on which discount can be applied
    string item_id = 1;

    // discount that can be applied on each item
    saastack.types.Price discount = 2;
}

message AddCartPaymentSourcesRequest {
    string cart_id = 1 [(validate.rules).string.min_len = 1];
    repeated CartPaymentSource cart_payment_sources = 2;
    // ConsumerPasscode is the internal wallet passcode which will be applied in cart
    string consumer_passcode = 3;
    // ConsumerId is the id of the consumer for which passcode is attached
    string consumer_id = 4;
}

message RemoveCartPaymentSourcesRequest {
    string cart_id = 1 [(validate.rules).string.min_len = 1];
    repeated string source_identifier = 2[(validate.rules).repeated.items.string.min_len = 1];
}

message GetCartPaymentInfoRequest {
    string cart_id = 1;
    string customer_id = 2; // optional
}

message GetCartPaymentInfoResponse {
    bool payLater = 1;
    saastack.types.Price min_amount = 2;
    repeated CartItemPaymentInfo cart_item_payment_infos = 3;
}

message CartItemPaymentInfo {
    string cart_item_id = 1;
    bool payLater = 2;
    saastack.types.Price min_amount = 3;
}

message DeletePastGuestCartsRequest{
    google.protobuf.Timestamp past_date = 1;
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    rpc: "GetCart"
    rpc: "ListCart"
    rpc: "GetCartOfBuyer"
    rpc: "GetCartPaymentInfo"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    rpc: "GetCart"
    rpc: "ListCart"
    rpc: "DeleteCartItems"
    rpc: "GetCartOfBuyer"
    rpc: "UpsertCart"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    pattern: "{parent}**/.*"
};

//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1;
    string timezone = 2;
    string currency = 3;
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
    string timezone = 2;
    string currency = 3;
}