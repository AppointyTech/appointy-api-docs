syntax = "proto3";

import "schema/schema.proto";
import "eventspush/push.proto";
import "types/types.proto";
import "types/enums.proto";
import "crudgen/crudgen.proto";
import "validate/chaku.proto";
import "validate/validate.proto";
import "pehredaar/pehredaar.proto";
import "annotations/annotations.proto";
import "google/protobuf/any.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package saastack.messaging.v1;

option go_package = "./pb";

/*
As a company admin, I want to see the list of events, so that I can make analysis based on those events.

```proto
message Event {
	string id = 1; // parent is company
	string name = 2;
	string display_name = 3;
	DataType data_type = 4;
	bool default = 5;
	string type = 6; // event_type
	string app_type_id = 7;
	string user_property = 8;
}
```

**rpc GetEventList()**
- It will take the parent_id and will return all the default event list + events those are created under the parent.

**rpc CreateEvent()**
- It will create the non default events within the company and will have have check that the event name do not already exists in
    - In same company
    - In default list
*/
message MessagingEvent {
    option (chaku.root) = true;
    option (chaku.prefix) = 'eve';

    string id = 1;
    string name = 2 [(validate.rules).string.min_len = 1, (validate.rules).string.max_len = 30]; // service.Name
    string display_name = 3 [(validate.rules).string.min_len = 1, (validate.rules).string.max_len = 30];
    bool is_default = 4;
    DataType data_type = 5;
    string user_id = 6;
    string app_type_id = 7;
    string user_property = 8;
    string event_type = 9 [(validate.rules).string.min_len = 1]; // Appointment
}

enum DataType {
    STRING = 0;
    NUMBER = 1;
    FLOAT = 2;
    DATETIME = 3;
    TIME_INTERVAL = 4;
}

service MessagingEventService {
    // ListMessagingEvent will use the provided company id (as parent id) and returns all the events in the company
    // along with all the default messaging events
    rpc ListMessagingEvent (ListMessagingEventRequest) returns (ListMessagingEventResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/event/{parent=**}"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "messagingEvents"
        };
    }

    // CreateMessagingEvent will create a non default events within the company and will check that the event name
    // does not already exists in the company or in default event list
    rpc CreateMessagingEvent (CreateMessagingEventRequest) returns (MessagingEvent) {
        //option (google.api.http) = {
        //    post : "/v1/messaging/event/{parent=**}"
        //};
        //option (eventspush.event) = {
        //    push: true
        //};
        //option (pehredaar.paths) = {
        //    resource: "parent"
        //};
        //option (graphql.schema) = {
        //    mutation : "createMessagingEvent"
        //};
    }

    // UpdateMessagingEvent will update a non default events within the company and will not update event name
    // if is already exists in the company or in default event list
    rpc UpdateMessagingEvent (UpdateMessagingEventRequest) returns (MessagingEvent) {
        //option (google.api.http) = {
        //    put : "/v1/messaging/event/{parent=**}"
        //};
        //option (eventspush.event) = {
        //    push: true
        //};
        //option (pehredaar.paths) = {
        //    resource: "parent"
        //};
        option (crudgen.generator) = {
            skip: true
        };
        //option (graphql.schema) = {
        //    mutation : "updateMessagingEvent"
        //};
    }
}

message ListMessagingEventRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message ListMessagingEventResponse {
    repeated MessagingEvent messaging_event = 1;
}

message CreateMessagingEventRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    MessagingEvent messaging_event = 2 [(validate.rules).message.required = true];
}

message UpdateMessagingEventRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    MessagingEvent messaging_event = 2 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 3 [(validate.rules).message.required = true];
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "MessagingEventService"
    rpc: "ListMessagingEvent"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    service_name: "MessagingEventService"
    rpc: "ListMessagingEvent"
    rpc: "UpdateMessagingEvent"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "MessagingEventService"
    rpc: "ListMessagingEvent"
    rpc: "UpdateMessagingEvent"
    rpc: "CreateMessagingEvent"
};

/*
**User event profile**: As a product owner, I want to save the user event profile to a separate table, so that during messaging we do not need to process all the users.

User event profile store the user property (each customer) for sending . It will be used for storing the messaging information.

```proto
message UserEventProfile {
    string id = 1; // parent is company
    string user_id = 2;
    string customer_id = 3;
    string parent_id = 4;
    string email = 5;
    string phone = 6;
    string first_name = 7;
    string last_name = 8;
    string push_notification_enabled = 9; // TODO: [push_notification_enabled] string type ?
}
```
- When a new customer is create it will fire the event and will create the entry into the UserEventProfile table.
- When the customer object is updated it will fire the event and will update the existing entry.
*/
message UserEventProfile {
    option (chaku.root) = true;
    option (chaku.prefix) = 'eveusr';

    string id = 1;
    string user_id = 2;
    string customer_id = 3;
    string email = 4;
    string phone = 5;
    string first_name = 6;
    string last_name = 7;
    saastack.types.Address address = 8;
    google.protobuf.Timestamp birth_date = 9;
    saastack.types.Gender gender = 10;
    string push_notification_enabled = 11;
}

service UserEventProfileService {
    // UpsertUserEventProfile creates a new entry if not already present, or update the existing
    // against any new customer created or updated
    rpc UpsertUserEventProfile (UpsertUserEventProfileRequest) returns (UserEventProfile);
}

message UpsertUserEventProfileRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    UserEventProfile profile = 2 [(validate.rules).message.required = true];
}

/*
**Event Data**: As a company admin, I want to select the users who are matching with criteria, so that I can send them promotional emails.

This service will insert the data into the events table. It will be called from the background events/ scheduler.

```proto
message EventData {
    string id = 1; // parent = company id
    string event_name = 2;
    string event_data = 3; (JsonB in database)
    string user_id = 5;
    google.protobuf.Timestamp created_on = 7;
}

message EventDataRequest {
    proto.Message message = 1;
    string event_name = 2;
    string parent_id = 3;
    string user_id = 4; // user_event_profile_id
    google.protobuf.Timestamp created_on = 5;
}
```
Methods:
- InsertEvent(EventDataRequest)
    - It will take EventDataRequest object as input and then it will create its own custom object (with relevant) fields for that event
    and insert it into the db.
    We will create those objects in the proto.

- InsertEvents()
    - It will take the list of events and insert it into the database.
*/
message EventData {
    option (chaku.root) = true;
    option (chaku.prefix) = 'evedb';

    string id = 1;
    string event_type = 2; // Appointment
    EventDataJson data = 3 [(chaku.constraints).json = true]; // JsonB of map[string]interface{}
    string user_id = 4;
    google.protobuf.Timestamp created_on = 5;
}

message EventDataJson {
    string value = 1;
}

message EventDataRequest {
    google.protobuf.Any message = 1 [(validate.rules).message.required = true];
    string event_type = 2 [(validate.rules).string.min_len = 3];
    string parent = 3 [(validate.rules).string.min_len = 3];
    string user_event_profile_id = 4 [(validate.rules).string.min_len = 3];
    google.protobuf.Timestamp created_on = 5 [(validate.rules).message.required = true];
}

service EventDatabaseService {
    // InsertEventData creates new entries in the event data table using the provided
    // list of event data requests' message and event name
    rpc InsertEventData (InsertEventDataRequest) returns (InsertEventDataResponse);
}

message InsertEventDataRequest {
    repeated EventDataRequest requests = 1 [(validate.rules).repeated.min_items = 1];
}

message InsertEventDataResponse {
    repeated EventData list = 1;
}
