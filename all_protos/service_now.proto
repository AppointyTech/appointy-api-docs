syntax = "proto3";

package appointy.service_now.v1;

option go_package = "./pb";

import "annotations/annotations.proto";
import "validate/validate.proto";
import "pehredaar/pehredaar.proto";
import "schema/schema.proto";
import "logging/log.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

service ServiceNow {

    rpc IsJnJ (IsJnJRequest) returns (IsJnJResponse){}

    rpc ConfigAnswers (ConfigAnswersRequest) returns (ConfigAnswersResponse){}

    rpc ListServiceNowIncidents (ListServiceNowIncidentsRequest) returns (ListServiceNowIncidentsResponse) {
        option (google.api.http) = {
            get: "/v1/service-now/incidents"
        };
        option (pehredaar.paths) = {
            resource: "user_id"
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "serviceNowIncidents"
        };
        option (logging.skip_log) = true;
    }

    rpc CreateServiceNowIncident (CreateServiceNowIncidentRequest) returns (CreateServiceNowIncidentResponse) {
        option (logging.skip_log) = true;
    }

    rpc AddCommentInIncident (AddCommentInIncidentRequest) returns (.google.protobuf.Empty) {
        option (logging.skip_log) = true;
    }

    rpc UpdateIncident (UpdateIncidentRequest) returns (.google.protobuf.Empty) {}
}

message ConfigAnswersRequest {
    string contact_type = 1;
    string alternate_contact = 2;
}

message ConfigAnswersResponse {
    string ticket_special_handling = 1;
}

message IsJnJRequest {
    string slug = 1;
}

message IsJnJResponse {
    bool valid = 1;
}

message AddCommentInIncidentRequest {
    string comment = 1;
    string incident_id = 2;
    string parent = 3;
}

message AddCommentInServiceNowAPIIncidentErrorResponse {
    string message = 1;
}

message ListServiceNowIncidentsRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    string email = 2 [(validate.rules).string.min_len = 3];
    string user_id = 3 [(validate.rules).string.min_len = 3];
}

message ListServiceNowIncidentsResponse {
    repeated Incident incidents = 1;
}

message ListServiceNowAPIIncidentsResponse {
    repeated Incident result = 1;
}

message CreateServiceNowAPIIncidentSuccessResponse {
    CreateServiceNowAPIIncidentResult result = 1;
}

message CreateServiceNowAPIIncidentErrorResponse {
    CreateServiceNowAPIIncidentError result = 1;
}

message CreateServiceNowAPIIncidentError {
    int32 status_code = 1;
    string status_message = 2;
    string return_response = 3;
}

message CreateServiceNowAPIIncidentResult {
    string status_code = 1;
    string status_message = 2;
    Incident return_response = 3;
}

message CreateServiceNowAPIIncidentRequest {
    Incident incident_object = 1;
}

message Incident {
    string number = 1;
    string short_description = 2;
    string u_state = 3;
    string urgency = 4;
    string impact = 5;
    string cmdb_ci = 6;
    string hold_reason = 7;
    string caller_id = 8;
    string assignment_group = 9;
    string contact_type = 10;
    string description = 11;
    string location = 12;
    string u_service_location = 13;
    string correlation_id = 14;
    string work_notes = 15;
    string assigned_to = 16;
    string u_kcs_solution = 17;
}

message CreateServiceNowIncidentRequest {
    string parent = 1;
    string title = 2;
    string description = 3;
    string special_handling = 4;
    bool nexthink = 5;
    string email = 6;
    string slug = 7;
    string work_notes = 8;
    bool c3i = 9;
    string employee_email = 10;
    bool cloudcity = 11;
    bool cloudcity2 = 12;
    string kb = 13;
    string device_name = 14;
    string user_source = 15;
}

message CreateServiceNowIncidentResponse {
    Incident incident = 1;
}

enum IncidentStates {
    IncidentStates_UNDEFINED = 0;
    New = 100;
    Assigned = 200;
    WorkInProgress = 300;
    Pending = 400;
    Resolved = 800;
    Closed = 900;
}

message UpdateIncidentRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Incident incident = 2 [(validate.rules).message.required = true];
    .google.protobuf.FieldMask update_mask = 3 [(validate.rules).message.required = true];
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1 [(validate.rules).string.min_len = 1];
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "JNJIsCustom"
    display_name: "JNJIsCustom"
    pattern: "*{parent}**"
    skip_service_name: true
};
