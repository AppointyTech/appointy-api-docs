syntax = "proto3";

package saastack.group_settings.v1;

option go_package = "./pb";
option (chaku.no_migration) = true;

import "annotations/annotations.proto";
import "google/protobuf/field_mask.proto";
import "validate/validate.proto";
import "validate/chaku.proto";
import "pehredaar/pehredaar.proto";
import "eventspush/push.proto";
import "schema/schema.proto";
import "crudgen/crudgen.proto";

service GroupSettings {

    rpc GetGroupSetting (GetGroupSettingRequest) returns (GroupSetting) {
        option (google.api.http) = {
            get: "/v1/settings/group/{parent=**}"
        };
        option (graphql.schema) = {
            query : "groupSetting"
        };
        option (crudgen.generator) = {
            skip: true
        };
    }

    rpc UpsertGroupSetting (UpsertGroupSettingRequest) returns (GroupSetting) {
        option (google.api.http) = {
            put: "/v1/settings/group/{group_setting.id=**}"
            body: "*"
        };
        option (graphql.schema) = {
            mutation : "upsertGroupSetting"
        };
        option (pehredaar.paths) = {
            resource: "group_setting.id"
        };
        option (eventspush.event) = {
            push: true
        };
    }
}

message GroupSetting {

    option (chaku.root) = true;
    option (chaku.prefix) = 'gst';
    
    string id = 1;

	// fields
    string admin_css = 2;
    map<string,string> metadata = 3;
    bool has_extended_fields = 4;
}

message GetGroupSettingRequest {
    // parent is group-id
    string parent = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2;
}

message UpsertGroupSettingRequest {
    GroupSetting group_setting = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2;
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    pattern: "{parent}**/.*"
};

////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1;
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
}
