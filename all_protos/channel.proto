syntax = "proto3";

import "google/protobuf/empty.proto";
import "annotations/annotations.proto";
import "validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "eventspush/push.proto";
import "pehredaar/pehredaar.proto";
import "validate/chaku.proto";
import "schema/schema.proto";
import "logging/log.proto";

package saastack.channel.v1;

option go_package = "./pb";

service Channels {

    // Creates a channel
    rpc CreateChannel (CreateChannelRequest) returns (Channel) {
        option (google.api.http) = {
            post: "/v1/channels"
            body: "*"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            mutation : "createChannel"
        };
    };

    // Updates the channel
    rpc UpdateChannel (UpdateChannelRequest) returns (Channel) {
        option (google.api.http) = {
            put: "/v1/channels/{channel.id=**}"
            body: "*"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "channel.id"
        };
        option (graphql.schema) = {
            mutation : "updateChannel"
        };
    };

    // Gets a channel by Id
    rpc GetChannel (GetChannelRequest) returns (Channel) {
        option (google.api.http) = {
            get: "/v1/channels/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "channel"
        };
        option (logging.skip_log) = true;
    };

    // There will be no need of pagination
    // Lists all the channels
    rpc ListChannel (ListChannelRequest) returns (ListChannelResponse) {
        option (google.api.http) = {
            get: "/v1/channels"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "channels"
        };
        option (logging.skip_log) = true;
    };

    // Deletes a channel by Id
    rpc DeleteChannel (DeleteChannelRequest) returns (.google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/channels/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (eventspush.event) = {
            push: true
        };
        option (graphql.schema) = {
            mutation : "deleteChannel"
        };
    };

    // Gets all the channels by their Ids
    rpc BatchGetChannel (BatchGetChannelRequest) returns (BatchGetChannelResponse) {
        option (pehredaar.paths) = {
            resource: "ids"
        };
        option (logging.skip_log) = true;
    }
}

message UpdateChannelRequest {
    Channel channel = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2 [(validate.rules).message.required = true];
}

message CreateChannelRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Channel channel = 2 [(validate.rules).message.required = true];
}

message Channel {
    option (chaku.root) = true;
    option (chaku.prefix) = "cnl";
     
    string id = 1;
    string name = 2 [(validate.rules).string = {min_len: 1 max_len: 100}];
    string description = 3;
    map<string, string> metadata = 4;
}

message GetChannelRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message ListChannelResponse {
    repeated Channel channel = 1;
}

message DeleteChannelRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message ListChannelRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message BatchGetChannelRequest {
    repeated string ids = 1 [(validate.rules).repeated = {max_items: 3, min_items: 1, items:{string:{min_len: 3}}}];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message BatchGetChannelResponse {
    repeated Channel channel = 1;
}

message UpdateChannelLog {
    Channel old_channel = 1;
    Channel new_channel = 2;
    google.protobuf.FieldMask update_mask = 3;
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    rpc: "GetChannel"
    rpc: "ListChannel"
    rpc: "BatchGetChannel"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    rpc: "GetChannel"
    rpc: "ListChannel"
    rpc: "BatchGetChannel"
    rpc: "CreateChannel"
    rpc: "UpdateChannel"
    rpc: "DeleteChannel"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    pattern: "{parent}**/.*"
};

//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1;
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
}
