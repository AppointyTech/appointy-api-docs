syntax = "proto3";

package saastack.billing.v1;

option go_package = "./pb";

import "annotations/annotations.proto";
import "validate/validate.proto";
import "validate/chaku.proto";
import "pehredaar/pehredaar.proto";
import "eventspush/push.proto";
import "schema/schema.proto";
import "crudgen/crudgen.proto";
import "types/types.proto";

service BillingGatewayMembershipsWrapper {

    rpc CreateGatewayMembershipPlan (CreateGatewayMembershipPlanRequest) returns (CreateGatewayMembershipPlanResponse);

//    rpc BatchCreateGatewayMembershipPlan (BatchCreateGatewayMembershipPlanRequest) returns (BatchCreateGatewayMembershipPlanResponse);

    rpc UpdateGatewayMembershipPlan (UpdateGatewayMembershipPlanRequest) returns (UpdateGatewayMembershipPlanResponse);

    rpc BatchUpdateGatewayMembershipPlan (BatchUpdateGatewayMembershipPlanRequest) returns (BatchUpdateGatewayMembershipPlanResponse);

    rpc DeleteGatewayMembershipPlan (DeleteGatewayMembershipPlanRequest) returns (DeleteGatewayMembershipPlanResponse);

    rpc BatchDeleteGatewayMembershipPlan (BatchDeleteGatewayMembershipPlanRequest) returns (BatchDeleteGatewayMembershipPlanResponse);
}

message CreateGatewayMembershipPlanRequest {
    string product_name = 1 [(validate.rules).string.min_len = 1];
    string product_id = 2 [(validate.rules).string.min_len = 1];
    string plan_name = 3 [(validate.rules).string.min_len = 1];
    string plan_id = 4 [(validate.rules).string.min_len = 1];
    saastack.types.Price price = 5 [(validate.rules).message.required = true];
    saastack.types.Interval validity = 6;
    string level_id = 7;
    bool skip_existing = 8;
    // true -> if successful get -> do nothing
    //            else create
    // false -> directly create
}

message CreateGatewayMembershipPlanResponse {
    bool success = 1;
    string message = 2;
}

//message BatchCreateGatewayMembershipPlanRequest {
//    repeated CreateGatewayMembershipPlanRequest requests = 1;
//}
//
//message BatchCreateGatewayMembershipPlanResponse {
//    bool success = 1;
//    string message = 2;
//}

message UpdateGatewayMembershipPlanRequest {
    string product_name = 1 [(validate.rules).string.min_len = 1];
    string product_id = 2 [(validate.rules).string.min_len = 1];
    string plan_name = 3 [(validate.rules).string.min_len = 1];
    string plan_id = 4 [(validate.rules).string.min_len = 1];
    saastack.types.Price price = 5 [(validate.rules).message.required = true];
    saastack.types.Interval validity = 6;
    string level_id = 7; // location-id to get connected gateway credentials
    bool skip_not_found = 8;
    // true -> get -> successful -> update
    //              -> not-found -> do nothing
    //              -> fails -> error
    // false -> get -> successful -> update
    //             -> fails -> error
}

message UpdateGatewayMembershipPlanResponse {
    bool success = 1;
    string message = 2;
}

message BatchUpdateGatewayMembershipPlanRequest {
    repeated UpdateGatewayMembershipPlanRequest batch_requests = 1;
}

message BatchUpdateGatewayMembershipPlanResponse {
    bool success = 1;
    string message = 2;
}

message DeleteGatewayMembershipPlanRequest {
    string plan_id = 1 [(validate.rules).string.min_len = 1];
    string level_id = 2;
    bool skip_not_found = 3;
}

message DeleteGatewayMembershipPlanResponse {
    bool success = 1;
    string message = 2;
}

message BatchDeleteGatewayMembershipPlanRequest {
    repeated DeleteGatewayMembershipPlanRequest batch_requests = 1;
}

message BatchDeleteGatewayMembershipPlanResponse {
    bool success = 1;
    string message = 2;
}