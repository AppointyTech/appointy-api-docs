syntax = "proto3";

import "types/types.proto";
import "validate/validate.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/empty.proto";
import "annotations/annotations.proto";
import "eventspush/push.proto";
import "pehredaar/pehredaar.proto";
import "validate/chaku.proto";
import "schema/schema.proto";
import "logging/log.proto";
import "google/protobuf/duration.proto";
import "crudgen/crudgen.proto";

package saastack.addons.v1;

option go_package = "./pb";

service Addons {

    rpc CreateAddon (CreateAddonRequest) returns (Addon) {
        option (google.api.http) = {
            post: "/v1/addons"
            body: "*"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            mutation : "createAddon"
        };
        option (crudgen.generator) = {
            skip : true
        };
    }

    rpc GetAddon (GetAddonRequest) returns (Addon) {
        option (google.api.http) = {
            get: "/v1/addons/{id=**}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "addon"
        };
        option (logging.skip_log) = true;
    }

    rpc ListAddon (ListAddonRequest) returns (ListAddonResponse) {
        option (google.api.http) = {
            get: "/v1/addons"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "addons"
        };
        option (logging.skip_log) = true;
    }

    rpc DeleteAddon (DeleteAddonRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/addons/{id=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            mutation : "deleteAddon"
        };
        option (crudgen.generator) = {
            skip : true
        };
    }

    rpc UpdateAddon (UpdateAddonRequest) returns (Addon) {
        option (google.api.http) = {
            put: "/v1/addons/{addon.id=**}"
            body: "*"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "addon.id"
        };
        option (graphql.schema) = {
            mutation : "updateAddon"
        };
        option (crudgen.generator) = {
            skip : true
        };
    }

    rpc BatchGetAddon (BatchGetAddonRequest) returns (BatchGetAddonResponse) {
        option (google.api.http) = {
            post: "/v1/addons:batchGet"
            body: "*"
        };
        option (pehredaar.paths) = {
            resource: "ids"
        };
        option (logging.skip_log) = true;
    }
}

message Addon {

    option (chaku.root) = true;
    option (chaku.prefix) = "add";
    
    string id = 1;
    string title = 2;
    string description = 3 [(validate.rules).string.max_len = 2000];

    // This field will be used by the UI for display purpose.
    // It can be List, checkbox or other input type
    string addon_type = 4;

    // items contains actual information about the addons
    repeated AddonItem items = 5 [(chaku.constraints).json = true];

    // priority decide the actual display order in UI
    int32 priority = 6;
    map<string, string> metadata = 7;
    bool mandatory = 8;
    bool hide_from_customer = 9;
}

message CreateAddonRequest {
    string parent = 1[(validate.rules).string.min_len = 3];
    repeated string linked_ids = 2;
    Addon addon = 3 [(validate.rules).message.required = true];
}

message GetAddonRequest {
    string id = 1;
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message ListAddonRequest {
    string parent = 1[(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message ListAddonResponse {
    repeated Addon addon = 1;
}

message AddonItem {
    string title = 1;
    string description = 2[(validate.rules).string.max_len = 2000];
    google.protobuf.Duration duration = 3;
    saastack.types.Price price = 4;
    bool has_inventory = 5;
    string product_skew_id = 6;
    map<string, string> metadata = 7;
}

message DeleteAddonRequest {
    string id = 1[(validate.rules).string.min_len = 3];
}

message UpdateAddonRequest {
    Addon addon = 1[(validate.rules).message.required = true];
    repeated string linked_ids = 2;
    google.protobuf.FieldMask update_mask = 3 [(validate.rules).message.required = true];
}

message BatchGetAddonRequest {
    repeated string ids = 1[(validate.rules).repeated.min_items = 1];
    google.protobuf.FieldMask view_mask = 2 [(validate.rules).message.required = true];
}

message BatchGetAddonResponse {
    repeated Addon addon = 1;
}

message UpdateAddonLog {
    Addon old_addon = 1;
    Addon new_addon = 2;
    google.protobuf.FieldMask update_mask = 3;
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "Addons"
    rpc: "GetAddon"
    rpc: "ListAddon"
    rpc: "BatchGetAddon"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    service_name: "Addons"
    rpc: "GetAddon"
    rpc: "ListAddon"
    rpc: "BatchGetAddon"
    rpc: "CreateAddon"
    rpc: "UpdateAddon"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "Addons"
    pattern: "{parent}**/.*"
};

//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ValidateLink {
    rpc ValidateLink (ValidateLinkRequest) returns (google.protobuf.Empty);
}

message ValidateLinkRequest {
    option (graphql.skip) = true;
    repeated string linked_ids = 2 [(validate.rules).repeated.min_items = 1];
}

//////////////// ------------------------------------------------------------------------------------------------------/////////////////
service ParentService {
    rpc ValidateParent (ValidateParentRequest) returns (ValidateParentResponse);
}

message ValidateParentRequest {
    option (graphql.skip) = true;

    string id = 1;
}

message ValidateParentResponse {
    option (graphql.skip) = true;

    bool valid = 1;
}