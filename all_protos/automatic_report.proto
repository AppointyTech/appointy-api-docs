syntax = "proto3";

package appointy.report.v1;

option go_package = "./pb";

import "annotations/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";
import "validate/chaku.proto";
import "pehredaar/pehredaar.proto";
import "schema/schema.proto";
import "types/types.proto";

service AutomaticReports {

    // CreateAutomaticReport creates new automatic report.
    rpc CreateAutomaticReport (CreateAutomaticReportRequest) returns (AutomaticReport) {
        option (google.api.http) = {
            post: "/v1/automatic-reports"
            body: "*"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            mutation : "createAutomaticReport"
        };
    }

    // GetAutomaticReport returns the automatic report by its unique id.
    rpc GetAutomaticReport (GetAutomaticReportRequest) returns (AutomaticReport) {
        option (google.api.http) = {
            get: "/v1/automatic-reports/{id}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            query : "automaticReport"
        };
    }

    // DeleteAutomaticReport will delete the automatic report from the system by Id.
    // This will be a soft delete from the system
    rpc DeleteAutomaticReport (DeleteAutomaticReportRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/automatic-reports/{id}"
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            mutation : "deleteAutomaticReport"
        };
    }

    // UpdateAutomaticReport will update the automatic report identified by its automatic report id.
    // Update AutomaticReport uses Field Mask to update specific properties of automatic report object
    rpc UpdateAutomaticReport (UpdateAutomaticReportRequest) returns (AutomaticReport) {
        option (google.api.http) = {
            put: "/v1/automatic-reports/{automatic_report.id}"
            body: "*"
        };
        option (pehredaar.paths) = {
            resource: "automatic_report.id"
        };
        option (graphql.schema) = {
            mutation : "updateAutomaticReport"
        };
    }

    // ListAutomaticReport lists all the AutomaticReport(s)
    rpc ListAutomaticReport (ListAutomaticReportRequest) returns (ListAutomaticReportResponse) {
        option (google.api.http) = {
            get : "/v1/automatic-reports"
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "automaticReports"
        };
    }

    // Gets all the AutomaticReport(s) by their ids
    rpc BatchGetAutomaticReport (BatchGetAutomaticReportRequest) returns (BatchGetAutomaticReportResponse) {
        option (google.api.http) = {
            get: "/v1/automatic-reports:batchGet"
        };
        option (pehredaar.paths) = {
            resource: "ids"
        };
    }

    rpc ListAutomaticReportsForCron (ListAutomaticReportsForCronRequest) returns (ListAutomaticReportResponse) {
        option (graphql.schema) = {
            query : "automaticReportsForCron"
        };
    };
}

message AutomaticReport {

    option (chaku.root) = true;
    option (chaku.prefix) = "arp";

    string id = 1; // parent is business for which this report is automated (for UI fetch purposes)
    string title = 2;
    string description = 3;
    string report_type = 4;
    saastack.types.Interval interval = 5;
    repeated string email_lists = 6;
    bool enabled = 7;
    map<string, string> metadata = 8; // contains additional filters

    string business_filter = 9;
    saastack.types.Timeslot timeslot_filter = 10;

    google.protobuf.Timestamp last_sent_date = 11;
    google.protobuf.Timestamp next_sent_date = 12;

}

message CreateAutomaticReportRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    AutomaticReport automatic_report = 2 [(validate.rules).message.required = true];
}

message GetAutomaticReportRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
    google.protobuf.FieldMask view_mask = 2;
}

message DeleteAutomaticReportRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message UpdateAutomaticReportRequest {
    AutomaticReport automatic_report = 1 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 2;
}

message ListAutomaticReportRequest {
    string parent = 1 [(validate.rules).string.min_len = 1];
    google.protobuf.FieldMask view_mask = 2;
}

message ListAutomaticReportsForCronRequest {
    string parent = 1; // optional
}

message ListAutomaticReportResponse {
    repeated AutomaticReport automatic_report = 1;
}

message BatchGetAutomaticReportRequest {
    repeated string ids = 1;
    google.protobuf.FieldMask view_mask = 2;
}

message BatchGetAutomaticReportResponse {
    repeated AutomaticReport automatic_report = 1;
}
