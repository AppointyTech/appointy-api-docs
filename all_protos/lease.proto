syntax = "proto3";

package saastack.lease.v1;

import "types/types.proto";
import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";
import "google/protobuf/empty.proto";
import "validate/validate.proto";
import "validate/chaku.proto";

option go_package = "./pb";
option (chaku.idempotent_sql_query_file_path) = "queries/structure.sql";

service Leases {
  rpc ObtainLease (ObtainLeaseRequest) returns (Lease) {
  }

  rpc GetConflictingLeases (ObtainLeaseRequest) returns (GetConflictingLeasesResponse) {
  }

  rpc ReleaseConflictingLeases (ObtainLeaseRequest) returns (google.protobuf.Empty) {
  }

  rpc ReleaseLease (ReleaseLeaseRequest) returns (google.protobuf.Empty) {
  }

  rpc GetLease (GetLeaseRequest) returns (Lease) {
  }

  rpc BatchGetLease (BatchGetLeaseRequest) returns (LeaseList) {
  }

  rpc ListLease (ListLeaseRequest) returns (LeaseList) {}
}

message Resource {
  string id = 1;
  saastack.types.Timeslot time_slot = 2;
  int32 booking_capacity =4 ;
  int32 available_capacity = 3;
  //handle with conditional clause (Booking capacity ==0 ){Handle with only time (OLD code)}else{NEW IMPLEMENTATION}
}

message ObtainLeaseRequest {
  Lease lease = 1 [(validate.rules).message.required = true];
  string prefix = 2 [(validate.rules).string = {min_len: 1 max_len:10}];
  google.protobuf.Duration validity = 3 [(validate.rules).message.required = true];
}

message ReleaseLeaseRequest {
  string id = 1;
  repeated string ids = 2 [(validate.rules).repeated.items.string.min_len = 1];
}

message GetLeaseRequest {
  string id = 1;
}

message BatchGetLeaseRequest {
  repeated string ids = 1 [(validate.rules).repeated.items.string.min_len = 1];
}

message ListLeaseRequest {
  repeated string resources = 1;
  saastack.types.Timeslot time_slot = 2 [(validate.rules).message.required = true];
}

message Lease {
  // Id is the unique identifier for a ticket with the specified prefix
  string id = 1;

  // object which requires to obtain lease
  Details details = 3 [(validate.rules).message.required = true];
  // resources that used by the object
  repeated Resource resources = 4;
  // lease expiry time period
  // will be set in code
  google.protobuf.Timestamp expiry = 5; // what is the timeout of this, 5 to 15m. letting the modules to decide the timeout
}

message GetConflictingLeasesResponse{
  repeated Lease leases = 1;
}

message Details {
  repeated google.protobuf.Any objects = 1 [(validate.rules).repeated.min_items = 1];
}

message LeaseList {
  repeated Lease list = 1;
}