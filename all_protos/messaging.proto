syntax = "proto3";

import "schema/schema.proto";
import "eventspush/push.proto";
import "types/enums.proto";
import "crudgen/crudgen.proto";
import "validate/chaku.proto";
import "validate/validate.proto";
import "pehredaar/pehredaar.proto";
import "annotations/annotations.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";
import "google/protobuf/timestamp.proto";

package saastack.messaging.v1;

option go_package = "./pb";

/*
**Message:** As a company admin, I want to create a promotional message for specific users,
so that I can send them promotional notifications.

Message service will store the messages that needs to be send to the customer. Message is
made of 3 things
- Template_Id (Template that needs to be send)
- query_Id (User who will receive this message)
- delivery_setting (When to start and stop sending the message)

```proto
message Message {
    string id = 1; // parent will be company
    string template_id = 2;
    string query_id = 3;
    Channel channel = 4;
    DeliverySetting delivery_setting = 5;
    string title = 6;
    string description = 7;
    map<string, string> metadata = 8;
}

message DeliverySetting {
    DeliveryType type = 1;
    google.protobuf.date_time start_date = 2;
    string timezone = 3;
    string time = 4; // sending_time
    google.protobuf.date_time stop_date = 5;
    StopType stop_type = 6;
    LimitType limit_type = 7;
    int32 limit = 8;
    Frequency frequency = 9;
}

enum LimitType {
    UNKNOWN = 0;
    MAX = 1;
    NO_LIMIT = 2;
}

enum StopType {
    UNKNOWN = 0;
    NEVER = 1;
    SPECIFIC_DATE = 2;
}

enum DeliveryType {
    UNKNOWN = 0;
    ONCE = 1;
    RECURRING = 2;
    AS_CRITERIA_MATCH = 3;
}

enum Frequency {
    UNSET = 0;
    DAILY = 1;
    WEEKLY = 2;
    MONTHLY = 3;
}

```

Methods:
- Create
	- validation of template and query_id
- Update
	- validation of template and query_id
- Delete
- List
    - (parent + channel filter( channel is optional))
*/
message Message {
    option (chaku.root) = true;
    option (chaku.prefix) = 'mes';

    string id = 1;
    string title = 2 [(validate.rules).string.min_len = 1, (validate.rules).string.max_len = 30];
    string description = 3 [(validate.rules).string.max_len = 200];

    string query_id = 4 [(validate.rules).string.min_len = 1];
    string template_id = 5 [(validate.rules).string.min_len = 1];

    DeliverySetting delivery_setting = 6 [(validate.rules).message.required = true];
    saastack.types.ChannelType channel = 7 [(validate.rules).enum = {not_in: [0]}];

    map<string, string> metadata = 8;
}

message DeliverySetting {
    option (chaku.prefix) = 'dls';
    string id = 1 [(graphql.input_skip) = true];

    string timezone = 2;
    // sending_time only time (hours, minute and seconds) will be used
    google.protobuf.Timestamp sending_time = 3;
    google.protobuf.Timestamp start_date = 4;
    google.protobuf.Timestamp stop_date = 5;

    // When delivery type is recurring use Frequency
    // and when it is as criteria match use hourly
    DeliveryType delivery_type = 6;
    StopType stop_type = 7;
    LimitType limit_type = 8;
    int32 limit = 9;
    Frequency frequency = 10;
}

enum LimitType {
    NO_LIMIT = 0;
    MAX = 1;
}

enum StopType {
    NEVER = 0;
    SPECIFIC_DATE = 1;
}

enum DeliveryType {
    ONCE = 0;
    RECURRING = 1;
    AS_CRITERIA_MATCH = 2;
}

enum Frequency {
    UNSET = 0;
    DAILY = 1;
    WEEKLY = 2;
    MONTHLY = 3;
}

service MessagingService {
    // CreateMessage will create a message with the provided template and query towards a
    // channel in the company along with the message delivery setting
    rpc CreateMessage (CreateMessageRequest) returns (Message) {
        option (google.api.http) = {
            post : "/v1/messaging/message/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            mutation : "createMessage"
        };
    }

    // UpdateMessage will update a message's details e.g. title, template, query,
    // settings or channel
    rpc UpdateMessage (UpdateMessageRequest) returns (Message) {
        option (google.api.http) = {
            put : "/v1/messaging/message/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (crudgen.generator) = {
            skip: true
        };
        option (graphql.schema) = {
            mutation : "updateMessage"
        };
    }

    // DeleteMessage will deletes the message using id
    rpc DeleteMessage (DeleteMessageRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete : "/v1/messaging/message/{id=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "id"
        };
        option (graphql.schema) = {
            mutation : "deleteMessage"
        };
    }

    // ListMessage will list all the messages within the company (parent), using the
    // channel or template filters
    rpc ListMessage (ListMessageRequest) returns (ListMessageResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/message/{parent=**}"
        };
        option (eventspush.event) = {
            push: true
        };
        option (pehredaar.paths) = {
            resource: "parent"
        };
        option (graphql.schema) = {
            query : "messages"
        };
    }

}

message CreateMessageRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Message message = 2 [(validate.rules).message.required = true];
}

message UpdateMessageRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    Message message = 2 [(validate.rules).message.required = true];
    google.protobuf.FieldMask update_mask = 3 [(validate.rules).message.required = true];
}

message DeleteMessageRequest {
    string id = 1 [(validate.rules).string.min_len = 3];
}

message ListMessageRequest {
    string parent = 1 [(validate.rules).string.min_len = 3];
    // optional filters
    string template_id = 2;
    saastack.types.ChannelType channel = 3;
    google.protobuf.FieldMask view_mask = 4 [(validate.rules).message.required = true];
}

message ListMessageResponse {
    repeated Message message = 1;
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "MessagingService"
    rpc: "ListMessage"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Editor"
    display_name: "Editor"
    service_name: "MessagingService"
    rpc: "ListMessage"
    rpc: "UpdateMessage"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "MessagingService"
    rpc: "ListMessage"
    rpc: "CreateMessage"
    rpc: "UpdateMessage"
    rpc: "DeleteMessage"
};

/*
**Message Count Service**: As a company admin, I want to see the users count who have received
the particular message, so that I can check the statics of the a particular message.

This service will store the count (no. of users who have received this message)

```proto
message MessageCount {
    string id = 1; // parent will be company
    string message_id = 2;
    int64 user_count = 3;
    google.protobuf.Timestamp first_activity = 4;
    google.protobuf.Timestamp last_activity = 5;
}
```

Methods
- IncreaseMessageCount(message_id, user_count)
    - It will add the user_count with saved count if entry already exists else will create new entry.
- ListMessageCount(parent_id)
    - It will return all MessageCount saved against that parent.
*/
message MessageCount {
    option (chaku.root) = true;
    option (chaku.prefix) = 'msc';

    string id = 1 [(graphql.input_skip) = true];
    string message_id = 2 [(validate.rules).string.min_len = 3];
    int64 user_count = 3 [(validate.rules).int64.gt = 0];
    google.protobuf.Timestamp first_activity = 4;
    google.protobuf.Timestamp last_activity = 5;
}

service MessageCounter {
    // IncreaseMessageCount will increase the receivers count against the message
    rpc IncreaseMessageCount (MessageCount) returns (MessageCount) {
        //option (google.api.http) = {
        //    post : "/v1/messaging/counter/{message_id=**}"
        //};
        //option (eventspush.event) = {
        //    push: true
        //};
        option (crudgen.generator) = {
            skip: true
        };
        //option (pehredaar.paths) = {
        //    resource: "message_id"
        //};
        //option (graphql.schema) = {
        //    mutation : "increaseMessageCount"
        //};
    }

    // ListMessageCount will return message count statistic
    rpc ListMessageCount (ListMessageCountRequest) returns (ListMessageCountResponse) {
        option (google.api.http) = {
            get : "/v1/messaging/counter/list"
        };
        option (pehredaar.paths) = {
            resource: "parent"
            resource: "message_id"
        };
        option (graphql.schema) = {
            mutation : "messageCounts"
        };
    }
}

message ListMessageCountRequest {
    string parent = 1;
    string message_id = 2;
    google.protobuf.FieldMask view_mask = 3 [(validate.rules).message.required = true];
}

message ListMessageCountResponse {
    repeated MessageCount message_count = 1;
}

option (pehredaar.module_roles).module_role = {
    module_role_name: "Viewer"
    display_name: "Viewer"
    service_name: "MessageCounter"
    rpc: "ListMessageCount"
};

option (pehredaar.module_roles).module_role = {
    module_role_name: "Admin"
    display_name: "Admin"
    service_name: "MessageCounter"
    rpc: "ListMessageCount"
    rpc: "IncreaseMessageCount"
};
