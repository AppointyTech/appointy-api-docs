{
  "openapi": "3.0.0",
  "swagger": "2.0.0",
  "info": {
    "title": "Webhooks",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/checkSlugAvailability": {
      "get": {
        "operationId": "Slugs_CheckSlugAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckSlugAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "slugValue",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Slugs"
        ]
      }
    },
    "/v1/slugs/{sourceId}": {
      "get": {
        "summary": "GetSlug returns the slug by its unique id.",
        "operationId": "Slugs_GetSlug",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Slug"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Slugs"
        ]
      },
      "delete": {
        "summary": "DeleteSlug will delete the slug from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "Slugs_DeleteSlug",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Slugs"
        ]
      },
      "put": {
        "summary": "UpsertSlug will upsert the slug identified by its slug id.\nUpsert Slug uses Field Mask to upsert specific properties of slug object",
        "operationId": "Slugs_UpsertSlug",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Slug"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SlugsUpsertSlugBody"
            }
          }
        ],
        "tags": [
          "Slugs"
        ]
      }
    },
    "/v1/slugs:batchGet": {
      "get": {
        "summary": "Gets all the Slug(s) by their ids",
        "operationId": "Slugs_BatchGetSlug",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetSlugResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "sourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Slugs"
        ]
      }
    },
    "/v1/zip-codes": {
      "get": {
        "summary": "ListZipCode lists all the ZipCode(s)",
        "operationId": "ZipCodes_ListZipCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListZipCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent-->companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZipCodes"
        ]
      },
      "post": {
        "summary": "AddCodes will remove all the previous codes and add the new codes against the location",
        "operationId": "ZipCodes_AddZipCodes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddZipCodesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddZipCodesRequest"
            }
          }
        ],
        "tags": [
          "ZipCodes"
        ]
      }
    },
    "/v1/training/project": {
      "post": {
        "operationId": "Projects_CreateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateProjectRequest"
            }
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/v1/training/project/{id}": {
      "get": {
        "operationId": "Projects_GetProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      },
      "delete": {
        "operationId": "Projects_DeleteProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "name",
            "description": "For internal use",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/v1/training/project/{project.id}": {
      "put": {
        "operationId": "Projects_UpdateProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Project"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "project.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ProjectsUpdateProjectBody"
            }
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/v1/training/projects": {
      "get": {
        "operationId": "Projects_ListProject",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Projects"
        ]
      }
    },
    "/v1/training/task": {
      "post": {
        "operationId": "Tasks_CreateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTaskRequest"
            }
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/task/notification/{taskId}": {
      "patch": {
        "operationId": "Tasks_ChangeTaskNotificationSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TasksChangeTaskNotificationSettingBody"
            }
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/task/status/{taskId}": {
      "patch": {
        "operationId": "Tasks_ChangeTaskStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "taskId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TasksChangeTaskStatusBody"
            }
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/task/{id}": {
      "get": {
        "operationId": "Tasks_GetTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "staffId",
            "description": "StaffId is for the sole purpose of rights check",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      },
      "delete": {
        "operationId": "Tasks_DeleteTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "name",
            "description": "For internal use",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/task/{task.id}": {
      "put": {
        "operationId": "Tasks_UpdateTask",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Task"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "task.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TasksUpdateTaskBody"
            }
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/tasks": {
      "get": {
        "operationId": "Tasks_ListTasks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTasksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "staffId",
            "description": "StaffId, if provided will only returns tasks assigned to it",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.name",
            "description": "Name will match name pattern",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.status",
            "description": "Status will filter tasks based on status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Unspecified",
              "Incomplete",
              "Complete"
            ],
            "default": "Unspecified"
          },
          {
            "name": "filters.dueDateAfter",
            "description": "DueDateAfter will check DueDate > input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filters.dueDateBefore",
            "description": "DueDateBefore will check DueDate < input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "first",
            "description": "Pagination related fields",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "highPriorityFirst",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/training/tasks/report": {
      "get": {
        "operationId": "Tasks_TaskReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TaskReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "staffId",
            "description": "StaffId, if provided will only returns tasks assigned to it",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timezone",
            "description": "Timezone for which report is required (default is UTC)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Tasks"
        ]
      }
    },
    "/v1/rights/{userId}": {
      "get": {
        "summary": "GetRights can be used to get rights of a specific user.",
        "operationId": "Rights_GetRight",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserRight"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Rights"
        ]
      }
    },
    "/v1/intake-forms": {
      "get": {
        "operationId": "IntakeForms_ListIntakeForms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIntakeFormsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "version",
            "description": "Optional",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "includeParentChildren",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.isActive",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.assignedServices",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "Active",
              "Name"
            ],
            "default": "CreatedOn"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      },
      "delete": {
        "operationId": "IntakeForms_DeleteIntakeForms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteIntakeFormsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "formId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forceDelete",
            "description": "force_delete will also delete all the submissions made under this form",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      },
      "post": {
        "operationId": "IntakeForms_CreateIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeForm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateIntakeFormRequest"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/batch": {
      "get": {
        "operationId": "IntakeForms_BatchGetIntakeForms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIntakeFormsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deletedAlso",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      },
      "delete": {
        "operationId": "IntakeForms_BatchDeleteIntakeForms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "formIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/bulk-copy": {
      "post": {
        "operationId": "IntakeForms_BulkCopyIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkCopyIntakeFormResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkCopyIntakeFormRequest"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/bulk-linking": {
      "post": {
        "operationId": "IntakeForms_BulkAddIntakeFormServiceLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeFormLinkingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkAddIntakeFormServiceLinksRequest"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/bulk-status/{formIds}": {
      "put": {
        "operationId": "IntakeForms_BulkUpdateIntakeFormStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkUpdateIntakeFormStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "formIds",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1,
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntakeFormsBulkUpdateIntakeFormStatusBody"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/copy": {
      "post": {
        "operationId": "IntakeForms_CopyIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CopyIntakeFormResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CopyIntakeFormRequest"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/linking": {
      "get": {
        "operationId": "IntakeForms_LinksOfIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeFormLinkingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "formId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      },
      "post": {
        "operationId": "IntakeForms_UpsertIntakeFormLinking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeFormLinkingList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertIntakeFormLinkingRequest"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/linking/type": {
      "get": {
        "operationId": "IntakeForms_ListIntakeFormsOf",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIntakeFormsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "typeId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/{form.id}": {
      "put": {
        "operationId": "IntakeForms_UpdateIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeForm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "form.id",
            "description": "parent will be id of entity for which form is required",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/IntakeFormsUpdateIntakeFormBody"
            }
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/intake-forms/{id}": {
      "get": {
        "operationId": "IntakeForms_GetIntakeForm",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntakeForm"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "[^/]+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "IntakeForms"
        ]
      }
    },
    "/v1/order/validate/discount/{buyerId}": {
      "post": {
        "summary": "Validate public & automatically applicable discounts corresponding to cart",
        "operationId": "Orders_OrderValidatePublicDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerId",
            "description": "buyer_id unique id of customer who will be consuming this discount",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrdersOrderValidatePublicDiscountBody"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/additional/amount": {
      "delete": {
        "operationId": "Orders_RemoveAdditionalAmount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      },
      "patch": {
        "operationId": "Orders_UpsertAdditionalAmount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertAdditionalAmountRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/additional/discount": {
      "delete": {
        "operationId": "Orders_RemoveAdditionalDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      },
      "patch": {
        "operationId": "Orders_OfferAdditionalDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OfferAdditionalDiscountRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/apply/discount/{customerId}": {
      "put": {
        "summary": "apply/override discount on order",
        "operationId": "Orders_ApplyDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrdersApplyDiscountBody"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/cancel": {
      "patch": {
        "operationId": "Orders_CancelOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CancelOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/create-without-cart": {
      "post": {
        "operationId": "Orders_CreateOrderWithoutCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrderWithoutCartRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/due-amount": {
      "get": {
        "operationId": "Orders_GetDueAmount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDueAmountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "description": "customer-id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/import": {
      "post": {
        "summary": "import order containing specified items",
        "operationId": "Orders_ImportOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ImportOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/import:batch": {
      "post": {
        "summary": "import order containing specified items in batch (flock endpoint)",
        "operationId": "Orders_BatchImportOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchImportOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchImportOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/item/payment-info:batch": {
      "get": {
        "operationId": "Orders_BatchGetOrderItemsPaymentInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetOrderItemsPaymentInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderItemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/item/{itemId}": {
      "get": {
        "summary": "list orders containing item identified using item-identifier",
        "operationId": "Orders_GetOrdersByItemId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrdersByItemIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/items:batch": {
      "get": {
        "operationId": "Orders_BatchGetOrderItemsUsingOrderItemId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetOrderItemsUsingOrderItemIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderItemIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/payment-info": {
      "get": {
        "operationId": "Orders_GetOrderPaymentInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOrderPaymentInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/place": {
      "post": {
        "summary": "creates an Order containing specified items",
        "operationId": "Orders_CreateOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOrderRequest"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/remove/discount/{customerId}": {
      "put": {
        "operationId": "Orders_RemoveDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OrdersRemoveDiscountBody"
            }
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/reports/grouped-discount": {
      "get": {
        "operationId": "Orders_GetGroupedDiscountOrderReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedDiscountOrderReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlyDiscounted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3784",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/unpaid:list": {
      "get": {
        "operationId": "Orders_ListUnpaidOrderItemsOfBuyer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUnpaidOrderItemsOfBuyerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderItemId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders/{id}": {
      "get": {
        "summary": "retrieve order by order-identifier",
        "operationId": "Orders_GetOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Order"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "buyerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/orders:list": {
      "get": {
        "summary": "list orders belonging to buyer or location/business",
        "operationId": "Orders_ListOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderPaymentStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "OrderPaymentStatus_UNSPECIFIED",
              "UNPAID",
              "PAID",
              "PARTIALLY_PAID",
              "REFUND",
              "FAILED",
              "PARTIALLY_REFUND"
            ],
            "default": "OrderPaymentStatus_UNSPECIFIED"
          },
          {
            "name": "orderStatus",
            "description": " - PLACED: Placed/Leased indicates that the order has been placed and is yet to be processed.\n - CONFIRMED: Confirmed indicates that the order has been confirmed.\n - DROPPED: Dropped indicates that the order has been placed and dropped before it was confirmed.\n - CANCELLED: Cancelled indicates that the order has been confirmed and has been cancelled.",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "PLACED",
              "CONFIRMED",
              "DROPPED",
              "CANCELLED",
              "ORDER_FAILED"
            ],
            "default": "UNSPECIFIED"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "description": "filters",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "orderIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "buyerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerFirstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerLastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerPhoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerFirstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerLastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerPhoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "paymentMethods",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNSPECIFIED_PAYMENT_METHOD",
                "CASH",
                "STRIPE_CARD",
                "SQUARE_CARD",
                "PACKAGE",
                "GIFT_CERTIFICATE",
                "MEMBERSHIP",
                "DISCOUNT_CODE",
                "CREDIT_CARD",
                "ECHECK",
                "DEBIT_CARD",
                "CREDIT_CARD_AND_CASH",
                "GIFT_CERTIFICATE_OFFLINE",
                "GIFT_CERTIFICATE_AND_CASH",
                "INSURANCE",
                "CHEQUE",
                "RADIUS",
                "RAZORPAY_ACCOUNT",
                "PAYPAL_ACCOUNT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "lowerAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "lowerAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lowerAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "upperAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "upperAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "upperAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "orderByDate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "orderByPrice",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortByOrderAscending",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/reports/grouped-sales": {
      "get": {
        "operationId": "Orders_GetGroupedSalesReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedSalesReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3784",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/reports/sales": {
      "get": {
        "operationId": "Orders_GetSalesReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSalesReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "itemTypeFilters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "APPOINTMENT_ITEM",
                "CLASS_ITEM",
                "PACKAGE_ITEM",
                "GIFT_CERTIFICATE_ITEM",
                "MEMBERSHIP_ITEM",
                "TOP_UP_ITEM"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter1Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter2Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter3Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "discountCodes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3784",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/reports/{parent}/grouped-sales": {
      "get": {
        "operationId": "Orders_GetGroupedCompanySalesReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedCompanySalesReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3784",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/reports/{parent}/sales": {
      "get": {
        "operationId": "Orders_GetCompanySalesReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanySalesReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "itemTypeFilters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "APPOINTMENT_ITEM",
                "CLASS_ITEM",
                "PACKAGE_ITEM",
                "GIFT_CERTIFICATE_ITEM",
                "MEMBERSHIP_ITEM",
                "TOP_UP_ITEM"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter1Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter2Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter3Ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "discountCodes",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3784",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Orders"
        ]
      }
    },
    "/v1/employees/count/{parent}": {
      "get": {
        "operationId": "StaffProfiles_GetEmployeesCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmployeesCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "provideServices",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "visibility",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PUBLIC",
              "PRIVATE",
              "PRIVATE_WITH_LINK"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "disabledLogin",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/employees/reports/details/{parent}": {
      "get": {
        "operationId": "StaffProfiles_GetCompanyStaffReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanyStaffReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.useActiveFilter",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.employeeDesignation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.employeeDepartment",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CompanyStaffReportSortBy_UNDEFINED",
              "CompanyStaffReportSortBy_EmployeeName",
              "CompanyStaffReportSortBy_EmployeeEmail"
            ],
            "default": "CompanyStaffReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/employees/services": {
      "get": {
        "operationId": "StaffProfiles_ListEmployeesPerformingService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeesPerformingServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ServicesEmployeeSortBy_CreatedOn",
              "ServicesEmployeeSortBy_LastName",
              "ServicesEmployeeSortBy_FirstName",
              "ServicesEmployeeSortBy_Email",
              "ServicesEmployeesSortBy_FullName"
            ],
            "default": "ServicesEmployeeSortBy_CreatedOn"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/employees/services/not": {
      "get": {
        "operationId": "StaffProfiles_ListEmployeesNotPerformingService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeesPerformingServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ServicesEmployeeSortBy_CreatedOn",
              "ServicesEmployeeSortBy_LastName",
              "ServicesEmployeeSortBy_FirstName",
              "ServicesEmployeeSortBy_Email",
              "ServicesEmployeesSortBy_FullName"
            ],
            "default": "ServicesEmployeeSortBy_CreatedOn"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/employees/with-services": {
      "get": {
        "operationId": "StaffProfiles_ListEmployeesWithServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeesWithServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.phoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.designation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.department",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.hasExtendedProfiles",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.changedSetting",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.disabledLogin",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ServicesEmployeeSortBy_CreatedOn",
              "ServicesEmployeeSortBy_LastName",
              "ServicesEmployeeSortBy_FirstName",
              "ServicesEmployeeSortBy_Email",
              "ServicesEmployeesSortBy_FullName"
            ],
            "default": "ServicesEmployeeSortBy_CreatedOn"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles": {
      "get": {
        "summary": "ListStaffProfile lists all the StaffProfile(s)",
        "operationId": "StaffProfiles_ListStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStaffProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.visibility",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PUBLIC",
              "PRIVATE",
              "PRIVATE_WITH_LINK"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "filters.profileType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SERVICE_PROVIDER",
              "OTHER"
            ],
            "default": "SERVICE_PROVIDER"
          },
          {
            "name": "filters.provideServices",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      },
      "post": {
        "summary": "CreateStaffProfile creates new staff profile.",
        "operationId": "StaffProfiles_CreateStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StaffProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStaffProfileRequest"
            }
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/batch": {
      "post": {
        "summary": "BatchCreateStaffProfile creates new staff profiles.",
        "operationId": "StaffProfiles_BatchCreateStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateStaffProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateStaffProfileRequest"
            }
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/employees": {
      "get": {
        "summary": "ListStaffProfile lists all the StaffProfile(s)",
        "operationId": "StaffProfiles_ListStaffProfileOfEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStaffProfileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "SERVICE_PROVIDER",
              "OTHER"
            ],
            "default": "SERVICE_PROVIDER"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/regenerate": {
      "post": {
        "operationId": "StaffProfiles_RegenerateStaffLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RegenerateStaffLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "staffId",
            "description": "staff profile Id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/{id}": {
      "get": {
        "summary": "GetStaffProfile returns the staff profile by its unique id.",
        "operationId": "StaffProfiles_GetStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StaffProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      },
      "delete": {
        "summary": "DeleteStaffProfile will delete the staff profile from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "StaffProfiles_DeleteStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/{parent}": {
      "put": {
        "operationId": "StaffProfiles_BatchUpdateStaffProfiles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StaffProfilesBatchUpdateStaffProfilesBody"
            }
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/staff-profiles/{staffProfile.id}": {
      "put": {
        "summary": "UpdateStaffProfile will update the staff profile identified by its staff profile id.\nUpdate StaffProfile uses Field Mask to update specific properties of staff profile object",
        "operationId": "StaffProfiles_UpdateStaffProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StaffProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "staffProfile.id",
            "description": "parent: employee-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StaffProfilesUpdateStaffProfileBody"
            }
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/updateProfileImage": {
      "post": {
        "operationId": "StaffProfiles_UpdateProfileImage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileImageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateProfileImageRequest"
            }
          }
        ],
        "tags": [
          "StaffProfiles"
        ]
      }
    },
    "/v1/credits/master": {
      "get": {
        "summary": "ListCredits returns all the credit under the given parent",
        "operationId": "Credits_ListCreditMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCreditMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "channel",
            "description": "channel type (sms/email)",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Credits"
        ]
      }
    },
    "/v1/credits:report": {
      "get": {
        "operationId": "Credits_ListCreditReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCreditReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "interval.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "interval.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Credits"
        ]
      }
    },
    "/v1/appointy-user-calendar-filter-group": {
      "get": {
        "operationId": "AppointyUserCalendarFilterGroups_ListCalendarFilterGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCalendarFilterGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointyUserCalendarFilterGroups"
        ]
      },
      "delete": {
        "operationId": "AppointyUserCalendarFilterGroups_DeleteCalendarFilterGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteCalendarFilterGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointyUserCalendarFilterGroups"
        ]
      },
      "put": {
        "operationId": "AppointyUserCalendarFilterGroups_UpsertCalendarFilterGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertCalendarFilterGroupResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertCalendarFilterGroupRequest"
            }
          }
        ],
        "tags": [
          "AppointyUserCalendarFilterGroups"
        ]
      }
    },
    "/v1/appointy-user-settings": {
      "put": {
        "operationId": "AppointyUserSettings_UpsertAppointyUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointyUserSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertAppointyUserSettingsRequest"
            }
          }
        ],
        "tags": [
          "AppointyUserSettings"
        ]
      }
    },
    "/v1/appointy-user-settings/{userId}": {
      "get": {
        "operationId": "AppointyUserSettings_GetAppointyUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointyUserSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointyUserSettings"
        ]
      }
    },
    "/v1/email-verification/blacklisted-domain/{domain}": {
      "delete": {
        "summary": "DeleteBlacklistedDomain will delete the blacklisted domain from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "EmailVerification_DeleteBlacklistedDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "domain",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "EmailVerification"
        ]
      }
    },
    "/v1/email-verification/blacklisted-domains": {
      "get": {
        "summary": "ListBlacklistedDomain lists all the BlacklistedDomain(s)",
        "operationId": "EmailVerification_ListBlacklistedDomain",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBlacklistedDomainResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "domain",
            "description": "domain is for searching purpose",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmailVerification"
        ]
      }
    },
    "/v1/email-verification/verify-email/{email}": {
      "get": {
        "summary": "VerifyEmailAuthenticity will take email as input and first check in the blacklisted-domains database and if it\ndoes not exist then it will verify the authenticity of the email\nif it is disposable then add the domain to blacklisted db.",
        "operationId": "EmailVerification_VerifyEmailAuthenticity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VerifyEmailAuthenticityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "checkIpQualityScore",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "EmailVerification"
        ]
      }
    },
    "/v1/sitback-appointment:list": {
      "get": {
        "operationId": "SitbackAppointments_ListSitbackAppointmentData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSitbackAppointmentDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "SitbackAppointments"
        ]
      }
    },
    "/v1/dynamic-links/appointment": {
      "post": {
        "operationId": "DynamicLinks_CreateDynamicLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLinkAppointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDynamicLinkAppointmentRequest"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/resource/{resourceId}": {
      "get": {
        "summary": "List By Resource Id",
        "operationId": "DynamicLinks_ListDynamicLinkByResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicLinkByResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/user/{userId}": {
      "get": {
        "summary": "List By User Id or parent",
        "operationId": "DynamicLinks_ListDynamicLinkByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicLinkByResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/{guid}": {
      "get": {
        "summary": "GetDynamicLink returns the dynamic link by its unique id.",
        "operationId": "DynamicLinks_GetDynamicLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AvailableDynamicLinkSlots"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/{id}": {
      "delete": {
        "summary": "Delete By Id",
        "operationId": "DynamicLinks_DeleteDynamicLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/{dynamicLinkAppointment.id}": {
      "put": {
        "summary": "Update Single Use Link",
        "operationId": "DynamicLinks_UpdateSingleUseLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLinkAppointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dynamicLinkAppointment.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DynamicLinksUpdateSingleUseLinkAppointmentBody"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/appointment": {
      "post": {
        "summary": "Client request to add a appointment\nAccepts CreateAppointmentRequest which contains parent information and\nappointment and returns newly added Appointment if all the\nvalidations are passed. Refer to CreateAppointmentRequest &\nAppointment message to know what validations are applied",
        "operationId": "Appointments_CreateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/add/consumers/recurring/{recurringId}": {
      "patch": {
        "operationId": "Appointments_AddConsumersToRecurringAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddConsumersToRecurringAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "recurringId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsAddConsumersToRecurringAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/add/consumers/{appId}": {
      "patch": {
        "operationId": "Appointments_AddConsumers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsAddConsumersBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/appointmentsOfAnOrder/{orderId}": {
      "patch": {
        "operationId": "Appointments_ListAppointmentsOfOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentsOfOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsListAppointmentsOfOrderBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancel": {
      "patch": {
        "operationId": "Appointments_BatchCancelAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCancelAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCancelAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancel/consumer/{appointmentId}": {
      "patch": {
        "operationId": "Appointments_BatchCancelConsumers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCancelConsumersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsBatchCancelConsumersBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancellation/policy": {
      "get": {
        "operationId": "Appointments_AppointmentsCancellationPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/delete": {
      "delete": {
        "operationId": "Appointments_BatchDeleteAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/update": {
      "put": {
        "operationId": "Appointments_BatchUpdateAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar": {
      "get": {
        "summary": "ListAppointmentsForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_ListAppointmentsForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentsForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "perDayLimit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderNotImportant",
            "description": "OrderNotImportant: Order of appointments in the list is not important.\nIf is false, the list will be in ascending order by appointment start time.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetchOtherParentBlockingAppointments",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar-events": {
      "get": {
        "summary": "ListAppointmentEventsForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_ListAppointmentEventsForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentEventsForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "perDayLimit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderNotImportant",
            "description": "OrderNotImportant: Order of appointments in the list is not important.\nIf is false, the list will be in ascending order by appointment start time.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetchOtherParentBlockingAppointments",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar/search": {
      "get": {
        "summary": "AppointmentSearchForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_AppointmentSearchForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentSearchForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "full location id should be passed here",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "serviceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerName",
            "description": "student name should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "Guardian name should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "free text search on above list of fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "description": "student email should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancel/ported/{dataCodeId}": {
      "patch": {
        "operationId": "Appointments_CancelPortedAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelPortedAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancel/{dataCodeId}": {
      "patch": {
        "operationId": "Appointments_CancelAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAppointmentByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancelAllFutureAppointments/{consumerId}": {
      "patch": {
        "operationId": "Appointments_CancelAllFutureAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAllFutureAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAllFutureAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancelAppointment/{id}": {
      "patch": {
        "operationId": "Appointments_CancelAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancellation/policy": {
      "get": {
        "operationId": "Appointments_AppointmentCancellationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeConsumerStatus/{appId}": {
      "patch": {
        "operationId": "Appointments_ChangeConsumerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeConsumerStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeStatus/{dataCode}": {
      "patch": {
        "operationId": "Appointments_ChangeAppointmentStatusByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeAppointmentStatusByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeAppointmentStatusByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeStatus/{id}": {
      "patch": {
        "operationId": "Appointments_ChangeAppointmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeAppointmentStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeAppointmentStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/check-availability": {
      "post": {
        "operationId": "Appointments_BatchCheckAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCheckAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCheckAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumer-rsvp": {
      "patch": {
        "summary": "The admin will not be able to change the RSVP status of the consumer\nhttps://appointy.atlassian.net/browse/AXN-1314?focusedCommentId=17114",
        "operationId": "Appointments_UpdateConsumerRSVP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateConsumerRSVPRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumer/data_code/{dataCode}": {
      "patch": {
        "operationId": "Appointments_UpdateConsumerRSVPByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateConsumerRSVPByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateConsumerRSVPByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumers/quantity/{appointmentId}": {
      "put": {
        "operationId": "Appointments_UpdateConsumersQuantity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateConsumersQuantityBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count": {
      "get": {
        "operationId": "Appointments_GetAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count/consumer": {
      "get": {
        "operationId": "Appointments_ConsumerAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilters.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count/consumer:batch": {
      "get": {
        "operationId": "Appointments_BatchConsumerAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchConsumerAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/custom-statuses": {
      "get": {
        "operationId": "Appointments_ListAppointmentCustomStatuses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentCustomStatusesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fetchBelowLevel",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "post": {
        "operationId": "Appointments_CreateAppointmentCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentCustomStatusRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/custom-statuses/{customStatus.id}": {
      "put": {
        "operationId": "Appointments_UpdateAppointmentCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatus.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentCustomStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/data_code/ported/{dataCodeId}": {
      "put": {
        "operationId": "Appointments_UpdatePortedAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdatePortedAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/data_code/{dataCodeId}": {
      "put": {
        "operationId": "Appointments_UpdateAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAppointmentByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/delete/{id}": {
      "delete": {
        "summary": "DeleteAppointment deletes the appointment from the system using its unique ID.",
        "operationId": "Appointments_DeleteAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "description": "for sole purpose of rights check",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.id",
            "description": "Id of the appointment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.timeSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.timeSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.service.id",
            "description": "id can be empty as it can be dynamically booked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.title",
            "description": "Title of the service in various locales.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.capacity",
            "description": "Capacity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.preBufferTime",
            "description": "Pre appointment buffer time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.postBufferTime",
            "description": "Post appointment buffer time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.isDynamic",
            "description": "in case of  link sharing  , we have to create dynamic service",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.service.lastId",
            "description": "in case of update: the last service id will contain old service id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.templateId",
            "description": "service template id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.dynamicLinkId",
            "description": "dynamic link id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.channel.id",
            "description": "Id of the channel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.channel.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.id",
            "description": "Id of the employee. (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.firstName",
            "description": "FirstName of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.lastName",
            "description": "LastName of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.email",
            "description": "Email of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.profileId",
            "description": "profile id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.lastId",
            "description": "in case of update: the last employee id will contain old employee id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.name",
            "description": "only for readonly purpose: name = first_name + \" \" + last_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.smsReminderSent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.employee.emailReminderSent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.employee.smsRemindOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.employee.emailRemindOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.employee.reviewMailStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DoNotSendMail",
              "ReviewMailScheduled",
              "ReviewMailSent"
            ],
            "default": "DoNotSendMail"
          },
          {
            "name": "originalAppointment.quantity",
            "description": "total no. of consumers in the appointment\n\ntotal consumers",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.bookingId",
            "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.recurringId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "originalAppointment.paymentStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_PAYMENT_UNKNOWN",
              "APPOINTMENT_PAYMENT_FAILED",
              "APPOINTMENT_PAYMENT_PAID",
              "APPOINTMENT_PAYMENT_UNPAID",
              "APPOINTMENT_PAYMENT_REFUND",
              "APPOINTMENT_PAYMENT_PARTIAL"
            ],
            "default": "APPOINTMENT_PAYMENT_UNKNOWN"
          },
          {
            "name": "originalAppointment.createdBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.createdOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.updatedBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.updatedOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.rescheduleAllowedTill",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.cancellationAllowedTill",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.totalPrice.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "originalAppointment.totalPrice.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalPrice.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "originalAppointment.discountCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "originalAppointment.meetingData.integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "originalAppointment.meetingData.externalMeetingId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.pin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.joinUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.iconUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.isBookedByAdmin",
            "description": "is_booked_by_admin true if booked by admin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.reason",
            "description": "reason for update or cancel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.submissionData",
            "description": "form submission data, this is read only value, and is not stored in db",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "originalAppointment.isIntakeFormSubmitted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.hasNotes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.everRescheduled",
            "description": "true on update in time",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastRescheduledBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.lastRescheduledOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.isLastRescheduledByAdmin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastStatusUpdatedBy",
            "description": "Last Status Change fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.lastStatusUpdatedOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.isLastStatusUpdatedByAdmin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.recurrenceSet",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "originalAppointment.inviteeCanModify",
            "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.inviteeCanManageOtherInvitees",
            "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.viewGuestList",
            "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastRecurringAppointment",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/deserialize": {
      "post": {
        "operationId": "Appointments_DeserializeAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentResponse"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/group-check-availability": {
      "post": {
        "summary": "GroupBatchCheckAvailability check the availability for the group of appointments",
        "operationId": "Appointments_GroupBatchCheckAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GroupBatchCheckAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupBatchCheckAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/invite/add/remove": {
      "post": {
        "summary": "AddOrRemoveMeetingInvitees will add or remove new invitee employees or customers in the meeting. And only host\nor according to the host set permissions or Meeting Manager can add new invitees.",
        "operationId": "Appointments_AddOrRemoveMeetingInvitees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrRemoveMeetingInviteesRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/permissions": {
      "patch": {
        "summary": "UpdateMeetingPermissions will update the additional meeting permissions to modify or allow invite of the booking\nAnd only the host employee of the booking can update this permissions or anyone with MeetingsManager module role\nhttps://appointy.atlassian.net/browse/AXN-1320",
        "operationId": "Appointments_UpdateMeetingPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMeetingPermissionsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/search": {
      "get": {
        "summary": "SearchMeetingInvitees will search employees and customers within the company.\nhttps://appointy.atlassian.net/browse/AXN-1317",
        "operationId": "Appointments_SearchMeetingInvitees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchMeetingInviteesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/month/view": {
      "get": {
        "operationId": "Appointments_AppointmentsMonthView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentsMonthViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "StaffView",
              "ServiceView",
              "ResourceView",
              "LocationView"
            ],
            "default": "StaffView"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/notes": {
      "get": {
        "operationId": "Appointments_ListAppointmentNotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentNotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getPrivate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allStaff",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "ANY"
            ],
            "default": "PUBLIC"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "post": {
        "operationId": "Appointments_CreateAppointmentNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentNote"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentNoteRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "put": {
        "operationId": "Appointments_UpdateAppointmentNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentNote"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAppointmentNoteRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/ported/generate/code": {
      "post": {
        "operationId": "Appointments_GenerateDataCodeForPortedAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateDataCodeForPortedAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateDataCodeForPortedAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/ported/{code}": {
      "get": {
        "operationId": "Appointments_GetPortedAppointmentsByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPortedAppointmentsByCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/cancel/{parent}": {
      "patch": {
        "operationId": "Appointments_CancelRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/changeStatus/{id}": {
      "patch": {
        "operationId": "Appointments_ChangeRecurringAppointmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeRecurringAppointmentStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeRecurringAppointmentStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/delete/{parent}": {
      "patch": {
        "operationId": "Appointments_DeleteRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsDeleteRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/{parent}": {
      "put": {
        "operationId": "Appointments_UpdateRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/related": {
      "post": {
        "operationId": "Appointments_DeleteRelatedAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRelatedAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteRelatedAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/details": {
      "get": {
        "operationId": "Appointments_GetAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "consumerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerTag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "guardian_name filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "description": "guardian_email filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accessContact",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "paymentMethod",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_PAYMENT_METHOD",
              "CASH",
              "STRIPE_CARD",
              "SQUARE_CARD",
              "PACKAGE",
              "GIFT_CERTIFICATE",
              "MEMBERSHIP",
              "DISCOUNT_CODE",
              "CREDIT_CARD",
              "ECHECK",
              "DEBIT_CARD",
              "CREDIT_CARD_AND_CASH",
              "GIFT_CERTIFICATE_OFFLINE",
              "GIFT_CERTIFICATE_AND_CASH",
              "INSURANCE",
              "CHEQUE",
              "RADIUS",
              "RAZORPAY_ACCOUNT",
              "PAYPAL_ACCOUNT"
            ],
            "default": "UNSPECIFIED_PAYMENT_METHOD"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AppointmentReportSortBy_UNDEFINED",
              "AppointmentReportSortBy_StartTime",
              "AppointmentReportSortBy_EndTime",
              "AppointmentReportSortBy_BookingTime",
              "AppointmentReportSortBy_LastRescheduledTime",
              "AppointmentReportSortBy_ServiceTitle",
              "AppointmentReportSortBy_EmployeeName",
              "AppointmentReportSortBy_EmployeeEmail",
              "AppointmentReportSortBy_CustomerName",
              "AppointmentReportSortBy_CustomerEmail"
            ],
            "default": "AppointmentReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.vehicleRegistrationNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/grouped": {
      "get": {
        "operationId": "Appointments_GetGroupedAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByEmployee",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByService",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByResource",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByResourceType",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "consumerQuery",
            "description": "https://appointy.atlassian.net/browse/AXN-3784\n\nSearch query for consumers' name/email both/any",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/grouped/{parent}": {
      "get": {
        "operationId": "Appointments_GetCompanyGroupedAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanyGroupedAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "consumerQuery",
            "description": "https://appointy.atlassian.net/browse/AXN-3784\n\nSearch query for consumers' name/email both/any",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/reports/details/{parent}": {
      "get": {
        "operationId": "Appointments_GetCompanyAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanyAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "consumerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerTag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "guardian_name filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "description": "guardian_email filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accessContact",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "paymentMethod",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_PAYMENT_METHOD",
              "CASH",
              "STRIPE_CARD",
              "SQUARE_CARD",
              "PACKAGE",
              "GIFT_CERTIFICATE",
              "MEMBERSHIP",
              "DISCOUNT_CODE",
              "CREDIT_CARD",
              "ECHECK",
              "DEBIT_CARD",
              "CREDIT_CARD_AND_CASH",
              "GIFT_CERTIFICATE_OFFLINE",
              "GIFT_CERTIFICATE_AND_CASH",
              "INSURANCE",
              "CHEQUE",
              "RADIUS",
              "RAZORPAY_ACCOUNT",
              "PAYPAL_ACCOUNT"
            ],
            "default": "UNSPECIFIED_PAYMENT_METHOD"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AppointmentReportSortBy_UNDEFINED",
              "AppointmentReportSortBy_StartTime",
              "AppointmentReportSortBy_EndTime",
              "AppointmentReportSortBy_BookingTime",
              "AppointmentReportSortBy_LastRescheduledTime",
              "AppointmentReportSortBy_ServiceTitle",
              "AppointmentReportSortBy_EmployeeName",
              "AppointmentReportSortBy_EmployeeEmail",
              "AppointmentReportSortBy_CustomerName",
              "AppointmentReportSortBy_CustomerEmail"
            ],
            "default": "AppointmentReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.vehicleRegistrationNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/reports/group/{parent}": {
      "get": {
        "operationId": "Appointments_GetGroupLevelAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupLevelAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateFilter.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateFilter.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/serialize": {
      "post": {
        "operationId": "Appointments_SerializeAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{appointment.id}": {
      "put": {
        "summary": "Client request to update a appointment\nAccepts UpdateAppointmentRequest which is a Appointment and returns\nupdated appointment if all the validations are passed\nUpdate will only update update only fields like:\n time_slot, resources, service, channel, employee",
        "operationId": "Appointments_UpdateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointment.id",
            "description": "Id of the appointment.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{code}": {
      "get": {
        "operationId": "Appointments_GetAppointmentByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{id}": {
      "get": {
        "summary": "GetAppointment returns a appointment based on its unique ID.\nID should be one that was retrieved by one of the list methods.",
        "operationId": "Appointments_GetAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of the appointment. (required)",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask is used to partially return data. For example,\n[ \"id\", \"service.title\" ] will return id and service title ignoring all other fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "description": "customer id is for the sole purpose of rights check",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment:batchCreate": {
      "post": {
        "operationId": "Appointments_BatchCreateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment:list": {
      "get": {
        "summary": "ListAppointments returns all the appointments of the specified\nparent or specified employee or consumer",
        "operationId": "Appointments_ListAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is fully qualified string containing hierarchical information",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeslot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeslot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "getMarketingStatus",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employeeId",
            "description": "EmployeeId is the id of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerId",
            "description": "ConsumerId is the id of the consumer.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Query can be used for search appointments using\n Employee's or Consumer's Name or Email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customerId",
            "description": "customer id for rights check",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "StartTime",
              "CreatedOn"
            ],
            "default": "StartTime"
          },
          {
            "name": "otherFilters.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "otherFilters.consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "otherFilters.consumerName",
            "description": "search queries",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.query",
            "description": "on all above, search queries with 'or' condition",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointments": {
      "get": {
        "operationId": "Appointments_BatchGetAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/admin-availability": {
      "post": {
        "operationId": "Availability_ListAdminSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability": {
      "post": {
        "summary": "ListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dates": {
      "post": {
        "summary": "ListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dynamic": {
      "post": {
        "operationId": "Availability_ListDynamicSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved-services-employees": {
      "post": {
        "operationId": "Availability_ImprovedListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved/dates": {
      "post": {
        "summary": "ImprovedListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ImprovedListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/services-employees": {
      "post": {
        "summary": "ListServicesOrEmployees returns the list of services or employees available based on the filter criteria",
        "operationId": "Availability_ListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/improved/availability": {
      "post": {
        "summary": "ImprovedListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ImprovedListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/open-hour-slots/tracker/report": {
      "get": {
        "operationId": "OpenHours_GetOpenHourSlotsTrackerReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOpenHourSlotsTrackerReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "location level only",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/availability": {
      "post": {
        "summary": "to check future availability of open hours for services or staffs",
        "operationId": "OpenHours_CheckOpenHourAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckOpenHourAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckOpenHourAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/delete": {
      "post": {
        "operationId": "OpenHours_DeleteOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteOpenHourRulesRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/delete-and-create": {
      "post": {
        "operationId": "OpenHours_DeleteAndCreateOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAndCreateOpenHourRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteAndCreateOpenHourRulesRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/future-availability": {
      "get": {
        "operationId": "OpenHours_GetNextAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNextAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "primaryIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondaryIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "openHourType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "WEEKLY",
              "CUSTOM"
            ],
            "default": "UNKNOWN"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/recur-rule/{openHourRuleId}": {
      "put": {
        "summary": "UpsertRecurrenceRule updates recurrence rule of an open hour rule if found else creates one\nuse this rpc to update all slots between time-range built from recurrence rule with new rule",
        "operationId": "OpenHours_UpsertRecurrenceRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertRecurrenceRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "openHourRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpsertRecurrenceRuleBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule": {
      "post": {
        "summary": "CreateOpenHourRule creates a new open hour rule",
        "operationId": "OpenHours_CreateOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOpenHourRuleRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule-future:list": {
      "get": {
        "operationId": "OpenHours_ListFutureOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFutureOpenHourRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "openHourType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "WEEKLY",
              "CUSTOM"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule-override": {
      "post": {
        "operationId": "OpenHours_OverrideOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OverrideOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OverrideOpenHourRuleRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/metadata/{ruleId}": {
      "put": {
        "summary": "UpdateOpenHourRule updates an open hour rule uniquely identified by its ID.\nuse this rpc to update metadata  Rules",
        "operationId": "OpenHours_UpdateOpenHourRuleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateOpenHourRuleMetadataBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/{id}": {
      "get": {
        "summary": "GetOpenHourRule returns the open hour rule based on its unique ID",
        "operationId": "OpenHours_GetOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is a unique identifier of the open hour rule\nMinimum length of ID should be 1",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from open hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nopen hour rule object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/{openHourRule.id}": {
      "put": {
        "summary": "UpsertRecurrenceRule updates recurrence rule of an open hour rule if found else creates one\nuse this rpc to update all slots between time-range built from recurrence rule with new rule",
        "operationId": "OpenHours_UpdateOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "openHourRule.id",
            "description": "Id of the open hour rule",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateOpenHourRuleBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule:list": {
      "get": {
        "summary": "ListOpenHourRule returns all the open hour rules within a given parent",
        "operationId": "OpenHours_ListOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given company like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from open hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nopen hour rule object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.fetchActiveOnly",
            "description": "corresponding to employee/staff",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slot/{id}": {
      "put": {
        "summary": "UpdateSingleSlot updates a slot of the open hour\nuse this rpc to update timing, is-bookable in single slot identified by its id",
        "operationId": "OpenHours_UpdateSingleSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourBuiltSlot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique slot-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateSingleSlotBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slot/{slotId}": {
      "delete": {
        "operationId": "OpenHours_DeleteSingleSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "slotId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "openHourRuleId",
            "description": "OpenHourRuleId is the id of open hour rule to which this slot belongs",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleteRequestSlotOnly",
            "description": "internal",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.recurrenceId",
            "description": "RecurrenceId is the id of open-hour-id from which slot is built",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.slot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalSlot.slot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalSlot.bookable",
            "description": "Tells whether a resource can be booked or not",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.serviceIds",
            "description": "service-ids linked with open-hour-built-slot",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "originalSlot.capacity",
            "description": "capacity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalSlot.locationId",
            "description": "extra fields for query\n\nparent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.exceptionDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.specialCase",
            "description": "special case - when built slot start_time > until of open hour",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slots": {
      "delete": {
        "operationId": "OpenHours_DeleteOpenHourSlotsBetweenDuration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleId",
            "description": "open hour rule id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recurrenceId",
            "description": "open hour id (optional)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "description": "optional (if empty deleted from current time)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "until",
            "description": "optional (if empty deleted till last slot)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/custom-statuses": {
      "get": {
        "summary": "ListCompanies returns all the companies within a given parent like group",
        "operationId": "CustomStatuses_ListCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given CustomStatus like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "APPOINTMENT",
              "CLASS"
            ],
            "default": "UNDEFINED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fetchBelowLevel",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      },
      "post": {
        "summary": "CreateCustomStatus creates new CustomStatus",
        "operationId": "CustomStatuses_CreateCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCustomStatusRequest"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/copy-default": {
      "get": {
        "summary": "This method copies the default custom status at company level",
        "operationId": "CustomStatuses_CopyDefaultCustomStatusAtCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is the company_id at which default status will be copied",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "APPOINTMENT",
              "CLASS"
            ],
            "default": "UNDEFINED"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/order/{customStatusId}": {
      "put": {
        "operationId": "CustomStatuses_UpdateCustomStatusDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatusId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomStatusesUpdateCustomStatusDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/{customStatus.id}": {
      "put": {
        "summary": "UpdateCustomStatus updates a CustomStatus uniquely identified by its ID.\nUpdate CustomStatus uses Field Mask to update properties of CustomStatus object",
        "operationId": "CustomStatuses_UpdateCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatus.id",
            "description": "Id is a unique identifier of the CustomStatus",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomStatusesUpdateCustomStatusBody"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/{id}": {
      "get": {
        "summary": "GetCustomStatus returns the CustomStatus based on its unique ID\nGetCustomStatus is an open endpoint for the sake of visibility",
        "operationId": "CustomStatuses_GetCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the CustomStatus with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from CustomStatus object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nCustomStatus object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      },
      "delete": {
        "summary": "DeleteCustomStatus deletes a specific CustomStatus identified by the given ID.\nNote: This method soft deletes the CustomStatus.",
        "operationId": "CustomStatuses_DeleteCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the CustomStatus with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/settings/group/{groupSetting.id}": {
      "put": {
        "operationId": "GroupSettings_UpsertGroupSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GroupSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupSettingsUpsertGroupSettingBody"
            }
          }
        ],
        "tags": [
          "GroupSettings"
        ]
      }
    },
    "/v1/settings/group/{parent}": {
      "get": {
        "operationId": "GroupSettings_GetGroupSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GroupSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is group-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GroupSettings"
        ]
      }
    },
    "/v1/pii/cancellation/{dataCode}": {
      "patch": {
        "summary": "RequestCancellation will take the data-code id and will cancel the request against\ndelete PII only before the scheduled possible time duration of 10 days",
        "operationId": "PiiService_RequestCancellation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestCancellationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PiiServiceRequestCancellationBody"
            }
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/pii/check/owner/{dataCode}": {
      "get": {
        "summary": "GetOwnedBusinessInfo will take the email and will check if the user has a business\nowner role. It will return the name of the businesses and ids, with its various\nroles.",
        "operationId": "PiiService_GetOwnedBusinessInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOwnedBusinessInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/pii/check/status/{dataCode}": {
      "get": {
        "summary": "CheckStatusOfPII will take the data-code send on email for deleting the data.\nIt will check the entry into pii_request table if entry is present give\nstatus \"Working on it\", data is found else if data is deleted give status\n\"Deleted\", if entry is not found give not request for data deletion.",
        "operationId": "PiiService_CheckStatusOfPII",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckStatusOfPIIResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/pii/delete/account": {
      "delete": {
        "summary": "ConfirmDeleteInfo will confirm the delete information request using the mail\ndata code, containing email address or phone_number, and business ids and stores\nan entry against the data-code if requester is business' owner else return error",
        "operationId": "PiiService_ConfirmDeleteInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOwnedBusinessInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "businessIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/pii/search/{dataCode}": {
      "get": {
        "summary": "SearchPII will take the data-code and will save it in db. and start a background service\nto search all the pii fields related to the user and will send an email\ninto that email_address with data-code for deletion.",
        "operationId": "PiiService_SearchPII",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/pii/verify/{email}": {
      "get": {
        "summary": "CreateSearchPII will take the email address as input and will generate a data-code\nand will send an email to the user with data-code attached to verify the email address.\nand start searching.",
        "operationId": "PiiService_VerifyEmailForPII",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "dataCode",
            "description": "data_code is only meant for internal use",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PiiService"
        ]
      }
    },
    "/v1/dict/check-account": {
      "get": {
        "operationId": "DictionaryCustomizations_CheckDictionaryAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckDictionaryAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "business",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DictionaryCustomizations"
        ]
      }
    },
    "/v1/dict/discount-eligibility": {
      "get": {
        "operationId": "DictionaryCustomizations_CheckDiscountEligibility",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckDiscountEligibilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "business",
            "description": "location-id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ssoId",
            "description": "provided by SSO, stored corresponding to customer",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "email of customer",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DictionaryCustomizations"
        ]
      }
    },
    "/v1/settings/service/batch/{parentIds}": {
      "put": {
        "summary": "BatchUpsertServiceSetting will update the requested update_path field in all the provided parent_ids",
        "operationId": "ServiceSettings_BatchUpsertServiceSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parentIds",
            "in": "path",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "csv",
            "minItems": 1,
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSettingsBatchUpsertServiceSettingBody"
            }
          }
        ],
        "tags": [
          "ServiceSettings"
        ]
      }
    },
    "/v1/settings/service/{parent}": {
      "get": {
        "summary": "GetServiceSetting returns a service setting based on its unique id",
        "operationId": "ServiceSettings_GetServiceSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Id is of the location or service. Settings can be set at multiple levels.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from service setting object that has\n to be returned.\nIf a FieldMask object is not present then return all the field from the\nservice setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceSettings"
        ]
      },
      "delete": {
        "operationId": "ServiceSettings_ResetServiceGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ServiceSettings"
        ]
      }
    },
    "/v1/settings/service/{serviceSetting.id}": {
      "post": {
        "operationId": "ServiceSettings_UpsertServiceGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceSetting.id",
            "description": "Id is of the location or service. Settings can be set at multiple levels.\nWhen retrieving for a level. The service returns the object by merging all the levels\ngiving precedence to the lowest level.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSettingsUpsertServiceGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "ServiceSettings"
        ]
      },
      "put": {
        "summary": "UpsertServiceSetting, update service setting if service setting exists or\ninsert a service setting if empty",
        "operationId": "ServiceSettings_UpsertServiceSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceSetting.id",
            "description": "Id is of the location or service. Settings can be set at multiple levels.\nWhen retrieving for a level. The service returns the object by merging all the levels\ngiving precedence to the lowest level.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceSettingsUpsertServiceSettingBody"
            }
          }
        ],
        "tags": [
          "ServiceSettings"
        ]
      }
    },
    "/v1/role": {
      "post": {
        "summary": "Create Role can be used to create the different role within an organization.\nRole can  be created at location, company or group level.",
        "operationId": "Roles_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "summary": "List role can be used to fetch the details of all created role within an organization.",
        "operationId": "Roles_ListRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hide",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/master": {
      "get": {
        "summary": "It will return the list of default role created by the system.\nDefault role are based on level. There are two roles for each level i.e Owner, CoOwner.",
        "operationId": "Roles_ListDefaultRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDefaultRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "optional: used for override roles logic",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/service-account/assign": {
      "post": {
        "operationId": "Roles_AssignServiceAccountRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AssignServiceAccountRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user": {
      "get": {
        "summary": "This method is used to list all users within organization at a specific level.",
        "operationId": "Roles_GetUsersByLevelId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleId",
            "description": "for filtering by role id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/assign": {
      "post": {
        "summary": "This method is used to assign the role to the user.\nIf the user already have that role assigned it will do nothing otherwise append the new role.",
        "operationId": "Roles_AssignRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AssignRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/invite/users": {
      "post": {
        "operationId": "Roles_InviteUsersToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InviteUsersToRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/level": {
      "post": {
        "operationId": "Roles_GetUsersByLevel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/remove": {
      "post": {
        "summary": "This method is used to remove the role to the user.\nIf the user do not have that role assigned it will do nothing otherwise remove the provided role.",
        "operationId": "Roles_RemoveRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/{userId}": {
      "get": {
        "summary": "This method can be used to fetch all the assigned role of the user.\nIt will return roles across all the organizations.",
        "operationId": "Roles_GetUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/{userId}/update": {
      "post": {
        "operationId": "Roles_UpdateAssignedRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateAssignedRolesBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/{id}": {
      "delete": {
        "summary": "Delete role will delete the role from organization.\nIt will also remove the roles from the assigned user.",
        "operationId": "Roles_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/{role.id}": {
      "put": {
        "summary": "Update Role can be used to update an existing role.\nIt will update rights against all users who have this role assigned.\n* Role level (Group, Company, location) Can't be changed by this method.",
        "operationId": "Roles_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/roles/invited": {
      "get": {
        "summary": "This method is used to list all the invited user within an organization / at a specific level within an organization.",
        "operationId": "Roles_ListInvitedUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInvitedUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "levelOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/roles/users/module-roles/{companyId}": {
      "get": {
        "operationId": "Roles_ListUsersOfModuleRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersOfModuleRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/calendar/settings/batch/{userId}": {
      "get": {
        "operationId": "Calendars_BatchGetCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCalendarSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/meeting/link/{userId}": {
      "patch": {
        "operationId": "Calendars_ChangeCalendarMeetingLinkSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsChangeCalendarMeetingLinkSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/toggle/{userId}": {
      "patch": {
        "summary": "ToggleCalendarSettings updates only the boolean values",
        "operationId": "Calendars_ToggleCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsToggleCalendarSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/{userId}": {
      "get": {
        "operationId": "Calendars_GetCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "type",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "Calendars"
        ]
      },
      "patch": {
        "operationId": "Calendars_UpdateCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsUpdateCalendarSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/{userId}": {
      "get": {
        "summary": "ListCalendars is returns list of Calendars of user",
        "operationId": "Calendars_ListCalendars",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "type",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/apikey": {
      "get": {
        "operationId": "ApiKeys_GetApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ApiKeys"
        ]
      },
      "post": {
        "operationId": "ApiKeys_GenerateNewApiKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ApiKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateNewApiKeyRequest"
            }
          }
        ],
        "tags": [
          "ApiKeys"
        ]
      }
    },
    "/v1/settings/employee/batch": {
      "put": {
        "operationId": "EmployeeSettings_BatchUpsertEmployeeSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertEmployeeSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertEmployeeSettingRequest"
            }
          }
        ],
        "tags": [
          "EmployeeSettings"
        ]
      }
    },
    "/v1/settings/employee/{employeeSetting.id}": {
      "post": {
        "operationId": "EmployeeSettings_UpsertEmployeeGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EmployeeSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeeSettingsUpsertEmployeeGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "EmployeeSettings"
        ]
      }
    },
    "/v1/settings/employee/{parent}": {
      "get": {
        "operationId": "EmployeeSettings_GetEmployeeSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EmployeeSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "EmployeeSettings"
        ]
      },
      "delete": {
        "operationId": "EmployeeSettings_ResetEmployeeGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "EmployeeSettings"
        ]
      }
    },
    "/v1/settings/employee/{setting.id}": {
      "put": {
        "operationId": "EmployeeSettings_UpsertEmployeeSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EmployeeSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "setting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeeSettingsUpsertEmployeeSettingBody"
            }
          }
        ],
        "tags": [
          "EmployeeSettings"
        ]
      }
    },
    "/v1/locales/default/{locale}": {
      "get": {
        "summary": "TODO this method will be public",
        "operationId": "Locales_GetDefaultLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDefaultLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locale",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "propertyType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locales"
        ]
      }
    },
    "/v1/locales/parent/{parent}": {
      "post": {
        "summary": "TODO this method will be public",
        "operationId": "Locales_GetLocaleByParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLocaleByParentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocalesGetLocaleByParentBody"
            }
          }
        ],
        "tags": [
          "Locales"
        ]
      }
    },
    "/v1/locales/{id}": {
      "post": {
        "summary": "TODO this method will be public",
        "operationId": "Locales_GetLocaleById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLocaleByIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocalesGetLocaleByIdBody"
            }
          }
        ],
        "tags": [
          "Locales"
        ]
      }
    },
    "/v1/app-types": {
      "get": {
        "summary": "ListAppType lists all the AppType(s) of parent",
        "operationId": "AppTypes_ListAppType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "LOCATION_FILTER",
              "USER_FILTER",
              "COMPANY_FILTER",
              "EMPLOYEE_FILTER"
            ],
            "default": "ALL"
          }
        ],
        "tags": [
          "AppTypes"
        ]
      }
    },
    "/v1/app-types/company/{companyId}": {
      "get": {
        "operationId": "AppTypes_ListAppTypesOfCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppTypes"
        ]
      }
    },
    "/v1/app-types/{id}": {
      "get": {
        "summary": "GetAppType returns the app type by its unique id.",
        "operationId": "AppTypes_GetAppType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppTypes"
        ]
      }
    },
    "/v1/user-settings": {
      "put": {
        "operationId": "UserSettings_UpsertUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertUserSettingsRequest"
            }
          }
        ],
        "tags": [
          "UserSettings"
        ]
      }
    },
    "/v1/user-settings/{userId}": {
      "get": {
        "operationId": "UserSettings_GetUserSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserSettings"
        ]
      }
    },
    "/v1/assistants": {
      "post": {
        "operationId": "Assistants_UpsertAssistant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Assistant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertAssistantRequest"
            }
          }
        ],
        "tags": [
          "Assistants"
        ]
      }
    },
    "/v1/assistants/chat": {
      "post": {
        "operationId": "Assistants_ChatConversation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChatConversationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChatConversationRequest"
            }
          }
        ],
        "tags": [
          "Assistants"
        ]
      }
    },
    "/v1/assistants/company/{companyId}": {
      "get": {
        "operationId": "Assistants_ListAllAssistantsByCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllAssistantsByCompanyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Assistants"
        ]
      }
    },
    "/v1/assistants/location/{locationId}": {
      "get": {
        "operationId": "Assistants_GetAssistantByLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Assistant"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Assistants"
        ]
      }
    },
    "/v1/assistants/{id}": {
      "delete": {
        "operationId": "Assistants_DeleteAssistant",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Assistants"
        ]
      }
    },
    "/v1/settings/company/group/{companySetting.id}": {
      "post": {
        "operationId": "CompanySettings_UpsertCompanyGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companySetting.id",
            "description": "Id can be companyId while creation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanySettingsUpsertCompanyGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/group/{parent}": {
      "delete": {
        "operationId": "CompanySettings_ResetCompanyGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/locales": {
      "post": {
        "operationId": "CompanySettings_GetCompanySettingByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanySettingByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCompanySettingByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/locales/parent:batch": {
      "post": {
        "operationId": "CompanySettings_BatchGetCompanySettingByParentLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanySettingByParentLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanySettingByParentLocaleRequest"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/locales/upsert:batch": {
      "post": {
        "operationId": "CompanySettings_BatchCompanySettingLocaleUpsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCompanySettingLocaleUpsertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCompanySettingLocaleUpsertRequest"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/locales:batch": {
      "post": {
        "operationId": "CompanySettings_BatchGetCompanySettingByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanySettingByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanySettingByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/{companySetting.id}": {
      "put": {
        "operationId": "CompanySettings_UpsertCompanySetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companySetting.id",
            "description": "Id can be companyId while creation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanySettingsUpsertCompanySettingBody"
            }
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/settings/company/{parent}": {
      "get": {
        "operationId": "CompanySettings_GetCompanySetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is company-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompanySettings"
        ]
      }
    },
    "/v1/apps": {
      "get": {
        "summary": "ListApp lists all the App(s)",
        "operationId": "Apps_ListApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appsOfCompany.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfLocation.locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfUser.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfUser.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfEmployee.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfEmployee.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "post": {
        "summary": "CreateApp creates new app.",
        "operationId": "Apps_CreateApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppRequest"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/count": {
      "get": {
        "operationId": "Apps_GetAppCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/detail": {
      "get": {
        "operationId": "Apps_ListAppsDetail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppsDetailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appsOfCompany.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfLocation.locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfUser.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfUser.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfEmployee.companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appsOfEmployee.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/toggle/{id}": {
      "patch": {
        "summary": "ToggleApp is used to update ActiveStatus of app\nIt accepts two values as input: AppId and ActiveStatus\nand updates ActiveStatus based on input",
        "operationId": "Apps_ToggleApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppsToggleAppBody"
            }
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/apps/{id}": {
      "get": {
        "summary": "GetApp returns the app by its unique id.",
        "operationId": "Apps_GetApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1App"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      },
      "delete": {
        "summary": "DeleteApp will delete the app from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "Apps_DeleteApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "appTypeId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Apps"
        ]
      }
    },
    "/v1/analytics": {
      "get": {
        "summary": "ListAnalytic lists all the Analytic(s)",
        "operationId": "Analytics_ListAnalytic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAnalyticResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "targetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Analytics"
        ]
      },
      "put": {
        "summary": "CreateAnalytic creates new analytic.",
        "operationId": "Analytics_UpsertAnalytic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Analytic"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertAnalyticRequest"
            }
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics/accounts/{targetId}": {
      "get": {
        "operationId": "Analytics_ListAnalyticAccounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAnalyticAccountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "targetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics/entities/{accountId}": {
      "get": {
        "operationId": "Analytics_ListAnalyticEntities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEntitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "targetId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics/entitiesv2/{accountId}": {
      "get": {
        "operationId": "Analytics_ListAnalyticEntitiesV2",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEntitiesResponseV2"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "accountId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "targetId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics/target/{targetId}": {
      "get": {
        "summary": "ListAnalyticByTarget lists all the Analytic(s)",
        "operationId": "Analytics_ListAnalyticByTarget",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAnalyticByTargetResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "targetId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics/{id}": {
      "get": {
        "summary": "GetAnalytic returns the analytic by its unique id.",
        "operationId": "Analytics_GetAnalytic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Analytic"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Analytics"
        ]
      },
      "delete": {
        "summary": "DeleteAnalytic will delete the analytic from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "Analytics_DeleteAnalytic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/analytics:batchGet": {
      "get": {
        "summary": "Gets all the Analytic(s) by their ids",
        "operationId": "Analytics_BatchGetAnalytic",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAnalyticResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Analytics"
        ]
      }
    },
    "/v1/webhook-logs/{parent}": {
      "get": {
        "operationId": "WebhookLogs_WebhookReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "search query by event name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "pagination related fields",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookLogs"
        ]
      }
    },
    "/v1/webhook-logs/{retryAttempt}/{hours}": {
      "get": {
        "operationId": "WebhookLogs_BatchGetWebhookLogs",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetWebhookLogsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "retryAttempt",
            "in": "path",
            "required": true,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "hours",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookLogs"
        ]
      }
    },
    "/v1/receipts": {
      "post": {
        "operationId": "ReceiptSettings_UpsertReceiptSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertReceiptSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertReceiptSettingsRequest"
            }
          }
        ],
        "tags": [
          "ReceiptSettings"
        ]
      }
    },
    "/v1/receipts/{id}": {
      "get": {
        "operationId": "ReceiptSettings_GetReceiptSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetReceiptSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "id of the receipt-settings / location_id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ReceiptSettings"
        ]
      }
    },
    "/v1/license-trial-transactions": {
      "get": {
        "summary": "ListLicenseTrialTransaction lists all the LicenseTrialTransaction(s)",
        "operationId": "LicenseTrialTransactions_ListLicenseTrialTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListLicenseTrialTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LicenseTrialTransactions"
        ]
      }
    },
    "/v1/license-trials": {
      "get": {
        "operationId": "LicenseTrials_AssignLicenseTrial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "trialId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LicenseTrials"
        ]
      }
    },
    "/v1/license-trials/{id}": {
      "get": {
        "summary": "GetLicenseTrial returns the license trial by its unique id.",
        "operationId": "LicenseTrials_GetLicenseTrial",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LicenseTrial"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "LicenseTrials"
        ]
      }
    },
    "/v1/licensing": {
      "get": {
        "summary": "ListLicense lists all the License(s)",
        "operationId": "Licensing_ListLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListLicenseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Licensing"
        ]
      }
    },
    "/v1/licensing/{id}": {
      "get": {
        "summary": "GetLicense returns the license by its unique id.",
        "operationId": "Licensing_GetLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1License"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Licensing"
        ]
      }
    },
    "/v1/certificates": {
      "get": {
        "summary": "ListCertificate lists all the Certificate(s)",
        "operationId": "Certificates_ListCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/company/location (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query contains a string which is used to search name of certificate",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Certificates"
        ]
      },
      "post": {
        "summary": "CreateCertificate creates new certificate.",
        "operationId": "Certificates_CreateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Certificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCertificateRequest"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/certificates/{certificate.id}": {
      "put": {
        "summary": "UpdateCertificate will update the certificate identified by its certificate id.\nUpdate Certificate uses Field Mask to update specific properties of certificate object",
        "operationId": "Certificates_UpdateCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Certificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "certificate.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CertificatesUpdateCertificateBody"
            }
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/certificates/{id}": {
      "get": {
        "summary": "GetCertificate returns the certificate by its unique id.",
        "operationId": "Certificates_GetCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Certificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Certificates"
        ]
      },
      "delete": {
        "summary": "DeleteCertificate will delete the certificate from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "Certificates_DeleteCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/certificates:batchGet": {
      "get": {
        "summary": "Gets all the Certificate(s) by their ids",
        "operationId": "Certificates_BatchGetCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Certificates"
        ]
      }
    },
    "/v1/categories": {
      "get": {
        "operationId": "Categories_ListCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given category like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from category object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Categories"
        ]
      },
      "post": {
        "summary": "validate all category objects have single parent before inserting into\ndatabase\nCreateCategory creates a new category.",
        "operationId": "Categories_CreateCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Category"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCategoryRequest"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/locales": {
      "post": {
        "operationId": "Categories_GetCategoryByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCategoryByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetCategoryByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/locales/parent:batch": {
      "post": {
        "operationId": "Categories_BatchGetCategoryByParentLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCategoryByParentLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetCategoryByParentLocaleRequest"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/locales/upsert:batch": {
      "post": {
        "operationId": "Categories_BatchCategoryLocaleUpsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCategoryLocaleUpsertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCategoryLocaleUpsertRequest"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/locales:batch": {
      "post": {
        "operationId": "Categories_BatchGetCategoryByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCategoryByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetCategoryByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/order/{categoryId}": {
      "put": {
        "operationId": "Categories_UpdateCategoryDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoriesUpdateCategoryDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/{category.id}": {
      "put": {
        "summary": "UpdateCategory updates a category uniquely identified by its ID.\nUpdateCategory uses Field Mask to update properties of category object.",
        "operationId": "Categories_UpdateCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Category"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "category.id",
            "description": "Id is the category id which uniquely identify a category",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CategoriesUpdateCategoryBody"
            }
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/categories/{id}": {
      "get": {
        "summary": "GetCategory returns a category based on its unique ID.",
        "operationId": "Categories_GetCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Category"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from category object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Categories"
        ]
      },
      "delete": {
        "summary": "DeleteCategory deletes the specific category uniquely identified by the\ngiven ID. Note: This method soft deletes the category.",
        "operationId": "Categories_DeleteCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID is uniquely identified category-id\nId is the fully qualified url of the category with its hierarchy details.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Categories"
        ]
      }
    },
    "/v1/car-jam/{plate}": {
      "get": {
        "operationId": "CarJam_GetCarJamInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1VehicleInfo"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "plate",
            "description": "plate is a 6 digit alphanumeric value",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CarJam"
        ]
      }
    },
    "/v1/requestApps": {
      "get": {
        "operationId": "RequestApps_ListRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRequestAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appTypeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestApps"
        ]
      },
      "post": {
        "operationId": "RequestApps_CreateRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestApp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRequestAppRequest"
            }
          }
        ],
        "tags": [
          "RequestApps"
        ]
      }
    },
    "/v1/requestApps/report": {
      "get": {
        "summary": "Request Access Report",
        "operationId": "RequestApps_RequestAccessReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestAccessReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filters.staffIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters.appTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sortBy",
            "description": "field_mask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "descendingOrder",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query",
            "description": "query will search in notes, employee and appType name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportReport",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "RequestApps"
        ]
      }
    },
    "/v1/requestApps/{id}": {
      "get": {
        "operationId": "RequestApps_GetRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestApp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestApps"
        ]
      },
      "delete": {
        "operationId": "RequestApps_DeleteRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RequestApps"
        ]
      }
    },
    "/v1/requestApps/{requestApp.id}": {
      "put": {
        "operationId": "RequestApps_UpdateRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RequestApp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "requestApp.id",
            "description": "parent is company",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RequestAppsUpdateRequestAppBody"
            }
          }
        ],
        "tags": [
          "RequestApps"
        ]
      }
    },
    "/v1/requestApps:batchCreate": {
      "post": {
        "operationId": "RequestApps_BatchCreateRequestApp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateRequestAppResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateRequestAppRequest"
            }
          }
        ],
        "tags": [
          "RequestApps"
        ]
      }
    },
    "/v1/role-customizations": {
      "get": {
        "operationId": "RoleLevelCustomizations_ListCustomizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "RoleLevelCustomizations"
        ]
      },
      "delete": {
        "operationId": "RoleLevelCustomizations_DeleteCustomizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoleLevelCustomizations"
        ]
      },
      "post": {
        "operationId": "RoleLevelCustomizations_CreateCustomizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCustomizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCustomizationsRequest"
            }
          }
        ],
        "tags": [
          "RoleLevelCustomizations"
        ]
      }
    },
    "/v1/role-customizations/user": {
      "get": {
        "operationId": "RoleLevelCustomizations_ListCustomizationsOfUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "RoleLevelCustomizations"
        ]
      }
    },
    "/v1/block-hours": {
      "get": {
        "summary": "ListBlockHourRule lists all the block hour rules",
        "operationId": "BlockHours_ListBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Block hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nblock hour rule object.\nMessage is required",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "One of the 2 fields (parent/resource_id) is required",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalSourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BLOCK_HOUR_UNKNOWN",
                "BLOCK_HOUR_APPROVED",
                "BLOCK_HOUR_DENIED",
                "BLOCK_HOUR_WAITING_FOR_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      },
      "post": {
        "operationId": "BlockHours_CreateBlockHourRuleForMultipleResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateBlockHourRuleForMultipleResourcesRequest"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/batch": {
      "delete": {
        "summary": "DeleteBlockHourRule will delete the block hour rule from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "BlockHours_DeleteListOfBlockHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/calender:list": {
      "get": {
        "summary": "ListBlockHourRulesForCalendar lists all the block hour rules between a specific duration for calendar",
        "operationId": "BlockHours_ListBlockHourRulesForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBlockHourRulesForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Represents the start time of blocking any resource\nvalue is required",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "Represents the end time of blocking any resource\nvalue is required",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "Parent contains the hierarchical information of the given block hour rule like\nits group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "externalSourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "internalCall",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BLOCK_HOUR_UNKNOWN",
                "BLOCK_HOUR_APPROVED",
                "BLOCK_HOUR_DENIED",
                "BLOCK_HOUR_WAITING_FOR_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/check-pre-existing-booking-for-block-hour": {
      "get": {
        "operationId": "BlockHours_CheckPreExistingBookingForBlockHour",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckPreExistingBookingForBlockHourResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "request.parent",
            "description": "Parent contains the hierarchical information of the given block hour rules\nlike group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.resourceId",
            "description": "Id of the specific resource/employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.slotDurationInMinutes",
            "description": "slot of time for which the resource is blocked\nDuration must be greater than zero; only if recurrence set provided",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "request.recurrenceSet",
            "description": "RRule Set for which time will be blocked",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "request.recurringSlotStartTime",
            "description": "Start time for recurring slots",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "request.metadata",
            "description": "Additional information for blocking\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.reason",
            "description": "Reason due to which the resource is blocked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.locale",
            "description": "Locale in which the time slot is blocked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.title",
            "description": "Title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.externalSourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/data-code/{code}": {
      "put": {
        "operationId": "BlockHours_UpdateBlockHourByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateBlockHourByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourByDataCodeBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/status/{blockHourRuleId}": {
      "put": {
        "operationId": "BlockHours_UpdateBlockHourRuleStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateBlockHourRuleStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourRuleStatusBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{blockHourRule.id}": {
      "put": {
        "summary": "UpdateBlockHoursRule will update the block hour rule identified by its id.\nUpdateBlockHoursRule uses Field Mask to update specific properties of block hour rule object",
        "operationId": "BlockHours_UpdateBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRule.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourRuleBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{blockHourRuleId}": {
      "delete": {
        "summary": "DeleteBlockHourRule will delete the block hour rule from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "BlockHours_DeleteBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRuleId",
            "description": "Id is the fully qualified url of the block hour rule with its hierarchy details\nMinimum length of the ID should be 1",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "slotIds",
            "description": "This is an optional field",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "allFuture",
            "description": "All future",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{code}": {
      "get": {
        "operationId": "BlockHours_GetBlockHourByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{id}": {
      "get": {
        "summary": "GetBlockHourRule returns the BlockHour Rule by its unique id.",
        "operationId": "BlockHours_GetBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the block hour rule with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Block hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nblock hour rule object.\nMessage is required",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/groups/{group.id}": {
      "put": {
        "summary": "UpdateGroup updates a group uniquely identified by its ID.",
        "operationId": "Groups_UpdateGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Group"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "group.id",
            "description": "Id a unique identifier for group",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GroupsUpdateGroupBody"
            }
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/groups/{id}": {
      "get": {
        "summary": "GetGroup returns a group based on its unique ID.\nGetGroup is an open endpoint for the sake of visibility",
        "operationId": "Groups_GetGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Group"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id uniquely identifier for group",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Groups"
        ]
      },
      "delete": {
        "summary": "DeleteGroup ,deletes the group only when there is no company linked to it.\nIf a group has active companies linked to it, then inform the user to delete those companies first.\nNote: This method soft deletes the group",
        "operationId": "Groups_DeleteGroup",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id uniquely identifier for group",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Groups"
        ]
      }
    },
    "/v1/webhook-events": {
      "get": {
        "summary": "ListWebhookEvent lists all the WebhookEvent(s)",
        "operationId": "WebhookEvents_ListWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWebhookEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "WebhookEvents"
        ]
      },
      "post": {
        "summary": "CreateWebhookEvent creates new webhook event.",
        "operationId": "WebhookEvents_CreateWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateWebhookEventRequest"
            }
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      }
    },
    "/v1/webhook-events/{eventName}": {
      "get": {
        "operationId": "WebhookEvents_GetWebhookEventByEventName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      }
    },
    "/v1/webhook-events/{id}": {
      "get": {
        "summary": "GetWebhookEvent returns the webhook event by its unique id.",
        "operationId": "WebhookEvents_GetWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      },
      "delete": {
        "summary": "DeleteWebhookEvent will delete the webhook event from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "WebhookEvents_DeleteWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      }
    },
    "/v1/webhook-events/{webhookEvent.id}": {
      "put": {
        "summary": "UpdateWebhookEvent will update the webhook event identified by its webhook event id.\nUpdate WebhookEvent uses Field Mask to update specific properties of webhook event object",
        "operationId": "WebhookEvents_UpdateWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "webhookEvent.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookEventsUpdateWebhookEventBody"
            }
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      }
    },
    "/v1/webhook-events:batchGet": {
      "get": {
        "summary": "Gets all the WebhookEvent(s) by their ids",
        "operationId": "WebhookEvents_BatchGetWebhookEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetWebhookEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookEvents"
        ]
      }
    },
    "/v1/composite-endpoints/booking-flow-company-settings": {
      "get": {
        "operationId": "CompositeEndpoints_FetchCompositeBookingFlowCompanySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompositeBookingFlowCompanySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompositeEndpoints"
        ]
      }
    },
    "/v1/composite-endpoints/booking-flow-location-settings": {
      "get": {
        "summary": "Booking Flow",
        "operationId": "CompositeEndpoints_FetchCompositeBookingFlowLocationSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompositeBookingFlowLocationSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompositeEndpoints"
        ]
      }
    },
    "/v1/integrations": {
      "get": {
        "operationId": "Integrations_ListIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIntegrationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN_TYPE",
                "GOOGLECALENDAR",
                "OUTLOOK",
                "QUICKBOOKS",
                "STRIPE",
                "GOOGLE_BUSINESS_REVIEW",
                "YELP",
                "OTHERS",
                "FIREBASE",
                "WEBEX",
                "ZOOM",
                "GOOGLE_TAG_MANAGER",
                "GOOGLE_ANALYTICS",
                "FACEBOOK_PIXEL",
                "MIXPANEL",
                "SQUARE",
                "BRAINTREE",
                "PAYPAL",
                "ICLOUD",
                "INTERCOM",
                "GOOGLE_DRIVE",
                "DROPBOX",
                "GOOGLE_CONTACT",
                "ZAPIER",
                "MICROSOFT_TEAMS",
                "MICROSOFT_TEAMS_CONNECTOR",
                "CUSTOM_WEBHOOK",
                "SERVICE_NOW",
                "RAZORPAY",
                "SALESFORCE",
                "FRESH_SALES",
                "OPEN_HOUR_GOOGLE_CALENDAR",
                "BIG_COMMERCE",
                "XERO",
                "MAILCHIMP",
                "ZENDESK",
                "HUBSPOT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "useParentAsTargetId",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "revoked",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/batch": {
      "get": {
        "operationId": "Integrations_BatchGetIntegrations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListIntegrationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "targetIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "integrationIds",
            "description": "integration ids will only be used when target ids are not present",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/revoke": {
      "delete": {
        "summary": "expiry token from revoke endpoint of integration\ndelete integration entry of that user",
        "operationId": "Integrations_RevokeToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "targetId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "onError",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/integrations/save-credentials": {
      "post": {
        "operationId": "Integrations_SaveCredential",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IntegrationToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SaveCredentialRequest"
            }
          }
        ],
        "tags": [
          "Integrations"
        ]
      }
    },
    "/v1/locations": {
      "get": {
        "summary": "ListLocations returns all the location under the given parent",
        "operationId": "Locations_ListLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given Location like\ncompany and group",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query to filter locations",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "post": {
        "summary": "CreateLocation creates new Location under the given parent",
        "operationId": "Locations_CreateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateLocationRequest ...",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateLocationRequest"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/count/{parent}": {
      "get": {
        "summary": "get the count of location present in the company",
        "operationId": "Locations_GetLocationCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLocationCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/custom-id": {
      "get": {
        "operationId": "Locations_GetLocationByCustomId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/{id}": {
      "get": {
        "summary": "GetLocation returns the specified location by its unique id\nGetLocation is an open endpoint for the sake of visibility",
        "operationId": "Locations_GetLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the location with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Location object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nlocation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "delete": {
        "summary": "DeleteLocation soft delete the location from the system",
        "operationId": "Locations_DeleteLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/{location.id}": {
      "put": {
        "summary": "UpdateLocation updates a location uniquely identified by its ID.\nUpdate location uses Field Mask to update specific properties of location object",
        "operationId": "Locations_UpdateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "location.id",
            "description": "Id is a unique identifier of the location",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationsUpdateLocationBody"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations:all": {
      "get": {
        "operationId": "Locations_ListAllLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations:batch": {
      "get": {
        "summary": "BatchGetLocations get Location by the list of given location IDs.",
        "operationId": "Locations_BatchGetLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "Ids contains the list of Unique location identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "put": {
        "summary": "Update Multiple locations -",
        "operationId": "Locations_BatchUpdateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateLocationRequest"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/service-templates": {
      "get": {
        "summary": "ListServiceTemplate lists all the ServiceTemplate(s)",
        "operationId": "ServiceTemplates_ListServiceTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServiceTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "view mask passed for service templates",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query to get templates based on title",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      },
      "post": {
        "summary": "CreateServiceTemplate creates new service template.",
        "operationId": "ServiceTemplates_CreateServiceTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateServiceTemplateRequest"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/locales": {
      "post": {
        "operationId": "ServiceTemplates_GetServiceTemplateByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServiceTemplateByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetServiceTemplateByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/locales/parent:batch": {
      "post": {
        "operationId": "ServiceTemplates_BatchGetServiceTemplateByParentLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceTemplateByParentLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceTemplateByParentLocaleRequest"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/locales/upsert:batch": {
      "post": {
        "operationId": "ServiceTemplates_BatchServiceTemplateLocaleUpsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchServiceTemplateLocaleUpsertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchServiceTemplateLocaleUpsertRequest"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/locales:batch": {
      "post": {
        "operationId": "ServiceTemplates_BatchGetServiceTemplateByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceTemplateByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceTemplateByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/{id}": {
      "get": {
        "summary": "GetServiceTemplate returns the service template by its unique id.",
        "operationId": "ServiceTemplates_GetServiceTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      },
      "delete": {
        "summary": "DeleteServiceTemplate will delete the service template from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "ServiceTemplates_DeleteServiceTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/service-templates/{serviceTemplate.id}": {
      "put": {
        "summary": "UpdateServiceTemplate will update the service template identified by its service template id.\nUpdate ServiceTemplate uses Field Mask to update specific properties of service template object",
        "operationId": "ServiceTemplates_UpdateServiceTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceTemplate.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceTemplatesUpdateServiceTemplateBody"
            }
          }
        ],
        "tags": [
          "ServiceTemplates"
        ]
      }
    },
    "/v1/payment-requests": {
      "get": {
        "summary": "ListPaymentRequest lists all the PaymentRequest(s)",
        "operationId": "PaymentRequests_ListPaymentRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      },
      "post": {
        "summary": "CreatePaymentRequest creates new payment request.",
        "operationId": "PaymentRequests_GeneratePaymentRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GeneratePaymentRequestResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GeneratePaymentRequestRequest"
            }
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      }
    },
    "/v1/payment-requests/code": {
      "get": {
        "summary": "GetPaymentRequest returns the payment request by its unique id.",
        "operationId": "PaymentRequests_GetPaymentRequestByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PaymentRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      }
    },
    "/v1/payment-requests/resend": {
      "post": {
        "operationId": "PaymentRequests_ResendPaymentRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResendPaymentRequestRequest"
            }
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      }
    },
    "/v1/payment-requests/{id}": {
      "get": {
        "summary": "GetPaymentRequest returns the payment request by its unique id.",
        "operationId": "PaymentRequests_GetPaymentRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PaymentRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      },
      "delete": {
        "summary": "DeletePaymentRequest will delete the payment request from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "PaymentRequests_DeletePaymentRequest",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentRequests"
        ]
      }
    },
    "/v1/payments/pay": {
      "post": {
        "operationId": "PaymentsManager_Pay",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PayResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PayRequest"
            }
          }
        ],
        "tags": [
          "PaymentsManager"
        ]
      }
    },
    "/v1/payments/refund/transaction": {
      "post": {
        "operationId": "PaymentsManager_RefundPaymentTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefundPaymentTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RefundPaymentTransactionRequest"
            }
          }
        ],
        "tags": [
          "PaymentsManager"
        ]
      }
    },
    "/v1/payments/{orderId}/pay": {
      "post": {
        "operationId": "PaymentsManager_PayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PayOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentsManagerPayOrderBody"
            }
          }
        ],
        "tags": [
          "PaymentsManager"
        ]
      }
    },
    "/v1/payments/{orderId}/refund": {
      "post": {
        "operationId": "PaymentsManager_RefundOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RefundOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentsManagerRefundOrderBody"
            }
          }
        ],
        "tags": [
          "PaymentsManager"
        ]
      }
    },
    "/v1/payments:list": {
      "get": {
        "operationId": "PaymentsManager_ListPaymentTransaction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentTransactionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "itemId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "description": "filters",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "transactionIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "paymentMethods",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNSPECIFIED_PAYMENT_METHOD",
                "CASH",
                "STRIPE_CARD",
                "SQUARE_CARD",
                "PACKAGE",
                "GIFT_CERTIFICATE",
                "MEMBERSHIP",
                "DISCOUNT_CODE",
                "CREDIT_CARD",
                "ECHECK",
                "DEBIT_CARD",
                "CREDIT_CARD_AND_CASH",
                "GIFT_CERTIFICATE_OFFLINE",
                "GIFT_CERTIFICATE_AND_CASH",
                "INSURANCE",
                "CHEQUE",
                "RADIUS",
                "RAZORPAY_ACCOUNT",
                "PAYPAL_ACCOUNT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "lowerAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "lowerAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "lowerAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "upperAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "upperAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "upperAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "paymentTransactionType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "PAID",
              "FAILED",
              "REFUND"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "paymentBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerFirstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerLastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerPhoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "refundedTransactionId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "PaymentsManager"
        ]
      }
    },
    "/v1/manual-refund/record": {
      "post": {
        "operationId": "ManualRefunds_RecordManualRefund",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RecordManualRefundRequest"
            }
          }
        ],
        "tags": [
          "ManualRefunds"
        ]
      }
    },
    "/v1/manual-refund:list": {
      "get": {
        "operationId": "ManualRefunds_ListManualRefund",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListManualRefundResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "refundStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_REFUND_STATUS",
              "REFUND_REQUESTED",
              "REFUND_APPROVED"
            ],
            "default": "UNSPECIFIED_REFUND_STATUS"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ManualRefunds"
        ]
      }
    },
    "/v1/membership-category": {
      "get": {
        "operationId": "MembershipCategoryService_ListMembershipCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMembershipCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MembershipCategoryService"
        ]
      },
      "post": {
        "operationId": "MembershipCategoryService_CreateMembershipCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MembershipCategory"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMembershipCategoryRequest"
            }
          }
        ],
        "tags": [
          "MembershipCategoryService"
        ]
      }
    },
    "/v1/membership-category/{id}": {
      "get": {
        "operationId": "MembershipCategoryService_GetMembershipCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MembershipCategory"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MembershipCategoryService"
        ]
      },
      "delete": {
        "operationId": "MembershipCategoryService_DeleteMembershipCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MembershipCategoryService"
        ]
      }
    },
    "/v1/membership-category/{membershipCategory.id}": {
      "put": {
        "operationId": "MembershipCategoryService_UpdateMembershipCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MembershipCategory"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "membershipCategory.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipCategoryServiceUpdateMembershipCategoryBody"
            }
          }
        ],
        "tags": [
          "MembershipCategoryService"
        ]
      }
    },
    "/v1/feature-notification": {
      "get": {
        "summary": "ListFeatureNotification lists all the FeatureNotification(s)",
        "operationId": "FeatureNotifications_ListFeatureNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFeatureNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "retrieveReadNotifications",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "FeatureNotifications"
        ]
      }
    },
    "/v1/feature-notification/{featureNotification.id}": {
      "put": {
        "summary": "UpdateFeatureNotification will update the feature notification identified by its feature notification id.\nUpdate FeatureNotification uses Field Mask to update specific properties of feature notification object",
        "operationId": "FeatureNotifications_UpdateFeatureNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FeatureNotification"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "featureNotification.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/FeatureNotificationsUpdateFeatureNotificationBody"
            }
          }
        ],
        "tags": [
          "FeatureNotifications"
        ]
      }
    },
    "/v1/consumer-restriction": {
      "get": {
        "operationId": "ConsumerRestrictions_ListConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "guardianId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "delete": {
        "operationId": "ConsumerRestrictions_DeleteConsumerRestrictions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "titles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction/{consumerRestriction.id}": {
      "post": {
        "operationId": "ConsumerRestrictions_UpsertConsumerRestrictionsGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerRestriction.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumerRestrictionsUpsertConsumerRestrictionsGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "put": {
        "operationId": "ConsumerRestrictions_UpsertConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerRestriction.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumerRestrictionsUpsertConsumerRestrictionBody"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction/{parent}": {
      "get": {
        "operationId": "ConsumerRestrictions_GetConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "consumerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "delete": {
        "operationId": "ConsumerRestrictions_ResetConsumerRestrictionsGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction:batch": {
      "get": {
        "operationId": "ConsumerRestrictions_BatchGetConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "put": {
        "operationId": "ConsumerRestrictions_BatchUpsertConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertConsumerRestrictionRequest"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/student-enrolments": {
      "post": {
        "operationId": "StudentEnrolments_CreateStudentEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateStudentEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStudentEnrolmentRequest"
            }
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      },
      "put": {
        "operationId": "StudentEnrolments_UpdateStudentEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateStudentEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateStudentEnrolmentRequest"
            }
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/student-enrolments/location/linking": {
      "get": {
        "operationId": "StudentEnrolments_GetLinkedMathnasiumLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLinkedMathnasiumLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/student-enrolments/remaining-sessions": {
      "get": {
        "operationId": "StudentEnrolments_GetStudentsRemainingSessions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetStudentsRemainingSessionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "guardianId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/student-enrolments/{id}": {
      "get": {
        "operationId": "StudentEnrolments_GetStudentEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetStudentEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      },
      "delete": {
        "operationId": "StudentEnrolments_DeleteStudentEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteStudentEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/student-enrolments:batch": {
      "get": {
        "operationId": "StudentEnrolments_BatchGetStudentEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetStudentEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "currentOrFutureEnrolmentsOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/student-enrolments:list": {
      "get": {
        "operationId": "StudentEnrolments_ListStudentEnrolments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStudentEnrolmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "terminationDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "StudentEnrolments"
        ]
      }
    },
    "/v1/mathnasium/availability": {
      "post": {
        "summary": "todo: add attribute level rights access for MathnasiumListSlots,MathnasiumListDates,MathnasiumListServicesOrEmployees",
        "operationId": "StudentBookings_MathnasiumListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListSlotsRequest"
            }
          }
        ],
        "tags": [
          "StudentBookings"
        ]
      }
    },
    "/v1/mathnasium/availability/dates": {
      "post": {
        "operationId": "StudentBookings_MathnasiumListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListDatesRequest"
            }
          }
        ],
        "tags": [
          "StudentBookings"
        ]
      }
    },
    "/v1/mathnasium/availability/services-employees": {
      "post": {
        "operationId": "StudentBookings_MathnasiumListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "StudentBookings"
        ]
      }
    },
    "/v1/mathnasium/availability/student-services-employees": {
      "post": {
        "operationId": "StudentBookings_MathnasiumListServicesOrEmployeesOfStudents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesOfStudentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesOfStudentRequest"
            }
          }
        ],
        "tags": [
          "StudentBookings"
        ]
      }
    },
    "/v1/mathnasium/report/over-booking": {
      "get": {
        "operationId": "StudentBookings_MathnasiumOverBookingReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MathnasiumOverBookingReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent will be location id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "date",
            "description": "date will be the date at which over booking report need to be generated",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "StudentBookings"
        ]
      }
    },
    "/v1/students": {
      "get": {
        "operationId": "Students_ListStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStudentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "guardianId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mergingStatuses",
            "description": "filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "APPOINTY_ACCOUNT",
                "RADIUS_ACCOUNT",
                "MERGED_ACCOUNT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "pagination related fields",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      },
      "post": {
        "operationId": "Students_CreateStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Student"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStudentRequest"
            }
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/batch-get-student-location-links": {
      "put": {
        "summary": "deprecated with respect to Student Enrolments' GetLinkedMathnasiumLocations",
        "operationId": "Students_BatchGetStudentLocationLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetStudentLocationLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/list-by-guardians": {
      "get": {
        "operationId": "Students_ListStudentsByGuardians",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStudentsByGuardiansResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "guardianIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "mergingStatuses",
            "description": "filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNDEFINED",
                "APPOINTY_ACCOUNT",
                "RADIUS_ACCOUNT",
                "MERGED_ACCOUNT"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "query",
            "description": "fullname or email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/location-link": {
      "get": {
        "summary": "deprecated with respect to Student Enrolments' GetLinkedMathnasiumLocations",
        "operationId": "Students_GetStudentLocationLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetStudentLocationLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      },
      "put": {
        "summary": "deprecated with respect to Student Enrolments' GetLinkedMathnasiumLocations",
        "operationId": "Students_UpsertStudentLocationLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StudentLocationLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/location-student-link": {
      "put": {
        "summary": "deprecated with respect to Student Enrolments' GetLinkedMathnasiumLocations",
        "operationId": "Students_UpsertLocationStudentLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1StudentLocationLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "studentIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/parents/list": {
      "get": {
        "operationId": "Students_ListParentsUsingStudents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListParentsUsingStudentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accessContact",
            "description": "AccessContact to check if user has access for customer(parents') contact details\nworks on the basis of \"access_contact.ListCustomer\" right pattern",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "query",
            "description": "Query makes overall search in student's/parent's email or name -- optional",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forParent.firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forParent.lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forParent.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forParent.phoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forParent.registeredAfter",
            "description": "RegisteredAfter will check CreatedOn > input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "forParent.registeredBefore",
            "description": "RegisteredBefore will check CreatedOn < input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "forStudent.firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forStudent.lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forStudent.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forStudent.phoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "forStudent.registeredAfter",
            "description": "RegisteredAfter will check CreatedOn > input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "forStudent.registeredBefore",
            "description": "RegisteredBefore will check CreatedOn < input",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "locationIds",
            "description": "Location linking",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "tags",
            "description": "Other Customer's filters",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customerCompanyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "description": "pagination related fields",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "LastName",
              "FirstName",
              "Email"
            ],
            "default": "CreatedOn"
          },
          {
            "name": "first",
            "description": "first specifies limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "after specifies cursor",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/{id}": {
      "get": {
        "operationId": "Students_GetStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Student"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      },
      "delete": {
        "operationId": "Students_DeleteStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "guardianId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students/{student.id}": {
      "put": {
        "operationId": "Students_UpdateStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Student"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "student.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StudentsUpdateStudentBody"
            }
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/students:batchGet": {
      "post": {
        "operationId": "Students_BatchGetStudent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetStudentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetStudentRequest"
            }
          }
        ],
        "tags": [
          "Students"
        ]
      }
    },
    "/v1/wizards": {
      "post": {
        "operationId": "Wizards_CreateFirstLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateFirstLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "Name is the human readable name of the location.\nIt need not be unique.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companyName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "description",
            "description": "Description is a short description for the location.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "gallery.default.thumbImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "gallery.default.largeImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "telephones",
            "description": "Telephone will be used for display purposes only. A location can have\nmultiple phone numbers.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "address.country",
            "description": "Country , e.g. \"USA\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.locality",
            "description": "Locality or locality/city, e.g. \"Mountain View\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.region",
            "description": "Region, The region/state/province, e.g. \"CA\". This field is only required\nin\ncountries where region is commonly a part of the address. (optional)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.postalCode",
            "description": "PostalCode  e.g. \"94043\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.streetAddress",
            "description": "StreetAddress, e.g. \"1600 Amphitheatre Pkwy\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address.latitude",
            "description": "GeoCoordinates , e.g. latitude=23.2599333, longitude=77.41261499999996\nLatitude e.g. 23.2599333",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "address.longitude",
            "description": "Longitude e.g. 77.41261499999996",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "profession",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "emails",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "website",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.timezone",
            "description": "Timezone format in INA => Ex: \"Etc/UTC\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.language",
            "description": "Local Format Ex: \"en-US\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.dateFormat",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.timeFormat",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.uiInfo",
            "description": "contains json object, used by frontend",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "preferences.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "companySlug",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationSlug",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.firstName",
            "description": "First Name of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.lastName",
            "description": "Last Name of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.email",
            "description": "Unique Email of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.profileImage.thumbImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.profileImage.largeImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.gender",
            "description": "Gender of the employee",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "FEMALE",
              "MALE",
              "OTHER",
              "PREFER_NOT_TO_SAY"
            ],
            "default": "UNSPECIFIED"
          },
          {
            "name": "employee.employeeNumber",
            "description": "employee Number of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.phoneNumber",
            "description": "phone Number of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.departmentId",
            "description": "department of employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.designationId",
            "description": "designation of the employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.metadata",
            "description": "Additional data of employee\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.hireDate",
            "description": "Date on which employee was hired",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "employee.userId",
            "description": "corresponds to user in system",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.isInvitationAccepted",
            "description": "is_invitation_accepted: if employee is invited and has accepted the invitation,\nthen the field is set to true, else in all other cases, it is false",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employee.profileIds",
            "description": "profile_ids: staff profiles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employee.timeZone",
            "description": "timezone: IANA string",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employee.hasExtendedProfiles",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employee.active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employee.displayOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Wizards"
        ]
      }
    },
    "/v1/wizards/position": {
      "get": {
        "operationId": "Wizards_GetWizardPosition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetWizardPositionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Wizards"
        ]
      },
      "put": {
        "operationId": "Wizards_UpdateWizardPosition",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateWizardPositionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "wizardPosition",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Wizards"
        ]
      }
    },
    "/v1/wizards/search-business": {
      "put": {
        "operationId": "Wizards_SearchBusiness",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchBusinessResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "description": "google: input parameter\nyelp  : term parameter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "address",
            "description": "google: input parameter\nyelp  : location parameter",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "phone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "GOOGLE_BUSINESS",
              "YELP_BUSINESS",
              "ALL"
            ],
            "default": "UNDEFINED"
          }
        ],
        "tags": [
          "Wizards"
        ]
      }
    },
    "/v1/templates": {
      "put": {
        "operationId": "Templates_UpsertTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Template"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertTemplateRequest"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/templates/admin": {
      "post": {
        "operationId": "Templates_UpsertTemplateBySuperAdmin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Template"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertTemplateRequest"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/templates/render": {
      "post": {
        "operationId": "Templates_RenderTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1RenderTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RenderTemplateRequest"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/templates/reset": {
      "put": {
        "operationId": "Templates_ResetTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ResetTemplateRequest"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/templates/test/notification": {
      "post": {
        "operationId": "Templates_SendTestNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SendTestNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendTestNotificationRequest"
            }
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/templates:list": {
      "get": {
        "operationId": "Templates_ListTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appTypeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channelType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Templates"
        ]
      }
    },
    "/v1/service-tokens": {
      "get": {
        "summary": "ListServiceToken lists all the ServiceToken(s)",
        "operationId": "ServiceTokens_ListServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServiceTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          }
        ],
        "tags": [
          "ServiceTokens"
        ]
      },
      "post": {
        "summary": "CreateServiceToken creates new service token.",
        "operationId": "ServiceTokens_CreateServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateServiceTokenRequest"
            }
          }
        ],
        "tags": [
          "ServiceTokens"
        ]
      }
    },
    "/v1/service-tokens/group": {
      "get": {
        "operationId": "ServiceTokens_GetGroupInfoOfServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupInfoOfServiceTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ServiceTokens"
        ]
      }
    },
    "/v1/service-tokens/{id}": {
      "get": {
        "summary": "GetServiceToken returns the service token by its unique id.",
        "operationId": "ServiceTokens_GetServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceTokens"
        ]
      },
      "delete": {
        "summary": "DeleteServiceToken will delete the service token from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "ServiceTokens_DeleteServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteServiceTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ServiceTokens"
        ]
      }
    },
    "/v1/service-tokens/{serviceToken.id}": {
      "put": {
        "summary": "UpdateServiceToken will update the service token identified by its service token id.\nUpdate ServiceToken uses Field Mask to update specific properties of service token object",
        "operationId": "ServiceTokens_UpdateServiceToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceToken"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceToken.id",
            "description": "fields",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServiceTokensUpdateServiceTokenBody"
            }
          }
        ],
        "tags": [
          "ServiceTokens"
        ]
      }
    },
    "/v1/wrappers/mathnasium/appointment/status": {
      "patch": {
        "summary": "ChangeStudentAppointmentStatus will change the appointment status",
        "operationId": "MathnasiumWrappers_ChangeStudentAppointmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeStudentAppointmentStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeStudentAppointmentStatusRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      }
    },
    "/v1/wrappers/mathnasium/customer-account": {
      "get": {
        "summary": "GetCustomerAccount will return the mathnasium customer account details – including all guardians",
        "operationId": "MathnasiumWrappers_GetCustomerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomerAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "accountId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "post": {
        "summary": "CreateCustomerAccount will create new customer account with the provided guardian details",
        "operationId": "MathnasiumWrappers_CreateCustomerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateCustomerAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCustomerAccountRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "put": {
        "summary": "UpdateCustomerAccount will update the customer account details",
        "operationId": "MathnasiumWrappers_UpdateCustomerAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomerAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateCustomerAccountRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      }
    },
    "/v1/wrappers/mathnasium/physical-center": {
      "get": {
        "summary": "GetPhysicalCenter will return the physical center with corresponding mathnasium masters for provided center id",
        "operationId": "MathnasiumWrappers_GetPhysicalCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPhysicalCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "centerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "post": {
        "summary": "CreatePhysicalCenter will create physical centers with corresponding mathnasium masters",
        "operationId": "MathnasiumWrappers_CreatePhysicalCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreatePhysicalCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePhysicalCenterRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "put": {
        "summary": "UpdatePhysicalCenter will update physical center with corresponding mathnasium masters",
        "operationId": "MathnasiumWrappers_UpdatePhysicalCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdatePhysicalCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePhysicalCenterRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      }
    },
    "/v1/wrappers/mathnasium/student": {
      "get": {
        "summary": "GetStudentWithEnrolment will return the mathnasium account's students with enrolment",
        "operationId": "MathnasiumWrappers_GetStudentWithEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetStudentWithEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "studentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "post": {
        "summary": "CreateStudentWithEnrolment will create new student with their enrolment",
        "operationId": "MathnasiumWrappers_CreateStudentWithEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateStudentWithEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStudentWithEnrolmentRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "put": {
        "summary": "UpdateStudentWithEnrolment will update new student with their enrolment",
        "operationId": "MathnasiumWrappers_UpdateStudentWithEnrolment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateStudentWithEnrolmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateStudentWithEnrolmentRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      }
    },
    "/v1/wrappers/mathnasium/virtual-center": {
      "get": {
        "summary": "GetVirtualCenter will return the virtual center with corresponding mathnasium masters for provided center id",
        "operationId": "MathnasiumWrappers_GetVirtualCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetVirtualCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "centerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "post": {
        "summary": "CreateVirtualCenter will create virtual centers with corresponding mathnasium masters",
        "operationId": "MathnasiumWrappers_CreateVirtualCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateVirtualCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateVirtualCenterRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      },
      "put": {
        "summary": "UpdateVirtualCenter will update virtual center with corresponding mathnasium masters",
        "operationId": "MathnasiumWrappers_UpdateVirtualCenter",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateVirtualCenterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateVirtualCenterRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumWrappers"
        ]
      }
    },
    "/v1/notifications/web/parsed/{userId}": {
      "get": {
        "operationId": "WebNotifications_ListWebNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWebNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "READ",
              "UNREAD",
              "UNVIEWED"
            ],
            "default": "ALL"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebNotifications"
        ]
      }
    },
    "/v1/notifications/web/raw/{userId}": {
      "get": {
        "operationId": "WebNotifications_ListRawWebNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRawWebNotificationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "notificationStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "READ",
              "UNREAD",
              "UNVIEWED"
            ],
            "default": "ALL"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locale",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebNotifications"
        ]
      }
    },
    "/v1/notifications/web/read": {
      "patch": {
        "operationId": "WebNotifications_MarkNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1MarkNotificationRequest"
            }
          }
        ],
        "tags": [
          "WebNotifications"
        ]
      }
    },
    "/v1/notifications/web/view": {
      "patch": {
        "operationId": "WebNotifications_ViewNotification",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ViewNotificationRequest"
            }
          }
        ],
        "tags": [
          "WebNotifications"
        ]
      }
    },
    "/v1/designations": {
      "get": {
        "summary": "ListDesignation returns all the service providers of the specified\nparent.",
        "operationId": "Designations_ListDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Designation object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\ndesignation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Designations"
        ]
      },
      "post": {
        "summary": "CreateDesignation Creates a new designation",
        "operationId": "Designations_CreateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDesignationRequest"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations/{designation.id}": {
      "put": {
        "summary": "UpdateDesignation updates a designation uniquely identified by its ID.",
        "operationId": "Designations_UpdateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "designation.id",
            "description": "Id a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesignationsUpdateDesignationBody"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations/{id}": {
      "get": {
        "summary": "GetDesignation returns a designation based on its unique ID.",
        "operationId": "Designations_GetDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Designation object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\ndesignation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Designations"
        ]
      },
      "delete": {
        "summary": "DeleteDesignation deletes a designation based on its unique ID.\nNote: This method soft deletes the designation.",
        "operationId": "Designations_DeleteDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations:batchCreate": {
      "post": {
        "summary": "BatchCreateDesignation Creates a new designation",
        "operationId": "Designations_BatchCreateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDesignationRequest"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/me": {
      "get": {
        "summary": "GetUserMe returns the currently logged in user",
        "operationId": "UserProfiles_GetUserMe",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/me/data": {
      "get": {
        "summary": "GetUserData returns the currently logged in user's companies and locations",
        "operationId": "UserProfiles_GetUserData",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUserDataResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profile/email-update/{id}": {
      "post": {
        "operationId": "UserProfiles_UpdateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UserProfilesUpdateEmailBody"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/email/verification": {
      "post": {
        "operationId": "UserProfiles_SendVerificationMail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendVerificationMailRequest"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/external/verify": {
      "get": {
        "operationId": "UserProfiles_VerifyExternalToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "token",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/invited/users/{userId}": {
      "get": {
        "operationId": "UserProfiles_GetInvitedUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetInvitedUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "levelId",
            "description": "This level id is taken for userrole connection and validation",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/phone/send-otp": {
      "post": {
        "operationId": "UserProfiles_SendPhoneOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendPhoneOTPRequest"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/phone/verify-otp": {
      "post": {
        "operationId": "UserProfiles_VerifyPhoneOTP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyPhoneOTPRequest"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/{id}": {
      "get": {
        "summary": "GetUserProfile returns the user profile by its unique user id.",
        "operationId": "UserProfiles_GetUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is a uniquely identified user id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from user profile object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/{parent}": {
      "put": {
        "operationId": "UserProfiles_UpdateUserPhoneStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfilesUpdateUserPhoneStatusBody"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/user-profiles/{userProfile.id}": {
      "put": {
        "summary": "UpdateUserProfile will update the user profile identified by its user id.\nUpdate UserProfile uses Field Mask to update specific properties of user profile object\ntherefore it must have a PATCH http method",
        "operationId": "UserProfiles_UpdateUserProfile",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserProfile"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userProfile.id",
            "description": "Id is the user id which uniquely identify a user provided by user registration service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/UserProfilesUpdateUserProfileBody"
            }
          }
        ],
        "tags": [
          "UserProfiles"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow/{appointmentBookingFlowSetting.id}": {
      "post": {
        "operationId": "AppointmentBookingFlowSettings_UpsertAppointmentBookingFlowGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentBookingFlowSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      },
      "put": {
        "summary": "UpsertAppointmentBookingFlowSetting, updates appointment booking flow setting if appointment\nbooking flow setting exists of insert a appointment booking flow setting if empty\nThis will be upsert methods",
        "operationId": "AppointmentBookingFlowSettings_UpsertAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentBookingFlowSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowSettingBody"
            }
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow/{parent}": {
      "get": {
        "summary": "GetAppointmentBookingFlowSetting returns a appointment booking flow setting based on its unique id",
        "operationId": "AppointmentBookingFlowSettings_GetAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from appointment booking flow setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nappointment booking flow setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      },
      "delete": {
        "operationId": "AppointmentBookingFlowSettings_ResetAppointmentBookingFlowGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow:batch": {
      "get": {
        "summary": "BatchGetAppointmentBookingFlowSetting returns a appointment booking flow setting based on its unique id",
        "operationId": "AppointmentBookingFlowSettings_BatchGetAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAppointmentBookingFlowSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from appointment booking flow setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nappointment booking flow setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/departments": {
      "get": {
        "summary": "ListDepartment returns all the departments within a given parent like group",
        "operationId": "Departments_ListDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given department like\nits company/location.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask is the list of fields that need to be returned. Defaults to all.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "post": {
        "summary": "CreatesDepartment creates a new department",
        "operationId": "Departments_CreateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments/{department.id}": {
      "put": {
        "summary": "UpdateDepartment updates a department uniquely identified by its ID.\nUpdate department uses Field Mask to update properties of department object",
        "operationId": "Departments_UpdateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "department.id",
            "description": "Id of the department",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DepartmentsUpdateDepartmentBody"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments/{id}": {
      "get": {
        "summary": "GetDepartment returns the department based on its unique ID",
        "operationId": "Departments_GetDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the department with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Department object that has to be returned.\nIf a FieldMask object is not present then return all the field from the Department object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "delete": {
        "summary": "DeleteDepartment deletes a specific department identified by the given ID.\nNote: This method soft deletes the department.",
        "operationId": "Departments_DeleteDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of the department.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments:batchCreate": {
      "post": {
        "operationId": "Departments_BatchCreateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/service-now/incidents": {
      "get": {
        "operationId": "ServiceNow_ListServiceNowIncidents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServiceNowIncidentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServiceNow"
        ]
      }
    },
    "/v1/suppressed-emails": {
      "get": {
        "summary": "ListSuppressedEmail lists all the SuppressedEmail(s)",
        "operationId": "SuppressedEmails_ListSuppressedEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSuppressedEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "description": "email is for searching purpose",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SuppressedEmails"
        ]
      }
    },
    "/v1/suppressed-emails/validate-email/{email}": {
      "get": {
        "summary": "Validate Email will verify whether the email is suppressed or not",
        "operationId": "SuppressedEmails_ValidateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SuppressedEmails"
        ]
      }
    },
    "/v1/suppressed-emails/validate-emails:batch": {
      "post": {
        "summary": "BatchValidateEmail will verify the array of emails whether is suppressed or not",
        "operationId": "SuppressedEmails_BatchValidateEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchValidateEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchValidateEmailRequest"
            }
          }
        ],
        "tags": [
          "SuppressedEmails"
        ]
      }
    },
    "/v1/suppressed-emails/{email}": {
      "delete": {
        "summary": "DeleteSuppressedEmail will delete the suppressed email from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "SuppressedEmails_DeleteSuppressedEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "SuppressedEmails"
        ]
      }
    },
    "/v1/dynamic-links": {
      "post": {
        "summary": "CreateDynamicUseLink creates new single use link.",
        "operationId": "DynamicLinks_CreateDynamicLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLink"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDynamicLinkRequest"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/feedback/sleekplan/token": {
      "get": {
        "summary": "GetSleekPlanToken returns the sso token for sleek plan",
        "operationId": "Feedbacks_GetSleekPlanToken",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSleekPlanTokenResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Feedbacks"
        ]
      }
    },
    "/v1/discounts": {
      "get": {
        "summary": "ListDiscounts returns all the discounts of the specified parent.",
        "operationId": "Discounts_ListDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "it is a fully qualified string that contains information about the owner in\nhierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "applyAutomaticallyFilter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ApplyAutomaticallyFilter_UNSPECIFIED",
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ApplyAutomaticallyFilter_UNSPECIFIED"
          },
          {
            "name": "statusFilter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "StatusFilter_UNSPECIFIED",
              "ALL_STATUS",
              "ACTIVE_STATUS",
              "INACTIVE_STATUS",
              "EXPIRED_STATUS"
            ],
            "default": "StatusFilter_UNSPECIFIED"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DiscountOrderByFilter_UNSPECIFIED",
              "FIRST_CREATED",
              "LAST_CREATED"
            ],
            "default": "DiscountOrderByFilter_UNSPECIFIED"
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "post": {
        "summary": "Client request to create a discount\nAccepts CreateDiscountRequest which contains parent information and\ndiscount and returns newly created discount if all the validations are\npassed",
        "operationId": "Discounts_CreateDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Discount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts/code/{code}": {
      "get": {
        "summary": "GetDiscount returns a discount based on its unique code.",
        "operationId": "Discounts_GetDiscountByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Discount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "description": "Code Unique code of discount",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts/{discount.id}": {
      "put": {
        "summary": "Client request to update a discount\nAccepts UpdateDiscountRequest which is a discount and returns updated\ndiscount if all the validations are passed",
        "operationId": "Discounts_UpdateDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Discount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "discount.id",
            "description": "Unique identifier for discount",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DiscountsUpdateDiscountBody"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts/{id}": {
      "get": {
        "summary": "GetDiscount returns a discount based on its unique ID.\nID should be one that was retrieved by one of the list methods.",
        "operationId": "Discounts_GetDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Discount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id Unique discount identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      },
      "delete": {
        "summary": "Client request to delete a product",
        "operationId": "Discounts_DeleteDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Id of a discount",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "baseId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts:batch": {
      "post": {
        "summary": "to bulk import discounts list",
        "operationId": "Discounts_BatchCreateDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts:batchDeleteDiscount": {
      "put": {
        "summary": "Client request to batch delete discounts(s) of the specified ids",
        "operationId": "Discounts_BatchDeleteDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchDeleteDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts:batchGet": {
      "post": {
        "summary": "Client request to get  discounts(s) of the specified ids",
        "operationId": "Discounts_BatchGetDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts:batchStatusChangeDiscount": {
      "put": {
        "summary": "Client request to batch enable/disable discounts(s) of the specified ids",
        "operationId": "Discounts_BatchStatusChangeDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchStatusChangeDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchStatusChangeDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/discounts:share": {
      "post": {
        "operationId": "Discounts_ShareDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ShareDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ShareDiscountRequest"
            }
          }
        ],
        "tags": [
          "Discounts"
        ]
      }
    },
    "/v1/messaging/counter/list": {
      "get": {
        "summary": "ListMessageCount will return message count statistic",
        "operationId": "MessageCounter_ListMessageCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMessageCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "messageId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MessageCounter"
        ]
      }
    },
    "/v1/messaging/message/{id}": {
      "delete": {
        "summary": "DeleteMessage will deletes the message using id",
        "operationId": "MessagingService_DeleteMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MessagingService"
        ]
      }
    },
    "/v1/messaging/message/{parent}": {
      "get": {
        "summary": "ListMessage will list all the messages within the company (parent), using the\nchannel or template filters",
        "operationId": "MessagingService_ListMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMessageResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "templateId",
            "description": "optional filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MessagingService"
        ]
      },
      "post": {
        "summary": "CreateMessage will create a message with the provided template and query towards a\nchannel in the company along with the message delivery setting",
        "operationId": "MessagingService_CreateMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Message"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "message.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.title",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.queryId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.templateId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.sendingTime",
            "description": "sending_time only time (hours, minute and seconds) will be used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.stopDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.deliveryType",
            "description": "When delivery type is recurring use Frequency\nand when it is as criteria match use hourly",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ONCE",
              "RECURRING",
              "AS_CRITERIA_MATCH"
            ],
            "default": "ONCE"
          },
          {
            "name": "message.deliverySetting.stopType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NEVER",
              "SPECIFIC_DATE"
            ],
            "default": "NEVER"
          },
          {
            "name": "message.deliverySetting.limitType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NO_LIMIT",
              "MAX"
            ],
            "default": "NO_LIMIT"
          },
          {
            "name": "message.deliverySetting.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message.deliverySetting.frequency",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ],
            "default": "UNSET"
          },
          {
            "name": "message.channel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "message.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MessagingService"
        ]
      },
      "put": {
        "summary": "UpdateMessage will update a message's details e.g. title, template, query,\nsettings or channel",
        "operationId": "MessagingService_UpdateMessage",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Message"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "message.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.title",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.queryId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.templateId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "message.deliverySetting.sendingTime",
            "description": "sending_time only time (hours, minute and seconds) will be used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.stopDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "message.deliverySetting.deliveryType",
            "description": "When delivery type is recurring use Frequency\nand when it is as criteria match use hourly",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ONCE",
              "RECURRING",
              "AS_CRITERIA_MATCH"
            ],
            "default": "ONCE"
          },
          {
            "name": "message.deliverySetting.stopType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NEVER",
              "SPECIFIC_DATE"
            ],
            "default": "NEVER"
          },
          {
            "name": "message.deliverySetting.limitType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "NO_LIMIT",
              "MAX"
            ],
            "default": "NO_LIMIT"
          },
          {
            "name": "message.deliverySetting.limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "message.deliverySetting.frequency",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSET",
              "DAILY",
              "WEEKLY",
              "MONTHLY"
            ],
            "default": "UNSET"
          },
          {
            "name": "message.channel",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "message.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "updateMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MessagingService"
        ]
      }
    },
    "/v1/messaging/event/{parent}": {
      "get": {
        "summary": "ListMessagingEvent will use the provided company id (as parent id) and returns all the events in the company\nalong with all the default messaging events",
        "operationId": "MessagingEventService_ListMessagingEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMessagingEventResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MessagingEventService"
        ]
      }
    },
    "/v1/ical-feed-url/{id}": {
      "get": {
        "summary": "GetIcalFeedURL takes in ID and returns a public URL with encrypted ID",
        "operationId": "Icals_GetIcalFeedURL",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetIcalFeedURLResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Can be employee or location ID",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Icals"
        ]
      }
    },
    "/v1/icals/{id}": {
      "get": {
        "summary": "GenerateIcalContent generates ical content from id(can be employee or location id)",
        "operationId": "Icals_GenerateIcalContent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateIcalContentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Can be employee or location id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Icals"
        ]
      }
    },
    "/v1/is-blocked-email": {
      "post": {
        "operationId": "SpamHandler_IsBlockedEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IsBlockedEmailResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1IsBlockedEmailRequest"
            }
          }
        ],
        "tags": [
          "SpamHandler"
        ]
      }
    },
    "/v1/spam-report-url/get": {
      "post": {
        "operationId": "SpamHandler_GetSpamReportUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetSpamReportUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetSpamReportUrlRequest"
            }
          }
        ],
        "tags": [
          "SpamHandler"
        ]
      }
    },
    "/v1/spam-report-url/handle": {
      "post": {
        "operationId": "SpamHandler_HandleSpamReportUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1HandleSpamReportUrlRequest"
            }
          }
        ],
        "tags": [
          "SpamHandler"
        ]
      }
    },
    "/v1/channels": {
      "get": {
        "summary": "There will be no need of pagination\nLists all the channels",
        "operationId": "Channels_ListChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListChannelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Channels"
        ]
      },
      "post": {
        "summary": "Creates a channel",
        "operationId": "Channels_CreateChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateChannelRequest"
            }
          }
        ],
        "tags": [
          "Channels"
        ]
      }
    },
    "/v1/channels/{channel.id}": {
      "put": {
        "summary": "Updates the channel",
        "operationId": "Channels_UpdateChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "channel.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ChannelsUpdateChannelBody"
            }
          }
        ],
        "tags": [
          "Channels"
        ]
      }
    },
    "/v1/channels/{id}": {
      "get": {
        "summary": "Gets a channel by Id",
        "operationId": "Channels_GetChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Channel"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Channels"
        ]
      },
      "delete": {
        "summary": "Deletes a channel by Id",
        "operationId": "Channels_DeleteChannel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Channels"
        ]
      }
    },
    "/v1/activity-log-events": {
      "get": {
        "operationId": "ActivityLogEvents_GetActivityLogEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logActivityLogEvent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventFullName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ActivityLogEvents"
        ]
      }
    },
    "/v1/activity-log-events/full-names:batch": {
      "get": {
        "operationId": "ActivityLogEvents_BatchGetActivityLogEventsByFullName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logBatchGetActivityLogEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventFullNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogEvents"
        ]
      }
    },
    "/v1/activity-log-events/ids:batch": {
      "get": {
        "operationId": "ActivityLogEvents_BatchGetActivityLogEventsById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logBatchGetActivityLogEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogEvents"
        ]
      }
    },
    "/v1/activity-log-events:list": {
      "get": {
        "operationId": "ActivityLogEvents_ListActivityLogEvents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logListActivityLogEventsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ActivityLogEvents"
        ]
      }
    },
    "/v1/activity-log-templates": {
      "get": {
        "operationId": "ActivityLogTemplates_GetActivityLogTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logActivityLogTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "eventFullName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ActivityLogTemplates"
        ]
      }
    },
    "/v1/activity-log-templates/event-full-names:batch": {
      "get": {
        "operationId": "ActivityLogTemplates_BatchGetActivityLogTemplatesByEventFullName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logBatchGetActivityLogTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "eventFullNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogTemplates"
        ]
      }
    },
    "/v1/activity-log-templates/ids:batch": {
      "get": {
        "operationId": "ActivityLogTemplates_BatchGetActivityLogTemplatesById",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logBatchGetActivityLogTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogTemplates"
        ]
      }
    },
    "/v1/activity-log-templates:list": {
      "get": {
        "operationId": "ActivityLogTemplates_ListActivityLogTemplates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logListActivityLogTemplatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ActivityLogTemplates"
        ]
      }
    },
    "/v1/activity-logs": {
      "get": {
        "summary": "ListActivityLog lists all the ActivityLog(s)",
        "operationId": "ActivityLogs_ListActivityLog",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logListActivityLogReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.ipAddress",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.activityLogEventId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.displayEventName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogs"
        ]
      }
    },
    "/v1/activity-logs/activity:batch": {
      "get": {
        "operationId": "ActivityLogs_BatchGetActivityLogsOfActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logBatchGetActivityLogsOfActivityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "activityIds",
            "description": "no need for pagination as activity corresponding to\n few activity-sources and not whole application",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ActivityLogs"
        ]
      }
    },
    "/v1/activity-logs/{activityId}": {
      "get": {
        "operationId": "ActivityLogs_ListActivityLogsOfActivity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/activity_logListActivityLogResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "tags": [
          "ActivityLogs"
        ]
      }
    },
    "/v1/area-codes": {
      "get": {
        "summary": "There will be no need of pagination\nLists all the Area Codes",
        "operationId": "AreaCodes_ListAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAreaCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      },
      "post": {
        "summary": "Creates an area code",
        "operationId": "AreaCodes_CreateAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AreaCode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAreaCodeRequest"
            }
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      }
    },
    "/v1/area-codes/{areaCode.id}": {
      "put": {
        "summary": "Updates the area code",
        "operationId": "AreaCodes_UpdateAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AreaCode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "areaCode.id",
            "description": "Id of the Area Code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AreaCodesUpdateAreaCodeBody"
            }
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      }
    },
    "/v1/area-codes/{id}": {
      "get": {
        "summary": "Gets an Area Code by Id",
        "operationId": "AreaCodes_GetAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AreaCode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      },
      "delete": {
        "summary": "Deletes a area-code by Id",
        "operationId": "AreaCodes_DeleteAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      }
    },
    "/v1/area-codes:batchGet": {
      "post": {
        "summary": "Gets all the Area Codes by their Ids",
        "operationId": "AreaCodes_BatchGetAreaCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAreaCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetAreaCodeRequest"
            }
          }
        ],
        "tags": [
          "AreaCodes"
        ]
      }
    },
    "/v1/starreds": {
      "get": {
        "operationId": "Starreds_ListStarred",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListStarredResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the  owner in hierarchical manner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Starreds"
        ]
      },
      "post": {
        "operationId": "Starreds_CreateStarred",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Starred"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateStarredRequest"
            }
          }
        ],
        "tags": [
          "Starreds"
        ]
      }
    },
    "/v1/starreds/{id}": {
      "get": {
        "operationId": "Starreds_GetStarred",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Starred"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Starreds"
        ]
      }
    },
    "/v1/starreds/{starred.id}": {
      "put": {
        "operationId": "Starreds_UpdateStarred",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Starred"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "starred.id",
            "description": "parent location",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/StarredsUpdateStarredBody"
            }
          }
        ],
        "tags": [
          "Starreds"
        ]
      }
    },
    "/v1/reply": {
      "post": {
        "operationId": "ReplyService_CreateReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Reply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReplyRequest"
            }
          }
        ],
        "tags": [
          "ReplyService"
        ]
      },
      "put": {
        "operationId": "ReplyService_UpdateReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Reply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateReplyRequest"
            }
          }
        ],
        "tags": [
          "ReplyService"
        ]
      }
    },
    "/v1/reply/{id}": {
      "get": {
        "operationId": "ReplyService_GetReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Reply"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReplyService"
        ]
      },
      "delete": {
        "operationId": "ReplyService_DeleteReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ReplyService"
        ]
      }
    },
    "/v1/reply:batch": {
      "post": {
        "operationId": "ReplyService_BatchCreateReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateReplyRequest"
            }
          }
        ],
        "tags": [
          "ReplyService"
        ]
      }
    },
    "/v1/reply:list": {
      "get": {
        "operationId": "ReplyService_ListReply",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReplyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "reviewId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ReplyService"
        ]
      }
    },
    "/v1/short-urls": {
      "get": {
        "summary": "ListShortUrl lists all the ShortUrl(s)",
        "operationId": "ShortUrls_ListShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListShortUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "shortUrlType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "LOCATION",
              "COMPANY",
              "EMPLOYEE",
              "RESOURCE",
              "SERVICE",
              "RESOURCE_TYPE",
              "MEMBERSHIP"
            ],
            "default": "UNSPECIFIED"
          },
          {
            "name": "itemId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      },
      "post": {
        "summary": "CreateShortUrl creates new short url.",
        "operationId": "ShortUrls_CreateShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ShortUrl"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateShortUrlRequest"
            }
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      }
    },
    "/v1/short-urls/check/{shortUrlValue}": {
      "get": {
        "operationId": "ShortUrls_CheckShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckShortUrlResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "shortUrlValue",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      }
    },
    "/v1/short-urls/url-info/{url}": {
      "get": {
        "operationId": "ShortUrls_GetUrlInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUrlInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      }
    },
    "/v1/short-urls/{id}": {
      "get": {
        "summary": "GetShortUrl returns the short url by its unique id.",
        "operationId": "ShortUrls_GetShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ShortUrl"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      },
      "delete": {
        "summary": "DeleteShortUrl will delete the short url from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "ShortUrls_DeleteShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      }
    },
    "/v1/short-urls/{shortUrl.id}": {
      "put": {
        "summary": "UpdateShortUrl will update the short url identified by its short url id.\nUpdate ShortUrl uses Field Mask to update specific properties of short url object",
        "operationId": "ShortUrls_UpdateShortUrl",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ShortUrl"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "shortUrl.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ShortUrlsUpdateShortUrlBody"
            }
          }
        ],
        "tags": [
          "ShortUrls"
        ]
      }
    },
    "/v1/notes": {
      "get": {
        "summary": "ListNote return all the Notes of given parent",
        "operationId": "Notes_ListNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the  owner in hierarchical manner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "noteType",
            "description": "Type of note",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "ALL_EXCEPT_CUSTOMER"
            ],
            "default": "ALL"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getPrivate",
            "description": "get private note",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allStaff",
            "description": "get all staff notes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusType",
            "description": "Note is public or private or any",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "ANY"
            ],
            "default": "PUBLIC"
          },
          {
            "name": "against",
            "description": "Note is against",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "againstIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "typeId",
            "description": "Note associated with which type (appointment , customer )",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appTypeName",
            "description": "app type name is the name of the app for which note is created",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "appTypeId",
            "description": "app type id is the id of the app for which note is created",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Notes"
        ]
      },
      "post": {
        "summary": "CreateNote creates a new Note",
        "operationId": "Notes_CreateNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Note"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateNoteRequest"
            }
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/v1/notes/{id}": {
      "get": {
        "summary": "GetNote takes Note id as an argument and returns the Note\nobject",
        "operationId": "Notes_GetNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Note"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of note",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getPrivate",
            "description": "get private notes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allStaff",
            "description": "get all staff notes",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Notes"
        ]
      },
      "delete": {
        "summary": "DeleteNote deletes a specific Note identified by the passed ID.\nThis method will only soft delete the note",
        "operationId": "Notes_DeleteNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "ID of note",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/v1/notes/{note.id}": {
      "put": {
        "summary": "UpdateNote updates a Note uniquely identified by its ID and\nreturns the updated Note",
        "operationId": "Notes_UpdateNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Note"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "note.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotesUpdateNoteBody"
            }
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/v1/notes:batch": {
      "post": {
        "summary": "BatchCreateNotes creates multiple new Notes",
        "operationId": "Notes_BatchCreateNotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateNotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateNotesRequest"
            }
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/v1/notes:batchGet": {
      "post": {
        "summary": "BatchGetNote will give the list of all the note specified by\nthe given IDs",
        "operationId": "Notes_BatchGetNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetNoteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetNoteRequest"
            }
          }
        ],
        "tags": [
          "Notes"
        ]
      }
    },
    "/v1/settings/customer": {
      "delete": {
        "operationId": "CustomerSettings_DeleteCustomerSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "titles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      }
    },
    "/v1/settings/customer/settings:batch": {
      "put": {
        "operationId": "CustomerSettings_BatchUpsertCustomerSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertCustomerSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertCustomerSettingRequest"
            }
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      }
    },
    "/v1/settings/customer/{customerSetting.id}": {
      "post": {
        "operationId": "CustomerSettings_UpsertCustomerGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomerSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerSettingsUpsertCustomerGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      },
      "put": {
        "operationId": "CustomerSettings_UpsertCustomerSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomerSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerSettingsUpsertCustomerSettingBody"
            }
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      }
    },
    "/v1/settings/customer/{parent}": {
      "get": {
        "operationId": "CustomerSettings_GetCustomerSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomerSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      },
      "delete": {
        "operationId": "CustomerSettings_ResetCustomerGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CustomerSettings"
        ]
      }
    },
    "/v1/extended-fields": {
      "get": {
        "summary": "ListExtendedField lists all the ExtendedField(s)",
        "operationId": "ExtendedFields_ListExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListExtendedFieldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      },
      "post": {
        "summary": "CreateExtendedField creates new extended field.",
        "operationId": "ExtendedFields_CreateExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExtendedField"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateExtendedFieldRequest"
            }
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      }
    },
    "/v1/extended-fields/{extendedField.id}": {
      "put": {
        "summary": "UpdateExtendedField will update the extended field identified by its extended field id.\nUpdate ExtendedField uses Field Mask to update specific properties of extended field object",
        "operationId": "ExtendedFields_UpdateExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExtendedField"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "extendedField.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ExtendedFieldsUpdateExtendedFieldBody"
            }
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      }
    },
    "/v1/extended-fields/{id}": {
      "get": {
        "summary": "GetExtendedField returns the extended field by its unique id.",
        "operationId": "ExtendedFields_GetExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExtendedField"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      },
      "delete": {
        "summary": "DeleteExtendedField will delete the extended field from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "ExtendedFields_DeleteExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      }
    },
    "/v1/extended-fields/{parent}/app-name": {
      "get": {
        "summary": "GetExtendedFieldByAppName returns the extended field by parent and app_name(module_name)",
        "operationId": "ExtendedFields_GetExtendedFieldByAppName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ExtendedField"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "appName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      }
    },
    "/v1/extended-fields:batchGet": {
      "get": {
        "summary": "Gets all the ExtendedField(s) by their ids",
        "operationId": "ExtendedFields_BatchGetExtendedField",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetExtendedFieldResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFields"
        ]
      }
    },
    "/v1/acceptance": {
      "get": {
        "operationId": "Acceptances_ListAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAcceptanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "signerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask defines the object properties which needs to be returned as output.\nIf passed empty than all properties are returned",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      },
      "post": {
        "summary": "Create acceptance when a signer accepts a policy",
        "operationId": "Acceptances_CreateAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Acceptance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAcceptanceRequest"
            }
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    },
    "/v1/acceptance/check": {
      "get": {
        "summary": "ListUnacceptedPolicies lists all the policies linked to the provided sources that are not\naccepted by the user (signer)",
        "operationId": "Acceptances_ListUnacceptedPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUnacceptedPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "signerId",
            "description": "Signer contains information of the signer.\n\nempty in case of guest login",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "company id in parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "description": "source_ids are the ids of the sources attached to any policy.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    },
    "/v1/links": {
      "post": {
        "summary": "UpsertResourceLinks creates new links",
        "operationId": "Links_UpsertResourceLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertResourceLinksRequest"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links/batch/create": {
      "post": {
        "operationId": "Links_BatchCreateLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links/batch/delete": {
      "put": {
        "operationId": "Links_BatchDeleteLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links/bulk:list": {
      "post": {
        "summary": "BulkGetAllLinksOfResource returns the list of all links of all resources",
        "operationId": "Links_BulkGetAllLinksOfResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkGetAllLinksOfResourceRequest"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links/validate": {
      "post": {
        "operationId": "Links_ValidateLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links:list": {
      "get": {
        "summary": "ListLinks returns the list of specific links of a particular resource",
        "operationId": "Links_ListLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "firstResourceId",
            "description": "First Resource id is the owner in hierarchical manner for first resource",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "secondResourceId",
            "description": "Second Resource id is the owner in hierarchical manner for second resource",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "just for rights",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkType",
            "description": "Type of link - optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/links:listAll": {
      "get": {
        "summary": "ListAllLinksOfParent returns the list of all links of a particular resource",
        "operationId": "Links_ListAllLinksOfParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LinkLists"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "firstResourceParent",
            "description": "First Resource Parent is the owner in hierarchical manner for first resource",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "secondResourceParent",
            "description": "Second Resource Parent is the owner in hierarchical manner for second resource",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "linkType",
            "description": "Type of link - optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Links"
        ]
      }
    },
    "/v1/module-licenses": {
      "get": {
        "operationId": "ModuleLicenseService_ListModuleLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListModuleLicenseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModuleLicenseService"
        ]
      }
    },
    "/v1/module-licenses/{slug}": {
      "get": {
        "operationId": "ModuleLicenseService_GetModuleLicense",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ModuleLicense"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ModuleLicenseService"
        ]
      }
    },
    "/v1/buyer-organizations": {
      "get": {
        "operationId": "BuyerOrganizations_ListBuyerOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuyerOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "Name"
            ],
            "default": "CreatedOn"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      },
      "post": {
        "operationId": "BuyerOrganizations_CreateBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuyerOrganization"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateBuyerOrganizationRequest"
            }
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/accept-customer-invite": {
      "post": {
        "summary": "AcceptCustomerInviteToBuyerOrganization - This endpoint will require data code to be provided",
        "operationId": "BuyerOrganizations_AcceptCustomerInviteToBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AcceptCustomerInviteToBuyerOrganizationRequest"
            }
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/customers-owned": {
      "get": {
        "summary": "ListCustomersOwnedBuyerOrganizations - This endpoint will be used to get the buyer organizations of the customers where customer is Buyer Organization Owner",
        "operationId": "BuyerOrganizations_ListCustomersOwnedBuyerOrganizations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomersOwnedBuyerOrganizationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/invite-customer": {
      "post": {
        "operationId": "BuyerOrganizations_InviteCustomerToBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InviteCustomerToBuyerOrganizationRequest"
            }
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/{buyerOrganization.id}": {
      "put": {
        "operationId": "BuyerOrganizations_UpdateBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuyerOrganization"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerOrganization.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BuyerOrganizationsUpdateBuyerOrganizationBody"
            }
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/{buyerOrganizationId}/admins": {
      "get": {
        "operationId": "BuyerOrganizations_ListBuyerOrganizationAdmins",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuyerOrganizationAdminsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerOrganizationId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/{buyerOrganizationId}/customers/{customerId}": {
      "delete": {
        "operationId": "BuyerOrganizations_DeleteCustomerUnderBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerOrganizationId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/buyer-organizations/{id}": {
      "get": {
        "operationId": "BuyerOrganizations_GetBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BuyerOrganizationWithAccountOwner"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "includeDeleted",
            "description": "since this filter is used by background",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      },
      "delete": {
        "operationId": "BuyerOrganizations_DeleteBuyerOrganization",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/customers/{customerId}/buyer-organizations": {
      "get": {
        "operationId": "BuyerOrganizations_ListBuyerOrganizationsOfCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBuyerOrganizationsOfCustomerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "BuyerOrganizations"
        ]
      }
    },
    "/v1/settings/template/{parent}": {
      "get": {
        "operationId": "TemplateSettings_GetTemplateSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TemplateSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "TemplateSettings"
        ]
      },
      "delete": {
        "operationId": "TemplateSettings_ResetTemplateGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "TemplateSettings"
        ]
      }
    },
    "/v1/settings/template/{setting.id}": {
      "put": {
        "operationId": "TemplateSettings_UpsertTemplateSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TemplateSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "setting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateSettingsUpsertTemplateSettingBody"
            }
          }
        ],
        "tags": [
          "TemplateSettings"
        ]
      }
    },
    "/v1/settings/template/{templateSetting.id}": {
      "post": {
        "operationId": "TemplateSettings_UpsertTemplateGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TemplateSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templateSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/TemplateSettingsUpsertTemplateGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "TemplateSettings"
        ]
      }
    },
    "/v1/data-codes/{code}": {
      "get": {
        "operationId": "DataCodes_GetDataFromCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDataFromCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "DataCodes"
        ]
      }
    },
    "/v1/notification-logs/{parent}": {
      "get": {
        "operationId": "NotificationLogs_NotificationReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "channelType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "query",
            "description": "search query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recipientType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Unknown",
              "Admin",
              "Client",
              "User"
            ],
            "default": "Unknown"
          },
          {
            "name": "notificationAddress",
            "description": "email or phone number",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "description": "pagination related fields",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "NotificationLogs"
        ]
      }
    },
    "/v1/review-helpful": {
      "get": {
        "summary": "ListReviewHelpful lists all the ReviewHelpful(s)",
        "operationId": "ReviewHelpfulService_ListReviewHelpful",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReviewHelpfulResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.reviewIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ReviewHelpfulService"
        ]
      },
      "post": {
        "summary": "SetReviewHelpfulStatus sets review helpful status",
        "operationId": "ReviewHelpfulService_SetReviewHelpfulStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewHelpful"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReviewHelpful"
            }
          }
        ],
        "tags": [
          "ReviewHelpfulService"
        ]
      }
    },
    "/v1/review:batchCreate": {
      "post": {
        "operationId": "Reviews_BatchCreateReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateReviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateReviewRequest"
            }
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews": {
      "get": {
        "summary": "Called from client side",
        "operationId": "Reviews_BatchReviewsByEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appEventIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxRating",
            "description": "will be applied on overall rating",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "minRating",
            "description": "will be applied on overall rating",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "description": "reviewer name or email matching",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "starred",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Reviews"
        ]
      },
      "post": {
        "operationId": "Reviews_CreateReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Review"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateReviewRequest"
            }
          }
        ],
        "tags": [
          "Reviews"
        ]
      },
      "put": {
        "operationId": "Reviews_UpsertReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Review"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertReviewRequest"
            }
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews-Setting:list": {
      "get": {
        "operationId": "ReviewSettings_GetReviewSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReviewSettings"
        ]
      }
    },
    "/v1/reviews-average-rating:list": {
      "get": {
        "operationId": "AverageRatings_GetAverageRating",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AverageRating"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AverageRatings"
        ]
      }
    },
    "/v1/reviews-page-setting": {
      "put": {
        "operationId": "ReviewPageSettings_UpsertReviewPageSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewPageSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertReviewPageSettingRequest"
            }
          }
        ],
        "tags": [
          "ReviewPageSettings"
        ]
      }
    },
    "/v1/reviews-page-setting:list": {
      "get": {
        "operationId": "ReviewPageSettings_GetReviewPageSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewPageSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ReviewPageSettings"
        ]
      }
    },
    "/v1/reviews-setting": {
      "put": {
        "operationId": "ReviewSettings_UpsertReviewSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertReviewSettingRequest"
            }
          }
        ],
        "tags": [
          "ReviewSettings"
        ]
      }
    },
    "/v1/reviews/list/{parent}": {
      "get": {
        "summary": "In client side we need to filter out with userId and customer Id\nEach filter should be public",
        "operationId": "Reviews_ListReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.appIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.query",
            "description": "reviewer name or email matching",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.starred",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filter.primaryFilterId",
            "description": "TODO will replace it later with json",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.primaryFilterType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secondaryFilterId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.secondaryFilterType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.operator",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "GREATER",
              "LESS",
              "EQUAL",
              "GREATER_EQUAL",
              "LESS_EQUAL"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "filter.overallRating",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.timeslot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "filter.timeslot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "sortOrder",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DEFAULT",
              "HIGHEST_RATING",
              "LOWEST_RATING",
              "NEWEST"
            ],
            "default": "DEFAULT"
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/mail": {
      "post": {
        "operationId": "Reviews_SendReviewMail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendReviewMailRequest"
            }
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/starred": {
      "put": {
        "operationId": "Reviews_ChangeReviewStarredStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ChangeReviewStarredStatusRequest"
            }
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/status/{dataCodeId}": {
      "get": {
        "operationId": "Reviews_ReviewStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/{appEventId}": {
      "get": {
        "summary": "Called from client side",
        "operationId": "Reviews_ListReviewsByEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReviewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appEventId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "maxRating",
            "description": "will be applied on overall rating",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "minRating",
            "description": "will be applied on overall rating",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "query",
            "description": "reviewer name or email matching",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "starred",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/{id}": {
      "get": {
        "operationId": "Reviews_GetReview",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Review"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/reviews/{userId}": {
      "get": {
        "summary": "TODO it should not be public\nuser",
        "operationId": "Reviews_ListReviewsByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListReviewsByUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Reviews"
        ]
      }
    },
    "/v1/settings/booking-portal/locations/{companyId}": {
      "get": {
        "operationId": "BookingPortalSettings_ListBookingPortalSettingOfLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBookingPortalSettingOfLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal/{bookingPortalSetting.id}": {
      "post": {
        "operationId": "BookingPortalSettings_UpsertBookingPortalGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "bookingPortalSetting.id",
            "description": "settings are on company/location level",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookingPortalSettingsUpsertBookingPortalGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      },
      "put": {
        "summary": "UpsertBookingPortalSetting,\nupdates booking-portal-setting if settings exist\nelse insert a booking-portal-setting if empty for location",
        "operationId": "BookingPortalSettings_UpsertBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "bookingPortalSetting.id",
            "description": "settings are on company/location level",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookingPortalSettingsUpsertBookingPortalSettingBody"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal/{parent}": {
      "get": {
        "summary": "GetBookingPortalSetting returns a booking-portal-setting of location\nalso create default setting if not found - open",
        "operationId": "BookingPortalSettings_GetBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from booking-portal-setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nbooking-portal-setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      },
      "delete": {
        "operationId": "BookingPortalSettings_ResetBookingPortalGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal:batch": {
      "put": {
        "summary": "BatchUpsertBookingPortalSetting,\nupdates booking-portal-setting if settings exist\nelse insert a booking-portal-setting if empty for location",
        "operationId": "BookingPortalSettings_BatchUpsertBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertBookingPortalSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertBookingPortalSettingRequest"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/cart/apply/discount/{customerId}": {
      "put": {
        "summary": "apply/override discount on cart",
        "operationId": "CartService_CartApplyDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartServiceCartApplyDiscountBody"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/buyer/guest/{buyerId}": {
      "get": {
        "summary": "Retrieve cart of user/buyer using guest login flow",
        "operationId": "CartService_GuestCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "location-id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/buyer/{buyerId}": {
      "get": {
        "summary": "Retrieve cart of logged-in user/buyer",
        "operationId": "CartService_GetCartOfBuyer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerId",
            "description": "customer_id of business",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "cartType",
            "description": "get client/admin side cart of customer",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CartType_UNSPECIFIED",
              "CLIENT_SIDE",
              "ADMIN_SIDE"
            ],
            "default": "CartType_UNSPECIFIED"
          },
          {
            "name": "parent",
            "description": "location-id",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/items/{cartId}": {
      "delete": {
        "summary": "Delete items in cart using cart and items identifier corresponding to customer",
        "operationId": "CartService_DeleteCartItems",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cartId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "itemIds",
            "description": "if empty, delete all items",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/list/{parent}": {
      "get": {
        "summary": "List all carts created on admin-side within a business",
        "operationId": "CartService_ListCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCartResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/payment-info": {
      "get": {
        "operationId": "CartService_GetCartPaymentInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCartPaymentInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "cartId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/payment-sources/add": {
      "post": {
        "operationId": "CartService_AddCartPaymentSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddCartPaymentSourcesRequest"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/payment-sources/remove": {
      "post": {
        "operationId": "CartService_RemoveCartPaymentSources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveCartPaymentSourcesRequest"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/remove/discount/{customerId}": {
      "put": {
        "operationId": "CartService_CartRemoveDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartServiceCartRemoveDiscountBody"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/upsert": {
      "post": {
        "summary": "Upsert cart for logged-in user/buyer, used to add/override items to cart",
        "operationId": "CartService_UpsertCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertCartRequest"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/upsert/guest": {
      "post": {
        "summary": "Upsert cart for guest-login user/buyer, used to add/override items to cart",
        "operationId": "CartService_UpsertGuestCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertCartRequest"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/validate/discount/{customerId}": {
      "post": {
        "summary": "Validate public & automatically applicable discounts corresponding to cart",
        "operationId": "CartService_ValidatePublicDiscount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ValidateDiscountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "description": "customer_id unique id of customer who will be consuming this discount",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CartServiceValidatePublicDiscountBody"
            }
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/cart/{id}": {
      "get": {
        "summary": "Retrieve cart using its unique identifier",
        "operationId": "CartService_GetCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Cart"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CartService"
        ]
      },
      "delete": {
        "summary": "Delete cart using its unique identifier",
        "operationId": "CartService_DeleteCart",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CartService"
        ]
      }
    },
    "/v1/gift-certificate": {
      "post": {
        "summary": "Client request to create a gift certificate\nAccepts CreateGiftCertificateRequest which contains parent information and\nGiftCertificate and returns newly created GiftCertificate if all the\nvalidations are passed",
        "operationId": "GiftCertificates_CreateGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GiftCertificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateGiftCertificateRequest"
            }
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/gift-certificate/{giftCertificate.id}": {
      "put": {
        "summary": "UpdateGiftCertificate updates a GiftCertificate, uniquely identified by its\nID and returns the updated GiftCertificate",
        "operationId": "GiftCertificates_UpdateGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GiftCertificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "giftCertificate.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "giftCertificate.title",
            "description": "Title of the gift certificate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.description",
            "description": "description of the gift certificate",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.gallery.default.thumbImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.gallery.default.largeImage",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.metadata",
            "description": "metadata for storing additional information like : color\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.settings.numberForSale",
            "description": "How many gift cards to be sold on client side",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "giftCertificate.settings.variantMinAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "giftCertificate.settings.variantMinAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.settings.variantMinAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "giftCertificate.settings.variantMaxAmount.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "giftCertificate.settings.variantMaxAmount.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.settings.variantMaxAmount.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "giftCertificate.settings.expireDuration",
            "description": "Till how much time, the gift certificate can be used after purchase in days",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.settings.purchaseWindowStart",
            "description": "From which date, the gift certificate can be purchased",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "giftCertificate.settings.purchaseWindowEnd",
            "description": "Till which date, the gift certificate can be purchased",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "giftCertificate.settings.allowClientImage",
            "description": "Allow client to modify the image",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "giftCertificate.enableForSale",
            "description": "Is the gift certificate allowed for purchase from client side",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "giftCertificate.eventType",
            "description": "Used to group gift certificates by an event : eg: halloween",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.createdOn",
            "description": "time at which the gift certificate was created",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "giftCertificate.batchId",
            "description": "used to group the gift certificate when created by a batch request",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.baseId",
            "description": "used in linking gift certificates at different levels",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "giftCertificate.consumedCount",
            "description": "specifies the consumed count",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "name": "updateMask",
            "description": "update mask := \"name\", \"gallery\", \"metadata\", \"variants\"",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "baseId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/gift-certificate/{id}": {
      "get": {
        "summary": "GiftCertificate takes the GiftCertificate id as input and returns the",
        "operationId": "GiftCertificates_GetGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GiftCertificate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      },
      "delete": {
        "summary": "DeleteGiftCertificate deletes a specific GiftCertificate identified by the\npassed ID. This method will only soft delete the GiftCertificate",
        "operationId": "GiftCertificates_DeleteGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "baseId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/gift-certificate:batch": {
      "post": {
        "summary": "Client request to create gift-certificate(s)\nAccepts BatchCreateGiftCertificateRequest which contains parent\ninformation and list of gift-certificate and returns list of newly created\ngift-certificate(s) if all the validations are passed",
        "operationId": "GiftCertificates_BatchCreateGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateGiftCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateGiftCertificateRequest"
            }
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/gift-certificate:batchGet": {
      "post": {
        "summary": "BatchGetGiftCertificates will give the list of all the GiftCertificate\nspecified by the given IDs",
        "operationId": "GiftCertificates_BatchGetGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetGiftCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetGiftCertificateRequest"
            }
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/gift-certificates": {
      "get": {
        "summary": "ListGiftCertificates list the all the GiftCertificate of the given parent",
        "operationId": "GiftCertificates_ListGiftCertificate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListGiftCertificateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given gift-certificate\nlike business/group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "GiftCertificates"
        ]
      }
    },
    "/v1/top-up": {
      "post": {
        "operationId": "TopUps_CreateTopUp",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1TopUp"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateTopUpRequest"
            }
          }
        ],
        "tags": [
          "TopUps"
        ]
      }
    },
    "/v1/resource-types": {
      "get": {
        "summary": "There will no need of pagination",
        "operationId": "ResourceTypes_ListResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceTypesType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "IDENTIFIABLE",
              "NON_IDENTIFIABLE"
            ],
            "default": "IDENTIFIABLE"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from user profile object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "levelOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "templateId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      },
      "post": {
        "operationId": "ResourceTypes_CreateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateResourceTypeRequest"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/count/{parent}": {
      "get": {
        "operationId": "ResourceTypes_GetResourceTypeCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourceTypeCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/order/{resourceTypeId}": {
      "put": {
        "operationId": "ResourceTypes_UpdateResourceTypeDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTypesUpdateResourceTypeDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/{id}": {
      "get": {
        "operationId": "ResourceTypes_GetResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique Identifier to represent resource-type",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from user profile object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      },
      "delete": {
        "operationId": "ResourceTypes_DeleteResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/{resourceType.id}": {
      "put": {
        "operationId": "ResourceTypes_UpdateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceType.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTypesUpdateResourceTypeBody"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types:batchCreate": {
      "post": {
        "operationId": "ResourceTypes_BatchCreateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceTypeRequest"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/addons": {
      "get": {
        "operationId": "Addons_ListAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAddonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Addons"
        ]
      },
      "post": {
        "operationId": "Addons_CreateAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Addon"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAddonRequest"
            }
          }
        ],
        "tags": [
          "Addons"
        ]
      }
    },
    "/v1/addons/{addon.id}": {
      "put": {
        "operationId": "Addons_UpdateAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Addon"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "addon.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AddonsUpdateAddonBody"
            }
          }
        ],
        "tags": [
          "Addons"
        ]
      }
    },
    "/v1/addons/{id}": {
      "get": {
        "operationId": "Addons_GetAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Addon"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Addons"
        ]
      },
      "delete": {
        "operationId": "Addons_DeleteAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Addons"
        ]
      }
    },
    "/v1/addons:batchGet": {
      "post": {
        "operationId": "Addons_BatchGetAddon",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAddonResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetAddonRequest"
            }
          }
        ],
        "tags": [
          "Addons"
        ]
      }
    },
    "/v1/sessions": {
      "get": {
        "summary": "ListSession lists all the Session(s)",
        "operationId": "UserSessions_ListUserSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUserSessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "UserSessions"
        ]
      }
    },
    "/v1/sessions/{id}": {
      "delete": {
        "summary": "DeleteSession will delete the session from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "UserSessions_RevokeUserSession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "UserSessions"
        ]
      }
    },
    "/v1/notification-event-settings/event/{businessId}": {
      "get": {
        "operationId": "NotificationEventSettingsService_GetNotificationEventSettingByEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EventSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "eventType",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationEventSettingsService"
        ]
      },
      "put": {
        "operationId": "NotificationEventSettingsService_UpsertNotificationEventSettingByEvent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1EventSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationEventSettingsServiceUpsertNotificationEventSettingByEventBody"
            }
          }
        ],
        "tags": [
          "NotificationEventSettingsService"
        ]
      }
    },
    "/v1/notification-event-settings/{businessId}": {
      "get": {
        "operationId": "NotificationEventSettingsService_GetNotificationEventSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationEventSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationEventSettingsService"
        ]
      },
      "put": {
        "operationId": "NotificationEventSettingsService_UpsertNotificationEventSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationEventSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationEventSettingsServiceUpsertNotificationEventSettingsBody"
            }
          }
        ],
        "tags": [
          "NotificationEventSettingsService"
        ]
      }
    },
    "/v1/notification-receivers/batch/upsert": {
      "put": {
        "operationId": "NotificationReceivers_BatchUpsertNotificationReceiver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertNotificationReceiverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertNotificationReceiverRequest"
            }
          }
        ],
        "tags": [
          "NotificationReceivers"
        ]
      }
    },
    "/v1/notification-receivers/{businessId}": {
      "get": {
        "operationId": "NotificationReceivers_ListNotificationReceiver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListNotificationReceiverResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "businessMandatory",
            "description": "business_mandatory will only be applied when it is true",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "businessEnabled",
            "description": "business_enabled will only be applied when it is true",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "channelType",
            "description": "channel_type will only be applied when it is not UNKNOWN_CHANNEL_TYPE",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "eventType",
            "description": "event_type will only be applied when it is not empty",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationReceivers"
        ]
      }
    },
    "/v1/notification-receivers/{receiver.id}": {
      "put": {
        "operationId": "NotificationReceivers_UpsertNotificationReceiver",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationReceiver"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "receiver.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationReceiversUpsertNotificationReceiverBody"
            }
          }
        ],
        "tags": [
          "NotificationReceivers"
        ]
      }
    },
    "/v1/notification-settings/{businessId}": {
      "get": {
        "operationId": "NotificationSettingService_GetNotificationSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationSettingService"
        ]
      },
      "put": {
        "operationId": "NotificationSettingService_UpsertNotificationSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationSettingServiceUpsertNotificationSettingsBody"
            }
          }
        ],
        "tags": [
          "NotificationSettingService"
        ]
      }
    },
    "/v1/company-masters": {
      "post": {
        "operationId": "CompanyMasters_CreateCompanyMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanyMaster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCompanyMasterRequest"
            }
          }
        ],
        "tags": [
          "CompanyMasters"
        ]
      }
    },
    "/v1/company-masters/{companyMaster.id}": {
      "put": {
        "operationId": "CompanyMasters_UpdateCompanyMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanyMaster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyMaster.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompanyMastersUpdateCompanyMasterBody"
            }
          }
        ],
        "tags": [
          "CompanyMasters"
        ]
      }
    },
    "/v1/company-masters/{id}": {
      "get": {
        "operationId": "CompanyMasters_GetCompanyMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompanyMaster"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompanyMasters"
        ]
      },
      "delete": {
        "operationId": "CompanyMasters_DeleteCompanyMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CompanyMasters"
        ]
      }
    },
    "/v1/company_masters": {
      "get": {
        "operationId": "CompanyMasters_ListCompanyMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCompanyMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompanyMasters"
        ]
      }
    },
    "/v1/settings/matching-rules": {
      "post": {
        "operationId": "MatchingRules_CreateMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMatchingRuleRequest"
            }
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules/{id}": {
      "get": {
        "operationId": "MatchingRules_GetMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      },
      "delete": {
        "operationId": "MatchingRules_DeleteMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules/{matchingRule.id}": {
      "put": {
        "operationId": "MatchingRules_UpdateMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "matchingRule.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MatchingRulesUpdateMatchingRuleBody"
            }
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules:list": {
      "get": {
        "operationId": "MatchingRules_ListMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMatchingRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/meeting/zoom/calendar/staff/linking": {
      "put": {
        "operationId": "ZoomControllerService_UpdateZoomCalendarEmployeeLinking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateZoomCalendarEmployeeLinkingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateZoomCalendarEmployeeLinkingRequest"
            }
          }
        ],
        "tags": [
          "ZoomControllerService"
        ]
      }
    },
    "/v1/meeting/zoom/calendar/staff/linking/{businessId}": {
      "get": {
        "operationId": "ZoomControllerService_ListZoomCalendarEmployeeLinking",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListZoomCalendarEmployeeLinkingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "ZoomControllerService"
        ]
      }
    },
    "/v1/meeting/zoom/information": {
      "get": {
        "operationId": "ZoomControllerService_GetZoomInformation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ZoomInformation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "businessName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZoomControllerService"
        ]
      },
      "put": {
        "operationId": "ZoomControllerService_UpdateZoomInformation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ZoomInformation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "information.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.businessId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.hostVideo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.participantVideo",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.cnMeeting",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.inMeeting",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.joinBeforeHost",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.muteUponEntry",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.watermark",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.usePmi",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.approvalType",
            "description": "approval_type default value is NoRegistrationRequired",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AutomaticallyApprove",
              "ManuallyApprove",
              "NoRegistrationRequired"
            ],
            "default": "AutomaticallyApprove"
          },
          {
            "name": "information.setting.registrationType",
            "description": "registration_type default value is RegisteredOnceAndCanAttendAny",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UnusedSetting",
              "RegisteredOnceAndCanAttendAny",
              "NeedToRegister",
              "RegisteredOnceAndCanChooseOneOrMore"
            ],
            "default": "UnusedSetting"
          },
          {
            "name": "information.setting.audio",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.autoRecording",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.enforceLogin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.enforceLoginDomains",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.alternativeHosts",
            "description": "use alternative_hosts as single field multiple values separated by commas",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "information.setting.closeRegistration",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.waitingRoom",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.globalDialInCountries",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "information.setting.contactName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.contactEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "information.setting.registrantsEmailNotification",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.setting.meetingAuthentication",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "information.allowedServices",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "updateMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "businessName",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ZoomControllerService"
        ]
      }
    },
    "/v1/meeting/zoom/users/{integrationId}": {
      "get": {
        "operationId": "ZoomControllerService_ListZoomUsers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListZoomUsersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ZoomControllerService"
        ]
      }
    },
    "/v1/support-section/links": {
      "get": {
        "summary": "ListSupportLink lists all the SupportLink(s)",
        "operationId": "SupportLinks_ListSupportLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSupportLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "SupportLinks"
        ]
      }
    },
    "/v1/calendar/sync-calendars/employee": {
      "get": {
        "operationId": "CalendarInfo_FetchEmployeeSyncedCalendars",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchEmployeeSyncedCalendarsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "CalendarInfo"
        ]
      }
    },
    "/v1/calendar/sync-status/employees": {
      "get": {
        "operationId": "CalendarInfo_FetchCalendarSyncStatusOfEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchCalendarSyncStatusOfEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "CalendarInfo"
        ]
      }
    },
    "/v1/user-login": {
      "put": {
        "summary": "UpdateUserPassword , if a user has registered with external logins then\nthis method can be used to add a password to the user account , it can also\nbe used to update the user old password\nOnce the user has updated his password all his existing logins should be\nlogged out.",
        "operationId": "UserLoginService_UpdateUserPassword",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the unique user id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "oldPassword",
            "description": "Password to be added against the given user id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "newPassword",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "UserLoginService"
        ]
      }
    },
    "/v1/service/attach": {
      "post": {
        "operationId": "Services_ServiceAttachPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ServiceAttachPolicyRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/attach-detach": {
      "post": {
        "operationId": "Services_ServiceAttachDetachPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ServiceAttachDetachPolicyRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/detach": {
      "post": {
        "operationId": "Services_ServiceDetachPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ServiceDetachPolicyRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/locales": {
      "post": {
        "operationId": "Services_GetServiceByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServiceByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetServiceByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/locales/parent:batch": {
      "post": {
        "operationId": "Services_BatchGetServiceByParentLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceByParentLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceByParentLocaleRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/locales/upsert:batch": {
      "post": {
        "operationId": "Services_BatchServiceLocaleUpsert",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchServiceLocaleUpsertResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchServiceLocaleUpsertRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/locales:batch": {
      "post": {
        "operationId": "Services_BatchGetServiceByIdLocale",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceByIdLocaleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetServiceByIdLocaleRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/policies/list/{parent}": {
      "get": {
        "operationId": "Services_ServiceListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServiceListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "onlyActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "policyNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDefault",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isTypeAnnouncement",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/service/triggers/list": {
      "post": {
        "operationId": "Services_GetPolicyTriggers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyTriggersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {}
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services": {
      "get": {
        "operationId": "Services_ListService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in a hierarchical manner group/ location/ business (required).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After. For example, id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Service object that has to be returned.\nIf a FieldMask object is not present then return all the field from the Service object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Query is searched in Name of services",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "filters.active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filters.internal",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filters.categoryIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters.statuses",
            "description": " - UNSPECIFIED: Service status unspecified.\n - INTERNAL: Service can only be booked through the administrator portal,\ni.e., by service providers, managers, admins, etc.\n - EXTERNAL: Service can be booked from both the client booking portal and the administrator portal,\ni.e., by employees and customers.\n - LINK_ONLY: Service can only be booked by those having the unique link generated corresponding to the service.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNSPECIFIED",
                "INTERNAL",
                "EXTERNAL",
                "LINK_ONLY"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters.types",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "UNKNOWN",
                "IN_STORE",
                "VIRTUAL",
                "AT_HOME"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filters.changedSetting",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.title",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.availability",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "post": {
        "operationId": "Services_CreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateServiceRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/batch/update": {
      "put": {
        "operationId": "Services_BatchUpdateServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateServicesRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/change-setting": {
      "put": {
        "operationId": "Services_UpdateServiceChangedSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateServiceChangedSettingsRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/copy/parent": {
      "post": {
        "operationId": "Services_CopyServiceByParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CopyServiceByParentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CopyServiceByParentRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/count/{parent}": {
      "get": {
        "operationId": "Services_GetServiceCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServiceCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/employee": {
      "get": {
        "operationId": "Services_ListUnlinkedServicesOfEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "categoryId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ServiceId",
              "ServiceTitle"
            ],
            "default": "ServiceId"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/employees/count/{serviceId}": {
      "get": {
        "operationId": "Services_GetEmployeesOfServiceCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmployeesOfServiceCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/link/all": {
      "get": {
        "operationId": "Services_LinkAllEmployeesToService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "removeLink",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "removedLinkIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/link/employee": {
      "get": {
        "operationId": "Services_LinkAllServicesToEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "removeLink",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "removedLinkIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/order/{serviceId}": {
      "put": {
        "operationId": "Services_UpdateServiceDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicesUpdateServiceDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/template": {
      "post": {
        "operationId": "Services_CreateServiceFromTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateServiceFromTemplateRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/templates/bulk": {
      "post": {
        "operationId": "Services_BulkCreateServiceFromTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BulkCreateServiceFromTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BulkCreateServiceFromTemplateRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{id}": {
      "get": {
        "operationId": "Services_GetService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Service object that has to be returned.\nIf a FieldMask object is not present then return all the field from the Service object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      },
      "delete": {
        "operationId": "Services_DeleteService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services/{service.id}": {
      "put": {
        "operationId": "Services_UpdateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Service"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "service.id",
            "description": "Id is the unique identifier for the service",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ServicesUpdateServiceBody"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services:all": {
      "get": {
        "operationId": "Services_ListAllServices",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllServicesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/services:batchAdd": {
      "post": {
        "operationId": "Services_BatchCreateService",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateServiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateServiceRequest"
            }
          }
        ],
        "tags": [
          "Services"
        ]
      }
    },
    "/v1/review-mail-setting": {
      "post": {
        "summary": "UpsertAppointmentReviewMailSetting creates new  review mail setting.",
        "operationId": "ReviewMailSettings_UpsertReviewMailSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewMailSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertReviewMailSettingRequest"
            }
          }
        ],
        "tags": [
          "ReviewMailSettings"
        ]
      }
    },
    "/v1/review-mail-setting/{companyId}": {
      "get": {
        "summary": "GetReviewMailSetting returns the  review mail setting by its unique id.",
        "operationId": "ReviewMailSettings_GetReviewMailSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ReviewMailSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appNames",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ReviewMailSettings"
        ]
      }
    },
    "/v1/resources": {
      "get": {
        "summary": "Lists all the resources",
        "operationId": "Resources_ListResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeIds",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Resources"
        ]
      },
      "post": {
        "summary": "Creates a Resource of a particular resource type",
        "operationId": "Resources_BatchCreateResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceRequest"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/count/{parent}": {
      "get": {
        "operationId": "Resources_GetResourceCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourceCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/order/{resourceId}": {
      "put": {
        "operationId": "Resources_UpdateResourceDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesUpdateResourceDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/{id}": {
      "get": {
        "summary": "Gets a Resource by Id",
        "operationId": "Resources_GetResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Resource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Resources"
        ]
      },
      "delete": {
        "summary": "Deletes a resource by Id",
        "operationId": "Resources_DeleteResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/{resource.id}": {
      "put": {
        "summary": "Updates a Resource",
        "operationId": "Resources_UpdateResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Resource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesUpdateResourceBody"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/survey-intake-form-links": {
      "get": {
        "summary": "ListSurveyIntakeFormLink lists all the SurveyIntakeFormLink(s)",
        "operationId": "SurveyIntakeFormLinks_ListSurveyIntakeFormLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSurveyIntakeFormLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SurveyIntakeFormLinks"
        ]
      },
      "post": {
        "operationId": "SurveyIntakeFormLinks_UpsertSurveyIntakeFormLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertSurveyIntakeFormLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertSurveyIntakeFormLinkRequest"
            }
          }
        ],
        "tags": [
          "SurveyIntakeFormLinks"
        ]
      }
    },
    "/v1/survey-intake-form-links/batch": {
      "get": {
        "operationId": "SurveyIntakeFormLinks_BatchGetSurveyIntakeFormLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetSurveyIntakeFormLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "SurveyIntakeFormLinks"
        ]
      }
    },
    "/v1/survey-submissions": {
      "post": {
        "operationId": "SurveySubmissions_CreateSurveySubmissionsByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateSurveySubmissionByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateSurveySubmissionByDataCodeRequest"
            }
          }
        ],
        "tags": [
          "SurveySubmissions"
        ]
      }
    },
    "/v1/survey-submissions/data-code": {
      "get": {
        "operationId": "SurveySubmissions_GetSurveyDataByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SurveyDataCode"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "SurveySubmissions"
        ]
      }
    },
    "/v1/professions": {
      "get": {
        "summary": "ListProfession lists all the Profession(s)",
        "operationId": "Professions_ListProfession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProfessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/professions/name/{name}": {
      "get": {
        "summary": "GetProfessionByName returns the profession by its unique id.",
        "operationId": "Professions_GetProfessionByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Profession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/professions/{id}": {
      "get": {
        "summary": "GetProfession returns the profession by its unique id.",
        "operationId": "Professions_GetProfession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Profession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/employees": {
      "get": {
        "summary": "There will be no need of pagination\nLists all the employees",
        "operationId": "Employees_ListEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "hasExtendedProfiles",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "department",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "designation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "changedSetting",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/batch-update/status": {
      "put": {
        "operationId": "Employees_BatchUpdateEmployeeStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateEmployeeStatusRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/batch/send-welcome-mail": {
      "post": {
        "operationId": "Employees_BatchSendWelcomeMailToEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchSendWelcomeMailToEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/batch/using/userIds": {
      "get": {
        "summary": "Gets all the employees by their UserIds",
        "operationId": "Employees_BatchGetEmployeeByUserIds",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetEmployeeByUserIdsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "levelIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "userIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/change-setting": {
      "put": {
        "operationId": "Employees_UpdateEmployeeChangedSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateEmployeeChangedSettingsRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/copy/parent": {
      "post": {
        "operationId": "Employees_CopyEmployeeByParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CopyEmployeeByParentRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/email/{companyId}": {
      "get": {
        "summary": "Gets a employee by email",
        "operationId": "Employees_GetEmployeeByEmail",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Employee"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/filtered/{parent}": {
      "get": {
        "operationId": "Employees_ListFilteredEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.firstName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.lastName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.phoneNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.active",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.designation",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.department",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.hasExtendedProfiles",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.changedSetting",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.disabledLogin",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "LastName",
              "FirstName",
              "Email"
            ],
            "default": "CreatedOn"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/invite": {
      "post": {
        "summary": "Invite the employee",
        "operationId": "Employees_InviteEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1InviteEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InviteEmployeeRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/login/status/{companyId}": {
      "put": {
        "operationId": "Employees_EnableDisableEmployeeLogin",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeesEnableDisableEmployeeLoginBody"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/order/{employeeId}": {
      "put": {
        "operationId": "Employees_UpdateEmployeeDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeesUpdateEmployeeDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/password/reset": {
      "post": {
        "operationId": "Employees_EmployeePasswordReset",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1EmployeePasswordResetRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/phone/send-verification-sms": {
      "post": {
        "operationId": "Employees_SendPhoneVerificationSms",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SendPhoneVerificationSmsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SendPhoneVerificationSmsRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/phone/verify-data-code": {
      "post": {
        "operationId": "Employees_VerifyPhoneFromDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1VerifyPhoneFromDataCodeRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/re-invite": {
      "post": {
        "operationId": "Employees_ReInviteEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ReInviteEmployeeRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/reports/login": {
      "get": {
        "summary": "Report to get staff's last login details",
        "operationId": "Employees_GetEmployeeLoginReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmployeeLoginReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/revoke/invitation": {
      "post": {
        "operationId": "Employees_RevokeInvitation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RevokeInvitationRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/roles/user/{userId}/update": {
      "post": {
        "operationId": "Employees_UpdateEmployeeAssignedRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeesUpdateEmployeeAssignedRolesBody"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/toggle/invitation": {
      "post": {
        "summary": "ToggleInvitationStatus: toggles the employee invitation status of the employee id",
        "operationId": "Employees_ToggleInvitationStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ToggleInvitationStatusRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/userId/{userId}": {
      "get": {
        "operationId": "Employees_ListEmployeesByUserId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListEmployeesByUserIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/{employee.id}": {
      "put": {
        "summary": "Updates the employee",
        "operationId": "Employees_UpdateEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Employee"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employee.id",
            "description": "Id of employee",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/EmployeesUpdateEmployeeBody"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees/{id}": {
      "get": {
        "summary": "Gets a employee by Id",
        "operationId": "Employees_GetEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Employee"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      },
      "delete": {
        "summary": "Deletes a employee by Id",
        "operationId": "Employees_DeleteEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "userEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees:all": {
      "get": {
        "operationId": "Employees_ListAllEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/employees:batch": {
      "post": {
        "operationId": "Employees_BatchCreateEmployee",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateEmployeeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateEmployeeRequest"
            }
          }
        ],
        "tags": [
          "Employees"
        ]
      }
    },
    "/v1/mathnasium-service-link": {
      "post": {
        "summary": "UpsertMathnasiumServiceLink will basically create or update a mathnasium service\nlinking depending on whether it's already present in the system or not.\nThere will be only one MathnasiumServiceLink object for each service",
        "operationId": "MathnasiumMasters_UpsertMathnasiumServiceLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertMathnasiumServiceLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertMathnasiumServiceLinkRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      }
    },
    "/v1/mathnasium-service-links": {
      "get": {
        "summary": "ListMathnasiumServiceLinks returns all the MathnasiumServiceLinks under the given\nlocation_id or set of service_ids",
        "operationId": "MathnasiumMasters_ListMathnasiumServiceLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMathnasiumServiceLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      }
    },
    "/v1/mathnasium/masters": {
      "get": {
        "operationId": "MathnasiumMasters_GetMathnasiumMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMathnasiumMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customLocationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      },
      "delete": {
        "operationId": "MathnasiumMasters_DeleteMathnasiumMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteMathnasiumMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customLocationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      },
      "post": {
        "summary": "UpsertMathnasiumMaster will basically create or update a master depending on whether it's already\npresent in the system or not. A location can only have one MathnasiumMaster object.\nBut first validate location_id and custom_location_id",
        "operationId": "MathnasiumMasters_UpsertMathnasiumMaster",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertMathnasiumMasterResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertMathnasiumMasterRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      }
    },
    "/v1/mathnasium/sync/appointments": {
      "post": {
        "summary": "SyncMathnasiumAppointments is the method for Radius System of Mathnasium, to sync all the\nchanges of appointments made after a timestamp. User must be logged in to use this method",
        "operationId": "MathnasiumMasters_SyncMathnasiumAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SyncMathnasiumAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SyncMathnasiumAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "MathnasiumMasters"
        ]
      }
    },
    "/v1/resource-tier": {
      "post": {
        "operationId": "ResourceTiers_CreateResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateResourceTierRequest"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-priorities": {
      "get": {
        "operationId": "ResourceTiers_ListResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTierPrioritiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      },
      "delete": {
        "operationId": "ResourceTiers_DeleteResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-priorities/{parent}": {
      "put": {
        "summary": "Resource Tier Priorities' Endpoints",
        "operationId": "ResourceTiers_UpsertResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertResourceTierPrioritiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpsertResourceTierPrioritiesBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-settings/{parent}": {
      "put": {
        "summary": "Resource Tier Settings' Endpoints\nUpsertResourceTierSettings internally upserts the appointment booking flow settings for a given location, and create the log",
        "operationId": "ResourceTiers_UpsertResourceTierSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertResourceTierSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpsertResourceTierSettingsBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/filtered-tiers": {
      "get": {
        "operationId": "ResourceTiers_FetchFilteredTiersByLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchFilteredTiersByLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.tierEmployeeAllocation",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Unspecified",
              "Location_Based",
              "Service_Based"
            ],
            "default": "Unspecified"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/{id}": {
      "get": {
        "operationId": "ResourceTiers_GetResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from resource tier object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      },
      "delete": {
        "operationId": "ResourceTiers_DeleteResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/{resourceTier.id}": {
      "put": {
        "operationId": "ResourceTiers_UpdateResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceTier.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpdateResourceTierBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tiers": {
      "get": {
        "operationId": "ResourceTiers_ListResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTierResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceTierType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "IDENTIFIABLE_RESOURCE",
              "EMPLOYEE"
            ],
            "default": "UNSPECIFIED"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/customer-staff-links": {
      "get": {
        "operationId": "CustomerStaffLinks_ListCustomerStaffLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomerStaffLinkResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "staffIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerStaffLinks"
        ]
      },
      "post": {
        "operationId": "CustomerStaffLinks_UpsertCustomerStaffLinks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertCustomerStaffLinksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertCustomerStaffLinksRequest"
            }
          }
        ],
        "tags": [
          "CustomerStaffLinks"
        ]
      }
    },
    "/v1/profession-categories": {
      "get": {
        "summary": "ListProfessionCategory lists all the ProfessionCategory(s)",
        "operationId": "ProfessionCategories_ListProfessionCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProfessionCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ProfessionCategories"
        ]
      }
    },
    "/v1/profession-categories/{id}": {
      "get": {
        "summary": "GetProfessionCategory returns the profession category by its unique id.",
        "operationId": "ProfessionCategories_GetProfessionCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProfessionCategory"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ProfessionCategories"
        ]
      }
    },
    "/v1/webhook-preferences": {
      "get": {
        "summary": "ListWebhookPreference lists all the WebhookPreference(s)",
        "operationId": "WebhookPreferences_ListWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListWebhookPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filters.eventId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      },
      "post": {
        "summary": "CreateWebhookPreference creates new webhook preference.",
        "operationId": "WebhookPreferences_CreateWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookPreference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateWebhookPreferenceRequest"
            }
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      }
    },
    "/v1/webhook-preferences/{id}": {
      "get": {
        "summary": "GetWebhookPreference returns the webhook preference by its unique id.",
        "operationId": "WebhookPreferences_GetWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookPreference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      },
      "delete": {
        "summary": "DeleteWebhookPreference will delete the webhook preference from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "WebhookPreferences_DeleteWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      }
    },
    "/v1/webhook-preferences/{parent}": {
      "get": {
        "operationId": "WebhookPreferences_GetWebhookPreferenceByParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookPreference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      }
    },
    "/v1/webhook-preferences/{webhookPreference.id}": {
      "put": {
        "summary": "UpdateWebhookPreference will update the webhook preference identified by its webhook preference id.\nUpdate WebhookPreference uses Field Mask to update specific properties of webhook preference object",
        "operationId": "WebhookPreferences_UpdateWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1WebhookPreference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "webhookPreference.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/WebhookPreferencesUpdateWebhookPreferenceBody"
            }
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      }
    },
    "/v1/webhook-preferences:batchGet": {
      "get": {
        "summary": "Gets all the WebhookPreference(s) by their ids",
        "operationId": "WebhookPreferences_BatchGetWebhookPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetWebhookPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "WebhookPreferences"
        ]
      }
    },
    "/v1/sitback/appointments": {
      "get": {
        "operationId": "SitbackApiEndpoints_ListSitbackAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSitbackAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent can have either group, location, company",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeslot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeslot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AppointmentStartTime",
              "AppointmentCreatedOn"
            ],
            "default": "AppointmentStartTime"
          }
        ],
        "tags": [
          "SitbackApiEndpoints"
        ]
      }
    },
    "/v1/sitback/customers": {
      "get": {
        "operationId": "SitbackApiEndpoints_ListSitbackCustomers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSitbackCustomersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "only company id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "LastName",
              "FirstName",
              "Email"
            ],
            "default": "CreatedOn"
          }
        ],
        "tags": [
          "SitbackApiEndpoints"
        ]
      }
    },
    "/v1/sitback/employees": {
      "get": {
        "operationId": "SitbackApiEndpoints_ListSitbackEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSitbackEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "only company id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "direction",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CreatedOn",
              "LastName",
              "FirstName",
              "Email"
            ],
            "default": "CreatedOn"
          }
        ],
        "tags": [
          "SitbackApiEndpoints"
        ]
      }
    },
    "/v1/display-module-roles": {
      "get": {
        "operationId": "ModuleRoleService_ListDisplayModuleRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDisplayModuleRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ModuleRoleService"
        ]
      }
    },
    "/v1/module-roles": {
      "get": {
        "operationId": "ModuleRoleService_ListModuleRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListModuleRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ModuleRoleService"
        ]
      }
    },
    "/v1/module-roles/{name}": {
      "get": {
        "operationId": "ModuleRoleService_GetModuleRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/modulev1ModuleRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "ModuleRoleService"
        ]
      }
    },
    "/v1/public_key/{id}": {
      "get": {
        "operationId": "PublicKeys_GetPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PublicKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      }
    },
    "/v1/public_keys": {
      "get": {
        "operationId": "PublicKeys_ListPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      },
      "post": {
        "operationId": "PublicKeys_CreatePublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PublicKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePublicKeyRequest"
            }
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      }
    },
    "/v1/public_keys/{id}": {
      "delete": {
        "operationId": "PublicKeys_DeletePublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      }
    },
    "/v1/public_keys/{publicKey.id}": {
      "put": {
        "operationId": "PublicKeys_UpdatePublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PublicKey"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "publicKey.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PublicKeysUpdatePublicKeyBody"
            }
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      }
    },
    "/v1/public_keys:batchGet": {
      "post": {
        "operationId": "PublicKeys_BatchGetPublicKey",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetPublicKeyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetPublicKeyRequest"
            }
          }
        ],
        "tags": [
          "PublicKeys"
        ]
      }
    },
    "/v1/notification-preferences/batch-create": {
      "put": {
        "operationId": "NotificationPreferences_BatchOptForNotificationPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchOptForNotificationPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchOptForNotificationPreferenceRequest"
            }
          }
        ],
        "tags": [
          "NotificationPreferences"
        ]
      }
    },
    "/v1/notification-preferences/{preference.userId}": {
      "put": {
        "operationId": "NotificationPreferences_OptForNotificationPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NotificationPreference"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "preference.userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NotificationPreferencesOptForNotificationPreferenceBody"
            }
          }
        ],
        "tags": [
          "NotificationPreferences"
        ]
      }
    },
    "/v1/notification-preferences/{userId}": {
      "get": {
        "operationId": "NotificationPreferences_ListNotificationPreference",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListNotificationPreferenceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "companyId",
            "description": "company_id will only be applied when it is not empty",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channelType",
            "description": "channel_type will only be applied when it is not UNKNOWN_CHANNEL_TYPE",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_CHANNEL_TYPE",
              "EMAIL",
              "SMS",
              "PUSH",
              "WEB",
              "CALENDAR"
            ],
            "default": "UNKNOWN_CHANNEL_TYPE"
          },
          {
            "name": "templateId",
            "description": "event_type will only be applied when it is not empty\nstring event_type = 5;\ntemplate_id will only be applied when it is not empty",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parentId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "NotificationPreferences"
        ]
      }
    },
    "/v1/billing-memberships": {
      "get": {
        "summary": "ListBillingMembership lists all the BillingMembership(s)",
        "operationId": "BillingMemberships_ListBillingMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBillingMembershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "product",
            "description": "Product is optional parameter. If passed, then billing memberships related to this product are returned",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingMemberships"
        ]
      }
    },
    "/v1/billing-memberships/{id}": {
      "get": {
        "summary": "GetBillingMembership returns the billing membership by its unique id.",
        "operationId": "BillingMemberships_GetBillingMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingMembership"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingMemberships"
        ]
      }
    },
    "/v1/payment-gateway-settings": {
      "get": {
        "summary": "GetPaymentGatewaySetting returns the payment gateway setting by its parent and payment gateway.",
        "operationId": "PaymentGatewaySettings_GetPaymentGatewaySetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PaymentGatewaySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "gateway",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_BILLING_PAYMENT_GATEWAY",
              "STRIPE_GATEWAY",
              "BRAINTREE_GATEWAY",
              "SQUARE_GATEWAY",
              "PAYPAL_GATEWAY",
              "RADIUS_GATEWAY",
              "RAZORPAY_GATEWAY"
            ],
            "default": "UNSPECIFIED_BILLING_PAYMENT_GATEWAY"
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      },
      "put": {
        "summary": "UpdatePaymentGatewaySetting will update the payment gateway setting identified by its payment gateway setting id.\nUpdate PaymentGatewaySetting uses Field Mask to update specific properties of payment gateway setting object",
        "operationId": "PaymentGatewaySettings_UpdatePaymentGatewaySetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1PaymentGatewaySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePaymentGatewaySettingRequest"
            }
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/payment-gateway-settings/default": {
      "get": {
        "operationId": "PaymentGatewaySettings_GetDefaultConfig",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentGatewaySettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/payment-gateway-settings/location": {
      "patch": {
        "operationId": "PaymentGatewaySettings_UpdatePaymentGatewayLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdatePaymentGatewayLocationRequest"
            }
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/payment-gateway-settings/locations": {
      "get": {
        "operationId": "PaymentGatewaySettings_ListPaymentGatewayLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentGatewayLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "integrationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/payment-gateway-settings/parent:batch": {
      "post": {
        "summary": "GetPaymentGatewaySetting returns the payment gateway setting by its parent and payment gateway.",
        "operationId": "PaymentGatewaySettings_BatchGetPaymentGatewaySettingByParent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetPaymentGatewaySettingByParentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetPaymentGatewaySettingByParentRequest"
            }
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/payment-gateway-settings:list": {
      "get": {
        "summary": "ListPaymentGatewaySetting lists all the PaymentGatewaySetting(s)",
        "operationId": "PaymentGatewaySettings_ListPaymentGatewaySetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentGatewaySettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentGatewaySettings"
        ]
      }
    },
    "/v1/billing-wallet/addBalance": {
      "post": {
        "summary": "AddBalance works like upsert",
        "operationId": "Wallets_AddBalanceToWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Wallet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddBalanceToWalletRequest"
            }
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/billing-wallet/balance": {
      "get": {
        "operationId": "Wallets_GetBalanceOfWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Wallet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/billing-wallet/deductBalance": {
      "post": {
        "operationId": "Wallets_DeductBalanceFromWallet",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Wallet"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeductBalanceFromWalletRequest"
            }
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/billing-wallet/transactions": {
      "get": {
        "operationId": "Wallets_ListTransactions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListTransactionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "Parent contains the hierarchical information of the given Location like\nFirst specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Wallets"
        ]
      }
    },
    "/v1/billing-plans": {
      "get": {
        "summary": "ListBillingPlan lists all the BillingPlan(s)",
        "operationId": "BillingPlans_ListBillingPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBillingPlanResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingPlans"
        ]
      }
    },
    "/v1/billing-plans/{id}": {
      "get": {
        "summary": "GetBillingPlan returns the billing plan by its unique id.",
        "operationId": "BillingPlans_GetBillingPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingPlan"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingPlans"
        ]
      }
    },
    "/v1/payment-intent": {
      "get": {
        "operationId": "PaymentMethods_GetPaymentMethodIntent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPaymentMethodIntentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "gateway",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_BILLING_PAYMENT_GATEWAY",
              "STRIPE_GATEWAY",
              "BRAINTREE_GATEWAY",
              "SQUARE_GATEWAY",
              "PAYPAL_GATEWAY",
              "RADIUS_GATEWAY",
              "RAZORPAY_GATEWAY"
            ],
            "default": "UNSPECIFIED_BILLING_PAYMENT_GATEWAY"
          },
          {
            "name": "parent",
            "description": "parent empty then for appointy, else for comapny/location",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment-methods": {
      "post": {
        "summary": "CreatePaymentMethod creates new payment method.",
        "operationId": "PaymentMethods_CreatePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/billingv1PaymentMethod"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePaymentMethodRequest"
            }
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment-methods/buyer:list": {
      "get": {
        "summary": "ListPaymentMethodOfBuyer lists all the PaymentMethod(s) of buyer/customer on location",
        "operationId": "PaymentMethods_ListPaymentMethodOfBuyer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentMethodResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "buyerId",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "secondaryParentId",
            "description": "can contain company/location",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment-methods/count": {
      "get": {
        "summary": "NoOfPaymentMethods returns the count of payment methods present",
        "operationId": "PaymentMethods_NoOfPaymentMethods",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1NoOfPaymentMethodsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "optional, can contain company/location",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment-methods/{id}": {
      "get": {
        "summary": "GetPaymentMethod returns the payment method by its unique id.",
        "operationId": "PaymentMethods_GetPaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/billingv1PaymentMethod"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      },
      "delete": {
        "summary": "DeletePaymentMethod will delete the payment method from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "PaymentMethods_DeletePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      },
      "put": {
        "summary": "UpdatePaymentMethod will update the payment method identified by its payment method id.\nUpdate PaymentMethod uses Field Mask to update specific properties of payment method object",
        "operationId": "PaymentMethods_UpdatePaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/billingv1PaymentMethod"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PaymentMethodsUpdatePaymentMethodBody"
            }
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/payment-methods:list": {
      "get": {
        "summary": "ListPaymentMethod lists all the PaymentMethod(s)",
        "operationId": "PaymentMethods_ListPaymentMethod",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPaymentMethodResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "description": "optional, can contain company/location",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "PaymentMethods"
        ]
      }
    },
    "/v1/billing-accounts": {
      "get": {
        "summary": "ListBillingAccount lists all the BillingAccount(s)",
        "operationId": "BillingAccounts_ListBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBillingAccountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      },
      "post": {
        "summary": "CreateBillingAccount creates new billing account.",
        "operationId": "BillingAccounts_CreateBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.id",
            "description": "parent can be company or location or user",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.description",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.country",
            "description": "Country , e.g. \"USA\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.locality",
            "description": "Locality or locality/city, e.g. \"Mountain View\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.region",
            "description": "Region, The region/state/province, e.g. \"CA\". This field is only required\nin\ncountries where region is commonly a part of the address. (optional)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.postalCode",
            "description": "PostalCode  e.g. \"94043\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.streetAddress",
            "description": "StreetAddress, e.g. \"1600 Amphitheatre Pkwy\". (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.address.latitude",
            "description": "GeoCoordinates , e.g. latitude=23.2599333, longitude=77.41261499999996\nLatitude e.g. 23.2599333",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "billingAccount.address.longitude",
            "description": "Longitude e.g. 77.41261499999996",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "billingAccount.paymentMethodIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "billingAccount.defaultPaymentMethodId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.externalCustomerId",
            "description": "gateway:external-customer-id\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "billingAccount.isDefault",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "billingAccount.secondaryParentId",
            "description": "if parent: user => company/location; else => empty;",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      }
    },
    "/v1/billing-accounts/set-default/{billingAccountId}": {
      "put": {
        "operationId": "BillingAccounts_SetDefaultBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "billingAccountId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingAccountsSetDefaultBillingAccountBody"
            }
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      }
    },
    "/v1/billing-accounts/{billingAccount.id}": {
      "put": {
        "summary": "UpdateBillingAccount will update the billing account identified by its billing account id.\nUpdate BillingAccount uses Field Mask to update specific properties of billing account object",
        "operationId": "BillingAccounts_UpdateBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "billingAccount.id",
            "description": "parent can be company or location or user",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BillingAccountsUpdateBillingAccountBody"
            }
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      }
    },
    "/v1/billing-accounts/{id}": {
      "get": {
        "summary": "GetBillingAccount returns the billing account by its unique id.",
        "operationId": "BillingAccounts_GetBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BillingAccount"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      },
      "delete": {
        "summary": "DeleteBillingAccount will delete the billing account from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "BillingAccounts_DeleteBillingAccount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "BillingAccounts"
        ]
      }
    },
    "/v1/extended-field-submissions": {
      "get": {
        "summary": "ListExtendedFieldSubmission lists all the ExtendedFieldSubmission(s)",
        "operationId": "ExtendedFieldSubmissions_ListExtendedFieldSubmission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListExtendedFieldSubmissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFieldSubmissions"
        ]
      }
    },
    "/v1/extended-field-submissions:batchGet": {
      "get": {
        "summary": "Gets all the ExtendedFieldSubmission(s) by their ids",
        "operationId": "ExtendedFieldSubmissions_BatchGetExtendedFieldSubmission",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetExtendedFieldSubmissionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ExtendedFieldSubmissions"
        ]
      }
    },
    "/v1/policies": {
      "post": {
        "summary": "Adds a Policy with a single active policy version",
        "operationId": "Policies_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/change/acceptance/criteria/{policyId}": {
      "put": {
        "operationId": "Policies_ChangePolicyAcceptanceCriteria",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PoliciesChangePolicyAcceptanceCriteriaBody"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/change/status/{policyId}": {
      "put": {
        "operationId": "Policies_ChangePolicyStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PoliciesChangePolicyStatusBody"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/delete": {
      "put": {
        "operationId": "Policies_DeleteDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/publish": {
      "put": {
        "summary": "Publish draft and make the version published",
        "operationId": "Policies_PublishDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PublishDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/update": {
      "put": {
        "summary": "published cannot be updated",
        "operationId": "Policies_UpdateDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/list/{parent}": {
      "get": {
        "summary": "Get all policies according to specified request",
        "operationId": "Policies_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "onlyActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "policyNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDefault",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isTypeAnnouncement",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/version": {
      "put": {
        "summary": "Saves Policy as Version and makes it active\nIncrease the version number from the last added Policy Version",
        "operationId": "Policies_CreatePolicyVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyVersionRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "summary": "Get policy by id",
        "operationId": "Policies_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withAttachedSources",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/membership/{code}": {
      "get": {
        "operationId": "Memberships_GetMembershipByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMembershipByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships": {
      "get": {
        "summary": "ListMemberships return all the membership of given parent",
        "operationId": "Memberships_ListMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMembershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent contains the hierarchical information of the given Membership like\nbusiness/group",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.enableForPurchase",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.isPrivate",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "filter.type",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "MembershipType_UNSPECIFIED",
              "MEMBERSHIP",
              "PACKAGE"
            ],
            "default": "MembershipType_UNSPECIFIED"
          },
          {
            "name": "filter.categoryId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.canBePurchasedOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "Memberships"
        ]
      },
      "post": {
        "summary": "CrateMembership creates a new Membership",
        "operationId": "Memberships_CreateMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Membership"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMembershipRequest"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/plan": {
      "post": {
        "summary": "CrateMembership creates a new Membership Plan",
        "operationId": "Memberships_CreateMembershipPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Plan"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMembershipPlanRequest"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/plan/{plan.id}": {
      "put": {
        "summary": "UpdateMembershipPlan updates a Membership Plan",
        "operationId": "Memberships_UpdateMembershipPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Plan"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "plan.id",
            "description": "Id unique identifier for plan",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipsUpdateMembershipPlanBody"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/plans/{id}": {
      "delete": {
        "operationId": "Memberships_DeleteMembershipPlan",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id Unique Membership Plan identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/{id}": {
      "get": {
        "summary": "GetMembership takes Membership id as an argument and returns the membership\nobject",
        "operationId": "Memberships_GetMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Membership"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id Unique Membership identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Memberships"
        ]
      },
      "delete": {
        "summary": "DeleteMembership deletes a specific Membership identified by the passed ID.\nThis method will only soft delete the membership",
        "operationId": "Memberships_DeleteMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id Unique Membership identifier",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "baseId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/{id}/status": {
      "patch": {
        "operationId": "Memberships_UpdateMembershipStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Membership"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipsUpdateMembershipStatusBody"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships/{membership.id}": {
      "put": {
        "summary": "UpdateMembership updates a Membership uniquely identified by its ID and\nreturns the updated Membership",
        "operationId": "Memberships_UpdateMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Membership"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "membership.id",
            "description": "Id a Unique Identifier for the Membership",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MembershipsUpdateMembershipBody"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships:batch": {
      "post": {
        "operationId": "Memberships_BatchCreateMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateMembershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateMembershipRequest"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/memberships:batchGet": {
      "post": {
        "summary": "BatchGetMemberships will give the list of all the membership specified by\nthe given IDs",
        "operationId": "Memberships_BatchGetMembership",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetMembershipResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetMembershipRequest"
            }
          }
        ],
        "tags": [
          "Memberships"
        ]
      }
    },
    "/v1/customers/filters": {
      "get": {
        "operationId": "CustomerReports_GetCustomerFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomerFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      },
      "post": {
        "operationId": "CustomerReports_UpsertCustomerFilters",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomerFilters"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertCustomerFiltersRequest"
            }
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report": {
      "get": {
        "operationId": "CustomerReports_GetFilteredCustomers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetFilteredCustomersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report/detailed-signup": {
      "get": {
        "operationId": "CustomerReports_GetGroupedCustomerSignupReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedCustomerSignupReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report/grouped-signup": {
      "get": {
        "operationId": "CustomerReports_GetDetailedCustomerSignupReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetDetailedCustomerSignupReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "exportReport",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerTag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.emailVerified",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "status.phoneVerified",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "ALL",
              "TRUE",
              "FALSE"
            ],
            "default": "ALL"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accessContact",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "CustomerReportSortBy_UNDEFINED",
              "CustomerReportSortBy_CustomerName",
              "CustomerReportSortBy_CustomerEmail"
            ],
            "default": "CustomerReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report/login": {
      "get": {
        "operationId": "CustomerReports_GetCustomerLoginReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomerLoginReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "filter.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.email",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report/sales": {
      "get": {
        "operationId": "CustomerReports_GetMonthlySalesReportByCustomer",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetMonthlySalesReportByCustomerResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/report/{customerId}": {
      "put": {
        "summary": "Will Update the mood of customer ie : Happy , UnHappy\nAdmin will have rights to directly update the mood of customer",
        "operationId": "CustomerReports_UpdateCustomerMood",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomerReportsUpdateCustomerMoodBody"
            }
          }
        ],
        "tags": [
          "CustomerReports"
        ]
      }
    },
    "/v1/customers/activities/{customerId}": {
      "get": {
        "operationId": "CustomersData_GetCustomerActivities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomerActivitiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomersData"
        ]
      }
    },
    "/v1/customers/amounts/{customerId}": {
      "get": {
        "operationId": "CustomersData_GetCustomerAmounts",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomerAmountsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomersData"
        ]
      }
    },
    "/v1/customers/numbers/{customerId}": {
      "get": {
        "operationId": "CustomersData_GetCustomerNumbers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCustomerNumbersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomersData"
        ]
      }
    },
    "/v1/services/prices": {
      "get": {
        "summary": "Get Prices returns corresponding price rule for the Service",
        "operationId": "ServicePrices_GetServicePrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServicePrice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Service Identifier for which Price is being requested",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServicePrices"
        ]
      },
      "post": {
        "summary": "UpsertServicePrice Set/Update Prices corresponding to Service",
        "operationId": "ServicePrices_UpsertServicePrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ServicePrice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpsertServicePriceRequest"
            }
          }
        ],
        "tags": [
          "ServicePrices"
        ]
      }
    },
    "/v1/services/prices/value": {
      "get": {
        "summary": "GetServicePriceValue returns the exact price value for the combination provided",
        "operationId": "ServicePrices_GetServicePriceValue",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetServicePriceValueResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "channelId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ServicePrices"
        ]
      }
    },
    "/v1/services/prices:batchUpsert": {
      "post": {
        "summary": "BatchUpsertServicePrice Set/Update Prices corresponding to Service in batch",
        "operationId": "ServicePrices_BatchUpsertServicePrice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertServicePriceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertServicePriceRequest"
            }
          }
        ],
        "tags": [
          "ServicePrices"
        ]
      }
    },
    "/v1/analytics-templates": {
      "get": {
        "summary": "ListAnalyticsTemplate lists all the AnalyticsTemplate(s)",
        "operationId": "AnalyticsTemplates_ListAnalyticsTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAnalyticsTemplateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "BUSINESS_CREATED",
              "PRODUCT_DEFAULT",
              "ALL"
            ],
            "default": "BUSINESS_CREATED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AnalyticsTemplates"
        ]
      },
      "post": {
        "summary": "CreateAnalyticsTemplate creates new analytics template.",
        "operationId": "AnalyticsTemplates_CreateAnalyticsTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AnalyticsTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAnalyticsTemplateRequest"
            }
          }
        ],
        "tags": [
          "AnalyticsTemplates"
        ]
      }
    },
    "/v1/analytics-templates/{analyticsTemplate.id}": {
      "put": {
        "summary": "UpdateAnalyticsTemplate will update the analytics template identified by its analytics template id.\nUpdate AnalyticsTemplate uses Field Mask to update specific properties of analytics template object",
        "operationId": "AnalyticsTemplates_UpdateAnalyticsTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AnalyticsTemplate"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "analyticsTemplate.id",
            "description": "parent will be company",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AnalyticsTemplatesUpdateAnalyticsTemplateBody"
            }
          }
        ],
        "tags": [
          "AnalyticsTemplates"
        ]
      }
    },
    "/v1/analytics-templates/{id}": {
      "delete": {
        "summary": "DeleteAnalyticsTemplate will delete the analytics template from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "AnalyticsTemplates_DeleteAnalyticsTemplate",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "AnalyticsTemplates"
        ]
      }
    },
    "/v1/reports/custom-status/{parent}": {
      "get": {
        "operationId": "Reports_GetGroupLevelCustomStatusReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupLevelCustomStatusReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/v1/reports/employee": {
      "get": {
        "operationId": "Reports_GetEmployeeReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetEmployeeReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query over employee name or email or designation or department name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "departmentId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "designationId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Reports"
        ]
      }
    },
    "/v1/automatic-reports": {
      "get": {
        "summary": "ListAutomaticReport lists all the AutomaticReport(s)",
        "operationId": "AutomaticReports_ListAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAutomaticReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      },
      "post": {
        "summary": "CreateAutomaticReport creates new automatic report.",
        "operationId": "AutomaticReports_CreateAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AutomaticReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAutomaticReportRequest"
            }
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      }
    },
    "/v1/automatic-reports/{automaticReport.id}": {
      "put": {
        "summary": "UpdateAutomaticReport will update the automatic report identified by its automatic report id.\nUpdate AutomaticReport uses Field Mask to update specific properties of automatic report object",
        "operationId": "AutomaticReports_UpdateAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AutomaticReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "automaticReport.id",
            "description": "parent is business for which this report is automated (for UI fetch purposes)",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AutomaticReportsUpdateAutomaticReportBody"
            }
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      }
    },
    "/v1/automatic-reports/{id}": {
      "get": {
        "summary": "GetAutomaticReport returns the automatic report by its unique id.",
        "operationId": "AutomaticReports_GetAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AutomaticReport"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      },
      "delete": {
        "summary": "DeleteAutomaticReport will delete the automatic report from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "AutomaticReports_DeleteAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      }
    },
    "/v1/automatic-reports:batchGet": {
      "get": {
        "summary": "Gets all the AutomaticReport(s) by their ids",
        "operationId": "AutomaticReports_BatchGetAutomaticReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAutomaticReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AutomaticReports"
        ]
      }
    },
    "/v1/companies": {
      "get": {
        "summary": "ListCompanies returns all the companies within a given parent like group",
        "operationId": "Companies_ListCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCompanyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given company like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query companies based on company's display-name and title",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Companies"
        ]
      },
      "post": {
        "summary": "CreateCompany creates new company",
        "operationId": "Companies_CreateCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Company"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCompanyRequest"
            }
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/v1/companies/{company.id}": {
      "put": {
        "summary": "UpdateCompany updates a company uniquely identified by its ID.\nUpdate company uses Field Mask to update properties of company object",
        "operationId": "Companies_UpdateCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Company"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "company.id",
            "description": "Id is a unique identifier of the company\n\nName is the human readable name of the company.\n Should never be considered unique for any purposes\n and should only be used for reference.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CompaniesUpdateCompanyBody"
            }
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/v1/companies/{id}": {
      "get": {
        "summary": "GetCompany returns the company based on its unique ID\nGetCompany is an open endpoint for the sake of visibility",
        "operationId": "Companies_GetCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Company"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the company with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Company object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\ncompany object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Companies"
        ]
      },
      "delete": {
        "summary": "DeleteCompany deletes a specific company identified by the given ID.\nNote: This method soft deletes the company.",
        "operationId": "Companies_DeleteCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the company with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/v1/companies:batchGet": {
      "post": {
        "summary": "BatchGetCompanies get Companies by the list of given company IDs.",
        "operationId": "Companies_BatchGetCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchGetCompanyRequest"
            }
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/v1/company/custom-id": {
      "get": {
        "operationId": "Companies_GetCompanyByCustomId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Company"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Companies"
        ]
      }
    },
    "/v1/invoice": {
      "get": {
        "summary": "ListInvoice lists all the Invoice(s)",
        "operationId": "Invoices_ListInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInvoiceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/v1/invoice/{id}": {
      "get": {
        "summary": "GetInvoice returns the invoice by its unique id.",
        "operationId": "Invoices_GetInvoice",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Invoice"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Invoices"
        ]
      }
    },
    "/v1/receipt/{id}": {
      "get": {
        "summary": "GetReceipt returns the receipt by its unique id.",
        "operationId": "Receipts_GetReceipt",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Receipt"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Receipts"
        ]
      }
    },
    "/v1/utility/ip": {
      "get": {
        "operationId": "Utilities_GetIpInformation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1IpInformation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Utilities"
        ]
      }
    },
    "/v1/utility/liquid": {
      "get": {
        "operationId": "Utilities_LiquidTemplateParse",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1LiquidTemplateParseResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "templates",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "data",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dateFormat",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeFormat",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Utilities"
        ]
      }
    },
    "/v1/recents": {
      "get": {
        "operationId": "Recents_ListRecent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRecentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the  owner in hierarchical manner",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Recents"
        ]
      },
      "post": {
        "operationId": "Recents_CreateRecent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Recent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRecentRequest"
            }
          }
        ],
        "tags": [
          "Recents"
        ]
      }
    },
    "/v1/recents/{id}": {
      "get": {
        "operationId": "Recents_GetRecent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Recent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Recents"
        ]
      }
    },
    "/v1/recents/{recent.id}": {
      "put": {
        "operationId": "Recents_UpdateRecent",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Recent"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "recent.id",
            "description": "parent location",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RecentsUpdateRecentBody"
            }
          }
        ],
        "tags": [
          "Recents"
        ]
      }
    }
  },
  "components": {
    "schemas": null,
    "responses": null,
    "parameters": null,
    "requestBodies": null
  },
  "definitions": {
    "SlugsUpsertSlugBody": {
      "type": "object",
      "properties": {
        "slugValue": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(&foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := &pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := &pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": <string>,\n      \"lastName\": <string>\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1BatchGetSlugResponse": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Slug"
          }
        }
      }
    },
    "v1CheckSlugAvailabilityResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        }
      }
    },
    "v1Slug": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "parent is the source-id i.e. company, location..."
        },
        "slugValue": {
          "type": "string"
        },
        "slugType": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1AddZipCodesRequest": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "codes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locationName": {
          "type": "string",
          "title": "internal"
        }
      }
    },
    "v1AddZipCodesResponse": {
      "type": "object",
      "properties": {
        "zipCodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZipCode"
          }
        }
      }
    },
    "v1ListZipCodeResponse": {
      "type": "object",
      "properties": {
        "zipCode": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZipCode"
          }
        }
      }
    },
    "v1ZipCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "ProjectsUpdateProjectBody": {
      "type": "object",
      "properties": {
        "project": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "color": {
              "type": "string"
            }
          },
          "description": "Project is a group of tasks stored at company level."
        },
        "updateMask": {
          "type": "string"
        },
        "oldProject": {
          "$ref": "#/definitions/v1Project",
          "title": "For internal use"
        }
      }
    },
    "v1CreateProjectRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "project": {
          "$ref": "#/definitions/v1Project"
        },
        "companyName": {
          "type": "string",
          "title": "For internal use"
        }
      }
    },
    "v1ListProjectResponse": {
      "type": "object",
      "properties": {
        "project": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Project"
          }
        }
      }
    },
    "v1Project": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "color": {
          "type": "string"
        }
      },
      "description": "Project is a group of tasks stored at company level."
    },
    "TasksChangeTaskNotificationSettingBody": {
      "type": "object",
      "properties": {
        "newSetting": {
          "$ref": "#/definitions/v1TaskNotificationSetting"
        },
        "name": {
          "type": "string",
          "title": "For internal use"
        },
        "oldSetting": {
          "$ref": "#/definitions/v1TaskNotificationSetting"
        }
      }
    },
    "TasksChangeTaskStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1TaskStatus"
        },
        "name": {
          "type": "string",
          "title": "For internal use"
        },
        "oldStatus": {
          "$ref": "#/definitions/v1TaskStatus"
        }
      }
    },
    "TasksUpdateTaskBody": {
      "type": "object",
      "properties": {
        "task": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/v1TaskStatus"
            },
            "highPriority": {
              "type": "boolean"
            },
            "assignedTo": {
              "type": "string"
            },
            "dueDate": {
              "type": "string",
              "format": "date-time"
            },
            "notifyBy": {
              "$ref": "#/definitions/v1TaskNotificationSetting"
            },
            "createdBy": {
              "type": "string",
              "title": "Meta-details"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "description": "Task represents a unit piece of work in any Project,\nthat has to be done and can be assigned to any of the\nemployee in the company."
        },
        "updateMask": {
          "type": "string"
        },
        "oldTask": {
          "$ref": "#/definitions/v1Task",
          "title": "For internal use"
        },
        "assignedToName": {
          "type": "string"
        }
      }
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "typesTimeslot": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Timeslot object"
    },
    "v1CreateTaskRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "task": {
          "$ref": "#/definitions/v1Task"
        },
        "projectName": {
          "type": "string",
          "title": "For internal use"
        }
      }
    },
    "v1ListTasksResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaskNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1Task": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1TaskStatus"
        },
        "highPriority": {
          "type": "boolean"
        },
        "assignedTo": {
          "type": "string"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "notifyBy": {
          "$ref": "#/definitions/v1TaskNotificationSetting"
        },
        "createdBy": {
          "type": "string",
          "title": "Meta-details"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "Task represents a unit piece of work in any Project,\nthat has to be done and can be assigned to any of the\nemployee in the company."
    },
    "v1TaskListFilters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "Name will match name pattern"
        },
        "status": {
          "$ref": "#/definitions/v1TaskStatus",
          "title": "Status will filter tasks based on status"
        },
        "dueDateAfter": {
          "type": "string",
          "format": "date-time",
          "title": "DueDateAfter will check DueDate > input"
        },
        "dueDateBefore": {
          "type": "string",
          "format": "date-time",
          "title": "DueDateBefore will check DueDate < input"
        }
      }
    },
    "v1TaskNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Task"
        }
      }
    },
    "v1TaskNotificationSetting": {
      "type": "object",
      "properties": {
        "sms": {
          "type": "boolean"
        },
        "email": {
          "type": "boolean"
        }
      }
    },
    "v1TaskReportNode": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1TaskReportResponse": {
      "type": "object",
      "properties": {
        "total": {
          "type": "string",
          "format": "int64"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaskReportNode"
          }
        }
      }
    },
    "v1TaskStatus": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Incomplete",
        "Complete"
      ],
      "default": "Unspecified"
    },
    "v1AssignUserRole": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1BulkCreateRightResponse": {
      "type": "object",
      "properties": {
        "rights": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRight"
          }
        }
      }
    },
    "v1GetUsersHavingAccessByParentResponse": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1IsValidResponse": {
      "type": "object",
      "properties": {
        "isValid": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        },
        "skipAttributeValidations": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "Title of Resource"
        },
        "description": {
          "type": "string",
          "title": "Description of Resource"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery",
          "title": "image of resource"
        },
        "resourceTypeId": {
          "type": "string",
          "title": "types of resource eg: room, service"
        },
        "quantity": {
          "type": "integer",
          "format": "int64",
          "title": "deprecated"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "deprecated"
        },
        "active": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details\nCreated by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1UserRight": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "IntakeFormsBulkUpdateIntakeFormStatusBody": {
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean"
        }
      }
    },
    "IntakeFormsUpdateIntakeFormBody": {
      "type": "object",
      "properties": {
        "newVersion": {
          "type": "boolean",
          "title": "if set existing version will not be changed and a new form is created with new version"
        },
        "form": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "blockList": {
              "$ref": "#/definitions/v1BlockList"
            },
            "version": {
              "type": "integer",
              "format": "int64"
            },
            "groupId": {
              "type": "string",
              "title": "Represents a group of Intake form with different versions\nit also has the same parent as that of the form"
            },
            "metadata": {
              "type": "string"
            },
            "createdBy": {
              "type": "string"
            },
            "createdByName": {
              "type": "string"
            },
            "createdByEmail": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedByName": {
              "type": "string"
            },
            "updatedByEmail": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatableSubmissions": {
              "type": "boolean"
            },
            "canSubmitForOthers": {
              "type": "boolean"
            },
            "canAskForMailCopy": {
              "type": "boolean"
            },
            "masterTemplateId": {
              "type": "string",
              "title": "TemplateId denotes the master template used to create the form"
            },
            "isActive": {
              "type": "boolean"
            },
            "isCopied": {
              "type": "boolean",
              "title": "IsCopied will be set to true if created from MasterTemplate"
            },
            "assignedServices": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1AssignedServices"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "typesBooleanFilter": {
      "type": "string",
      "enum": [
        "ALL",
        "TRUE",
        "FALSE"
      ],
      "default": "ALL"
    },
    "typesFormValue": {
      "type": "object",
      "properties": {
        "valueType": {
          "$ref": "#/definitions/typesFormValueType",
          "title": "value type"
        },
        "text": {
          "type": "string",
          "title": "value"
        },
        "boolean": {
          "type": "boolean"
        },
        "number": {
          "type": "string",
          "format": "int64"
        },
        "decimal": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "typesFormValueType": {
      "type": "string",
      "enum": [
        "String",
        "Boolean",
        "Number",
        "Decimal",
        "Timestamp",
        "OnlyDatePart",
        "OnlyTimePart"
      ],
      "default": "String",
      "title": "- Timestamp: date + time\n - OnlyDatePart: date\n - OnlyTimePart: time"
    },
    "typesOrderBy": {
      "type": "string",
      "enum": [
        "Ascending",
        "Descending"
      ],
      "default": "Ascending"
    },
    "v1AssignedServices": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceTitle": {
          "type": "string"
        }
      }
    },
    "v1Block": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1BlockType"
        },
        "style": {
          "type": "string"
        },
        "grid": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockItem"
          }
        },
        "displayCondition": {
          "$ref": "#/definitions/v1Condition",
          "title": "display conditions are not set means the block is always visible"
        },
        "linkingCondition": {
          "$ref": "#/definitions/v1Condition",
          "title": "linking_condition is for checking linking conditions"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "v1BlockItem": {
      "type": "object",
      "properties": {
        "formItem": {
          "$ref": "#/definitions/v1FormItem"
        },
        "readOnlyItem": {
          "$ref": "#/definitions/v1ReadOnlyItem",
          "title": "only non-editable readonly objects"
        }
      }
    },
    "v1BlockList": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Block"
          }
        }
      }
    },
    "v1BlockType": {
      "type": "string",
      "enum": [
        "Element",
        "GoogleRecaptcha",
        "Signature",
        "Rating"
      ],
      "default": "Element"
    },
    "v1BulkAddIntakeFormServiceLinksRequest": {
      "type": "object",
      "properties": {
        "formIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BulkCopyIntakeFormRequest": {
      "type": "object",
      "properties": {
        "copyFromLocationId": {
          "type": "string"
        },
        "formIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copyToLocationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BulkCopyIntakeFormResponse": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntakeForm"
          }
        }
      }
    },
    "v1BulkUpdateIntakeFormStatusResponse": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntakeForm"
          }
        }
      }
    },
    "v1Condition": {
      "type": "object",
      "properties": {
        "rule": {
          "$ref": "#/definitions/v1ConditionRule",
          "title": "one of the following three will be used"
        },
        "or": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConditionRule"
          }
        },
        "and": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConditionRule"
          }
        }
      }
    },
    "v1ConditionOperator": {
      "type": "string",
      "enum": [
        "Equal",
        "NotEqual",
        "In",
        "NotIn"
      ],
      "default": "Equal",
      "title": "- Equal: Value is required for Eq, Not Eq and In"
    },
    "v1ConditionRule": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "title": "key is a valid form item key"
        },
        "operator": {
          "$ref": "#/definitions/v1ConditionOperator"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesFormValue"
          },
          "title": "values are valid form item values"
        }
      }
    },
    "v1CopyIntakeFormRequest": {
      "type": "object",
      "properties": {
        "formId": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CopyIntakeFormResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CopyIntakeFormResponseWithMessage"
          }
        }
      }
    },
    "v1CopyIntakeFormResponseWithMessage": {
      "type": "object",
      "properties": {
        "form": {
          "$ref": "#/definitions/v1IntakeForm"
        },
        "errorMessage": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "v1CreateIntakeFormRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "form": {
          "$ref": "#/definitions/v1IntakeForm"
        }
      }
    },
    "v1DeleteIntakeFormsResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1FormFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isActive": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "assignedServices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1FormItem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "helperText": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "hoverText": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "defaultValue": {
          "$ref": "#/definitions/typesFormValue"
        },
        "itemType": {
          "$ref": "#/definitions/v1FormItemType"
        },
        "orientation": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        },
        "pii": {
          "type": "boolean"
        },
        "validations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Validation"
          }
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Option"
          }
        },
        "accept": {
          "type": "string",
          "title": "to represent accepted MIME types: https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/accept"
        },
        "fileSize": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1FormItemType": {
      "type": "string",
      "enum": [
        "Text",
        "Button",
        "Input",
        "Checkbox",
        "Radio",
        "Switch",
        "Dropdown",
        "Datepicker",
        "Timepicker",
        "ImageUrl",
        "Textarea",
        "File"
      ],
      "default": "Text",
      "title": "- ImageUrl: can be used to show logo"
    },
    "v1IntakeForm": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent will be id of entity for which form is required"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "blockList": {
          "$ref": "#/definitions/v1BlockList"
        },
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "groupId": {
          "type": "string",
          "title": "Represents a group of Intake form with different versions\nit also has the same parent as that of the form"
        },
        "metadata": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "createdByEmail": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedByName": {
          "type": "string"
        },
        "updatedByEmail": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatableSubmissions": {
          "type": "boolean"
        },
        "canSubmitForOthers": {
          "type": "boolean"
        },
        "canAskForMailCopy": {
          "type": "boolean"
        },
        "masterTemplateId": {
          "type": "string",
          "title": "TemplateId denotes the master template used to create the form"
        },
        "isActive": {
          "type": "boolean"
        },
        "isCopied": {
          "type": "boolean",
          "title": "IsCopied will be set to true if created from MasterTemplate"
        },
        "assignedServices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AssignedServices"
          }
        }
      }
    },
    "v1IntakeFormLinking": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "intakeFormId": {
          "type": "string"
        },
        "intakeFormParent": {
          "type": "string"
        },
        "linkingTypeId": {
          "type": "string"
        },
        "linkingTypeParent": {
          "type": "string"
        },
        "linkingType": {
          "$ref": "#/definitions/v1IntakeFormLinkingType"
        }
      }
    },
    "v1IntakeFormLinkingList": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntakeFormLinking"
          }
        }
      }
    },
    "v1IntakeFormLinkingType": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Service",
        "Class",
        "GiftCard"
      ],
      "default": "Unspecified"
    },
    "v1IntakeFormSortBy": {
      "type": "string",
      "enum": [
        "CreatedOn",
        "Active",
        "Name"
      ],
      "default": "CreatedOn"
    },
    "v1ListIntakeFormsResponse": {
      "type": "object",
      "properties": {
        "forms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntakeForm"
          }
        }
      }
    },
    "v1Option": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/typesFormValue"
        }
      }
    },
    "v1ReadOnlyItem": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "helperText": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "hoverText": {
          "type": "string"
        },
        "itemType": {
          "$ref": "#/definitions/v1FormItemType",
          "title": "item_type can only be of Text, Button, ImageUrl (readonly)"
        },
        "value": {
          "$ref": "#/definitions/typesFormValue"
        },
        "orientation": {
          "type": "string"
        },
        "metadata": {
          "type": "string"
        }
      },
      "title": "ReadOnlyItem are non-editable readonly objects"
    },
    "v1UpsertIntakeFormLinkingRequest": {
      "type": "object",
      "properties": {
        "againstId": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntakeFormLinking"
          }
        },
        "linkingType": {
          "$ref": "#/definitions/v1IntakeFormLinkingType"
        }
      }
    },
    "v1Validation": {
      "type": "object",
      "properties": {
        "validationType": {
          "$ref": "#/definitions/v1ValidationType"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesFormValue"
          }
        }
      }
    },
    "v1ValidationType": {
      "type": "string",
      "enum": [
        "Compulsion",
        "OneTimeField",
        "Between",
        "PresentIn",
        "NotPresentIn",
        "Equals",
        "NotEquals",
        "LessThan",
        "GreaterThan",
        "LessThanEquals",
        "GreaterThanEquals",
        "Url",
        "Email",
        "RegexPattern",
        "MinLength",
        "MaxLength",
        "LengthEquals"
      ],
      "default": "Compulsion",
      "title": "- Compulsion: boolean type value\n - Between: numeric type value\n - Url: text type value\n - MinLength: Array length"
    },
    "OrdersApplyDiscountBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        }
      }
    },
    "OrdersOrderValidatePublicDiscountBody": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        }
      }
    },
    "OrdersRemoveDiscountBody": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        }
      }
    },
    "typesAddress": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "title": "Country , e.g. \"USA\". (required)"
        },
        "locality": {
          "type": "string",
          "title": "Locality or locality/city, e.g. \"Mountain View\". (required)"
        },
        "region": {
          "type": "string",
          "title": "Region, The region/state/province, e.g. \"CA\". This field is only required\nin\ncountries where region is commonly a part of the address. (optional)"
        },
        "postalCode": {
          "type": "string",
          "title": "PostalCode  e.g. \"94043\". (required)"
        },
        "streetAddress": {
          "type": "string",
          "title": "StreetAddress, e.g. \"1600 Amphitheatre Pkwy\". (required)"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "title": "GeoCoordinates , e.g. latitude=23.2599333, longitude=77.41261499999996\nLatitude e.g. 23.2599333"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "Longitude e.g. 77.41261499999996"
        }
      }
    },
    "typesDateslot": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Dateslot object"
    },
    "typesGalleryItem": {
      "type": "object",
      "properties": {
        "thumbImage": {
          "type": "string"
        },
        "largeImage": {
          "type": "string"
        }
      },
      "title": "Generic Gallery Item Object"
    },
    "typesGender": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "FEMALE",
        "MALE",
        "OTHER",
        "PREFER_NOT_TO_SAY"
      ],
      "default": "UNSPECIFIED"
    },
    "typesItemType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "APPOINTMENT_ITEM",
        "CLASS_ITEM",
        "PACKAGE_ITEM",
        "GIFT_CERTIFICATE_ITEM",
        "MEMBERSHIP_ITEM",
        "TOP_UP_ITEM"
      ],
      "default": "UNKNOWN"
    },
    "typesPaginationInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean"
        },
        "hasPrevious": {
          "type": "boolean"
        },
        "nextOffset": {
          "type": "integer",
          "format": "int32"
        },
        "previousOffset": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Pagination Info for report"
    },
    "typesPaymentMethod": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_PAYMENT_METHOD",
        "CASH",
        "STRIPE_CARD",
        "SQUARE_CARD",
        "PACKAGE",
        "GIFT_CERTIFICATE",
        "MEMBERSHIP",
        "DISCOUNT_CODE",
        "CREDIT_CARD",
        "ECHECK",
        "DEBIT_CARD",
        "CREDIT_CARD_AND_CASH",
        "GIFT_CERTIFICATE_OFFLINE",
        "GIFT_CERTIFICATE_AND_CASH",
        "INSURANCE",
        "CHEQUE",
        "RADIUS",
        "RAZORPAY_ACCOUNT",
        "PAYPAL_ACCOUNT"
      ],
      "default": "UNSPECIFIED_PAYMENT_METHOD",
      "description": "- CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
      "title": "PaymentMethod defines the all the type of mode of payment supported by saastack"
    },
    "typesPrice": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "currency": {
          "type": "string"
        },
        "amountInFloat": {
          "type": "number",
          "format": "double",
          "title": "@deprecated - DO NOT USE"
        }
      },
      "title": "Generic Price object"
    },
    "typesProtobuf": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "title": "TypeUrl specifies the path of the protocol buffer message"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Data is valid serialized protocol buffer message"
        }
      },
      "title": "Protobuf represesnts any serialized protocol buffer message"
    },
    "typesTaxInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "percentage": {
          "type": "number",
          "format": "float"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1AcceptPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1ApplicableDiscount": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "discountId": {
          "type": "string"
        },
        "discountables": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Discountable"
          }
        },
        "totalDiscount": {
          "$ref": "#/definitions/typesPrice"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "discountType": {
          "$ref": "#/definitions/v1CartDiscountType",
          "title": "holds value for discount-type enum in discount\n0: PERCENTAGE; 1: FIXED"
        },
        "discountValue": {
          "$ref": "#/definitions/v1DiscountValue"
        }
      }
    },
    "v1BatchGetOrderItemsPaymentInfoResponse": {
      "type": "object",
      "properties": {
        "orderItemPaymentInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItemPaymentInfo"
          }
        }
      }
    },
    "v1BatchGetOrderItemsResponse": {
      "type": "object",
      "properties": {
        "orderItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItem"
          }
        }
      }
    },
    "v1BatchGetOrderItemsTypeCountResponse": {
      "type": "object",
      "properties": {
        "orderItemsTypeCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItemsTypeCount"
          }
        }
      }
    },
    "v1BatchGetOrderItemsUsingOrderItemIdResponse": {
      "type": "object",
      "properties": {
        "orderItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItem"
          }
        }
      }
    },
    "v1BatchGetOrderResponse": {
      "type": "object",
      "properties": {
        "order": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Order"
          }
        }
      }
    },
    "v1BatchGetOrdersByItemIdResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetOrdersByItemIdResponse"
          }
        }
      }
    },
    "v1BatchImportOrderRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "importOrderRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportOrderRequest"
          }
        }
      }
    },
    "v1BatchImportOrderResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Order"
          }
        }
      }
    },
    "v1Buyer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is required for chaku as prefix is not provided"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "displayCustomerId": {
          "type": "string"
        }
      }
    },
    "v1CancelOrderRequest": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "buyerId": {
          "type": "string"
        },
        "itemIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "optional"
        },
        "skipCancellingItems": {
          "type": "boolean"
        },
        "skipCancelOrder": {
          "type": "boolean"
        }
      }
    },
    "v1CartItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "item": {
          "$ref": "#/definitions/typesProtobuf"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice",
          "title": "final price after adding tax and discount without saved payment-sources"
        },
        "actualPrice": {
          "$ref": "#/definitions/typesPrice",
          "title": "Display price to be used in UI"
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "valid": {
          "type": "boolean",
          "title": "specify if cart-item is bookable"
        },
        "recurringId": {
          "type": "string"
        },
        "tax": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTaxInfo"
          },
          "title": "additional fields"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "string title = 8;\n   string sub_title = 9;\n   string description = 10;\n   map<string, string> template_data = 11;\n   saastack.types.ItemType item_type = 12;\n   string image = 13;\n   map<string, string> actions = 14;"
        },
        "discountedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "cartPaymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartPaymentSource"
          },
          "title": "just to hold payment-sources-info corresponding to cart-item"
        },
        "consumableIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "durationInMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "itemType": {
          "type": "string"
        },
        "referenceId": {
          "type": "string",
          "title": "to be transferred to order-item as reference"
        },
        "message": {
          "type": "string"
        },
        "leasedId": {
          "type": "string"
        },
        "leaseValidTill": {
          "type": "string",
          "format": "date-time"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "buyerOrganizationId": {
          "type": "string",
          "title": "will be used to create linking with appointment id"
        }
      }
    },
    "v1CompanySalesReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1SalesReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanySalesReportLocationData"
        }
      }
    },
    "v1CompanySalesReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CompanySalesReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanySalesReportData"
        }
      }
    },
    "v1ConfirmOrderItemsResponse": {
      "type": "object",
      "properties": {
        "order": {
          "$ref": "#/definitions/v1Order"
        }
      }
    },
    "v1CreateOrderRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent is the id of the location."
        },
        "buyer": {
          "$ref": "#/definitions/v1Buyer",
          "description": "Buyer is the person/entity who is purchasing this order."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Item"
          },
          "description": "Items are the list of items that need to be booked."
        },
        "cartId": {
          "type": "string",
          "title": "Only sent when cart item exists in items array"
        },
        "orderType": {
          "$ref": "#/definitions/v1OrderType"
        },
        "discountCode": {
          "type": "string",
          "title": "can be empty"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        },
        "policyData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptPolicyData"
          }
        }
      }
    },
    "v1CreateOrderWithoutCartRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "customer": {
          "$ref": "#/definitions/v1OrderCustomer"
        },
        "item": {
          "$ref": "#/definitions/v1Item"
        },
        "timezone": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        }
      }
    },
    "v1DiscountValue": {
      "type": "object",
      "properties": {
        "discountPercentage": {
          "type": "number",
          "format": "double",
          "title": "This value is used for discount percentage, this percent is used"
        },
        "discountPrices": {
          "$ref": "#/definitions/typesPrice",
          "title": "This value is used for fixed discount value and different currencies"
        }
      }
    },
    "v1Discountable": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string",
          "title": "item id on which discount can be applied"
        },
        "discount": {
          "$ref": "#/definitions/typesPrice",
          "title": "discount that can be applied on each item"
        }
      }
    },
    "v1GetCompanySalesReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySalesReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        }
      }
    },
    "v1GetDueAmountResponse": {
      "type": "object",
      "properties": {
        "dueAmounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        }
      }
    },
    "v1GetGroupedCompanySalesReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedCompanySalesReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetGroupedDiscountOrderReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedDiscountOrderReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetGroupedSalesReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedSalesReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetOrderPaymentInfoResponse": {
      "type": "object",
      "properties": {
        "payLater": {
          "type": "boolean"
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "orderItemPaymentInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItemPaymentInfo"
          }
        }
      }
    },
    "v1GetOrdersByItemIdResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Order"
          }
        }
      }
    },
    "v1GetSalesReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SalesReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        }
      }
    },
    "v1GroupedCompanySalesReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1GroupedSalesReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanySalesReportLocationData"
        }
      }
    },
    "v1GroupedCompanySalesReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedCompanySalesReportData"
        }
      }
    },
    "v1GroupedDiscountOrderReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parsed date-time: will be used as cursor // no need"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "totalDiscountedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "expectedRevenue": {
          "$ref": "#/definitions/typesPrice"
        },
        "ordersCount": {
          "type": "integer",
          "format": "int32"
        },
        "discountCode": {
          "type": "string"
        },
        "orderIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GroupedDiscountOrderReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedDiscountOrderReportData"
        }
      }
    },
    "v1GroupedSalesReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parsed date-time: will be used as cursor // no need"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "sales": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1GroupedSalesReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedSalesReportData"
        }
      }
    },
    "v1ImportOrderRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent is the id of the location."
        },
        "buyer": {
          "$ref": "#/definitions/v1Buyer",
          "description": "Buyer is the person/entity who is purchasing this order."
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Item"
          },
          "description": "Items are the list of items that need to be booked."
        },
        "orderType": {
          "$ref": "#/definitions/v1OrderType"
        },
        "discountCode": {
          "type": "string",
          "title": "can be empty"
        },
        "discountPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "discountDescription": {
          "type": "string"
        },
        "overrideDiscount": {
          "type": "boolean",
          "title": "directly use values provided in request for discount"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        },
        "payments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ImportPaymentInformation"
          }
        },
        "orderDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ImportPaymentInformation": {
      "type": "object",
      "properties": {
        "paymentMethod": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "amountByItem": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/typesPrice"
          }
        },
        "paymentSourceTransactionId": {
          "type": "string"
        },
        "paymentSourceId": {
          "type": "string"
        },
        "paymentOn": {
          "type": "string",
          "format": "date-time"
        },
        "paymentBy": {
          "type": "string"
        },
        "paymentNote": {
          "type": "string"
        }
      }
    },
    "v1Item": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "tertiaryText": {
          "type": "string"
        },
        "action": {
          "$ref": "#/definitions/v1Action"
        },
        "disabled": {
          "type": "boolean"
        },
        "image": {
          "type": "string"
        },
        "imageWidth": {
          "type": "string"
        },
        "imageHeight": {
          "type": "string"
        },
        "roundedImage": {
          "type": "boolean"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1ItemContent": {
      "type": "object",
      "properties": {
        "item": {
          "$ref": "#/definitions/typesProtobuf"
        },
        "itemId": {
          "type": "string",
          "title": "accepted item-ids: appointment"
        }
      }
    },
    "v1ListOrderResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListUnpaidOrderItemsOfBuyerResponse": {
      "type": "object",
      "properties": {
        "orders": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Order"
          }
        }
      }
    },
    "v1OfferAdditionalDiscountRequest": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "additionalDiscountType": {
          "$ref": "#/definitions/v1OrderDiscountType",
          "title": "holds value for discount-type enum in discount\n0: PERCENTAGE; 1: FIXED"
        },
        "additionalDiscountValue": {
          "$ref": "#/definitions/v1DiscountValue"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "v1Order": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the order"
        },
        "status": {
          "$ref": "#/definitions/v1OrderStatus",
          "title": "Status is the status of this order. (required)"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItem"
          },
          "title": "Items are the various items that are purchased in this order. (required)"
        },
        "buyer": {
          "$ref": "#/definitions/v1Buyer",
          "title": "Buyer is the entity/person this order is bought by. (required)"
        },
        "buyerDetails": {
          "$ref": "#/definitions/v1OrderCustomer"
        },
        "orderPrice": {
          "$ref": "#/definitions/v1OrderPrice",
          "title": "OrderPrice holds the price of this order, including tax, with discount. (required)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Metadata stores additional information about an order"
        },
        "actualPrice": {
          "$ref": "#/definitions/v1OrderPrice",
          "title": "OriginalPrice is the price of order without discount,\nincluding taxes, with each item tax-info object"
        },
        "placedOn": {
          "type": "string",
          "format": "date-time"
        },
        "orderType": {
          "$ref": "#/definitions/v1OrderType"
        },
        "discountCode": {
          "type": "string",
          "description": "Discounted flag indicates whether a discount coupon was applied on order",
          "title": "DiscountCode is code of discount coupon used"
        },
        "discountedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "guest": {
          "type": "boolean"
        },
        "orderDiscountInfo": {
          "$ref": "#/definitions/v1OrderDiscountInfo"
        },
        "shippingAddress": {
          "$ref": "#/definitions/typesAddress"
        },
        "fulfillmentStatus": {
          "type": "boolean"
        },
        "orderPaymentStatus": {
          "$ref": "#/definitions/v1OrderPaymentStatus",
          "title": "updated in pay-order"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "paymentMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesPaymentMethod"
          },
          "title": "just stored to apply condition in list"
        },
        "timezone": {
          "type": "string"
        },
        "lastTransactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "itemsCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1OrderCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "does not consider this from input"
        },
        "email": {
          "type": "string",
          "title": "Unique email of the customer"
        },
        "firstName": {
          "type": "string",
          "title": "First name of the customer"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the customer"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date of Birth of the customer"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile Image"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Telephone/Mobile Numbers of the customer // Validation can be added for numbers"
        },
        "phoneNumber": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "title": "Address of the customer"
        },
        "gender": {
          "$ref": "#/definitions/typesGender",
          "title": "Gender of Customer"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags saved against by a customer"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the customer"
        },
        "preferredLanguage": {
          "type": "string",
          "title": "Preferred Languages of a customer"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the customer"
        },
        "displayCustomerId": {
          "type": "string"
        },
        "passcode": {
          "type": "string"
        }
      },
      "title": "fields of customer (copied)"
    },
    "v1OrderDiscountInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "discountType": {
          "$ref": "#/definitions/v1OrderDiscountType",
          "title": "holds value for discount-type enum in discount\n1: PERCENTAGE; 2: FIXED"
        },
        "discountValue": {
          "$ref": "#/definitions/v1DiscountValue"
        }
      }
    },
    "v1OrderDiscountType": {
      "type": "string",
      "enum": [
        "OrderDiscountType_UNSPECIFIED",
        "PERCENTAGE",
        "FIXED"
      ],
      "default": "OrderDiscountType_UNSPECIFIED"
    },
    "v1OrderItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "chaku generated id"
        },
        "itemId": {
          "type": "string",
          "title": "contains item-id"
        },
        "itemType": {
          "type": "string",
          "title": "string specified by order-item"
        },
        "itemPrice": {
          "$ref": "#/definitions/v1OrderItemPrice",
          "title": "Price = original + additional - discount - additional-discount (without tax)"
        },
        "title": {
          "type": "string",
          "title": "additional fields"
        },
        "subTitle": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "item": {
          "$ref": "#/definitions/v1ItemContent"
        },
        "actualPrice": {
          "$ref": "#/definitions/v1OrderItemPrice",
          "title": "OriginalPrice is the price of item without discount"
        },
        "paidAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "calculated using \"final_price\" field in OrderPayAmount"
        },
        "refundAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "refunded from paid amount"
        },
        "dueAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "calculated using \"price\" field in OrderPayAmount"
        },
        "discountedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "filters": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "filters",
          "title": "filter data for sales report"
        },
        "shippable": {
          "type": "boolean"
        },
        "additionalAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "additionalAmountNote": {
          "type": "string"
        },
        "additionalDiscount": {
          "$ref": "#/definitions/typesPrice"
        },
        "additionalDiscountType": {
          "$ref": "#/definitions/v1OrderDiscountType",
          "title": "holds value for discount-type enum in discount\n1: PERCENTAGE; 2: FIXED"
        },
        "additionalDiscountValue": {
          "$ref": "#/definitions/v1DiscountValue"
        },
        "additionalDiscountNote": {
          "type": "string"
        },
        "consumableIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "stores consumable item, ex: apt-> service-ids, template; gc -> gc.id ..."
        },
        "durationInMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "orderItemStatus": {
          "$ref": "#/definitions/v1OrderItemStatus"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "itemHandlesPayment": {
          "type": "boolean"
        },
        "allowedPaymentMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesPaymentMethod"
          },
          "title": "empty -> all allowed"
        },
        "shouldSavePaymentMethod": {
          "type": "boolean",
          "title": "should save payment method corresponding to item"
        },
        "referenceId": {
          "type": "string",
          "title": "to be transferred from cart-item as reference"
        },
        "redeemedQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "refundedQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "orderItemPaymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OrderItemPaymentSource"
          }
        },
        "orderItemPaymentStatus": {
          "$ref": "#/definitions/v1OrderItemPaymentStatus"
        }
      },
      "description": "Id of the OrderItem\n appointment-id, ..."
    },
    "v1OrderItemIdentifier": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        }
      }
    },
    "v1OrderItemPaymentInfo": {
      "type": "object",
      "properties": {
        "orderItemId": {
          "type": "string"
        },
        "payLater": {
          "type": "boolean"
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1OrderItemPaymentSource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "code": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "sourceIdentifier": {
          "type": "string"
        }
      }
    },
    "v1OrderItemPaymentStatus": {
      "type": "string",
      "enum": [
        "OrderItemPaymentStatus_UNSPECIFIED",
        "ITEM_UNPAID",
        "ITEM_PAID",
        "ITEM_PARTIALLY_PAID",
        "ITEM_REFUND",
        "ITEM_FAILED"
      ],
      "default": "OrderItemPaymentStatus_UNSPECIFIED"
    },
    "v1OrderItemPrice": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/typesPrice",
          "title": "Price of the order item. (required)"
        },
        "tax": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTaxInfo"
          },
          "title": "Tax of the order item. (required)"
        }
      }
    },
    "v1OrderItemStatus": {
      "type": "string",
      "enum": [
        "OrderItemStatus_UNSPECIFIED",
        "LEASED",
        "CONFIRMED_DO_NOT_PROCESS_AFTER_PAYMENT",
        "CONFIRMED_PROCESS_AFTER_PAYMENT",
        "STATUS_CONFIRMED",
        "RELEASED",
        "STATUS_CANCELLED",
        "STATUS_FAILED"
      ],
      "default": "OrderItemStatus_UNSPECIFIED",
      "description": " - OrderItemStatus_UNSPECIFIED: default status\n - LEASED: item lease obtained\n - CONFIRMED_DO_NOT_PROCESS_AFTER_PAYMENT: item confirmed but on payment no extra processing needs to be done\n - CONFIRMED_PROCESS_AFTER_PAYMENT: item confirmed but on payment need to update item(ex. update status)\n - STATUS_CONFIRMED: item confirmed and finalized\n - RELEASED: item released after obtaining lease\n - STATUS_CANCELLED: item cancelled from order after successfully purchasing\n - STATUS_FAILED: order failed due to incomplete payment..."
    },
    "v1OrderItemsTypeCount": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64",
          "title": "Count represents different types of items (based on referenceId)"
        }
      }
    },
    "v1OrderNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1Order"
        },
        "position": {
          "type": "string"
        }
      }
    },
    "v1OrderPaymentStatus": {
      "type": "string",
      "enum": [
        "OrderPaymentStatus_UNSPECIFIED",
        "UNPAID",
        "PAID",
        "PARTIALLY_PAID",
        "REFUND",
        "FAILED",
        "PARTIALLY_REFUND"
      ],
      "default": "OrderPaymentStatus_UNSPECIFIED"
    },
    "v1OrderPrice": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/typesPrice",
          "title": "Price of the total order. (required)"
        },
        "tax": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTaxInfo"
          },
          "title": "Tax of the total order. (required)"
        }
      }
    },
    "v1OrderStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "PLACED",
        "CONFIRMED",
        "DROPPED",
        "CANCELLED",
        "ORDER_FAILED"
      ],
      "default": "UNSPECIFIED",
      "description": " - PLACED: Placed/Leased indicates that the order has been placed and is yet to be processed.\n - CONFIRMED: Confirmed indicates that the order has been confirmed.\n - DROPPED: Dropped indicates that the order has been placed and dropped before it was confirmed.\n - CANCELLED: Cancelled indicates that the order has been confirmed and has been cancelled."
    },
    "v1OrderType": {
      "type": "string",
      "enum": [
        "CLIENT_SIDE",
        "ADMIN_SIDE"
      ],
      "default": "CLIENT_SIDE"
    },
    "v1SalesReportData": {
      "type": "object",
      "properties": {
        "orderDate": {
          "type": "string",
          "format": "date-time"
        },
        "buyerId": {
          "type": "string"
        },
        "buyerName": {
          "type": "string"
        },
        "buyerEmail": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "tax": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTaxInfo"
          }
        },
        "total": {
          "$ref": "#/definitions/typesPrice"
        },
        "paidAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "orderId": {
          "type": "string"
        },
        "discountName": {
          "type": "string"
        },
        "discountCode": {
          "type": "string"
        },
        "discountType": {
          "$ref": "#/definitions/v1OrderDiscountType"
        },
        "discountValue": {
          "$ref": "#/definitions/v1DiscountValue"
        },
        "discountAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "lastTransactionDate": {
          "type": "string",
          "format": "date-time"
        },
        "buyerDisplayId": {
          "type": "string"
        },
        "additionalAmountNote": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "additionalDiscountNote": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SalesReportDropDownFilter": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "https://appointy.atlassian.net/browse/AXN-3784"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bookedByUserId": {
          "type": "string"
        },
        "discountCoupon": {
          "type": "string"
        }
      }
    },
    "v1SalesReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1SalesReportData"
        }
      }
    },
    "v1UpsertAdditionalAmountRequest": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "additionalAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "note": {
          "type": "string"
        }
      }
    },
    "v1ValidateDiscountResponse": {
      "type": "object",
      "properties": {
        "applicableDiscount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ApplicableDiscount"
          }
        }
      }
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "StaffProfilesBatchUpdateStaffProfilesBody": {
      "type": "object",
      "properties": {
        "profileIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staffProfile": {
          "$ref": "#/definitions/v1StaffProfile"
        },
        "updateMask": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "skiped values"
        }
      }
    },
    "StaffProfilesUpdateStaffProfileBody": {
      "type": "object",
      "properties": {
        "staffProfile": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "title": "FirstName of the service provider"
            },
            "lastName": {
              "type": "string",
              "title": "LastName of the service provider"
            },
            "email": {
              "type": "string",
              "description": "Email of the service provider."
            },
            "phoneNumber": {
              "type": "string",
              "description": "PhoneNumber of the service provider."
            },
            "profileImage": {
              "$ref": "#/definitions/typesGalleryItem",
              "description": "ProfileImage of the service provider."
            },
            "gender": {
              "$ref": "#/definitions/typesGender",
              "title": "Gender of the service provider"
            },
            "qualifications": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "List of qualifications of service provider"
            },
            "description": {
              "type": "string",
              "title": "Description of service provider"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional metadata of the service provider"
            },
            "profileType": {
              "$ref": "#/definitions/v1StaffProfileType",
              "title": "Profile type"
            },
            "userId": {
              "type": "string",
              "title": "user"
            },
            "timezone": {
              "type": "string",
              "title": "time zone of corresponding employee"
            },
            "provideServices": {
              "type": "boolean",
              "title": "Does staff provide services"
            },
            "staffVisibility": {
              "$ref": "#/definitions/v1StaffVisibility",
              "title": "staff visibility"
            }
          }
        },
        "updateMask": {
          "type": "string"
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      }
    },
    "typesExtendedFieldSubmissionValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "stringKey": {
          "type": "string"
        },
        "intKey": {
          "type": "string",
          "format": "int64"
        },
        "floatKey": {
          "type": "number",
          "format": "float"
        },
        "boolKey": {
          "type": "boolean"
        },
        "addressKey": {
          "$ref": "#/definitions/typesAddress"
        },
        "stringArrKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intArrKey": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1BatchCreateStaffProfileRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffProfile"
          }
        },
        "extendedFieldSubmissionValuesInput": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedFieldSubmissionValueInput"
          }
        }
      }
    },
    "v1BatchCreateStaffProfileResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffProfileWrapper"
          }
        }
      }
    },
    "v1BatchGetStaffProfileResponse": {
      "type": "object",
      "properties": {
        "staffProfile": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffProfile"
          }
        }
      }
    },
    "v1CompanyStaffReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1StaffReportData"
        }
      }
    },
    "v1CompanyStaffReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanyStaffReportData"
        }
      }
    },
    "v1CompanyStaffReportSortBy": {
      "type": "string",
      "enum": [
        "CompanyStaffReportSortBy_UNDEFINED",
        "CompanyStaffReportSortBy_EmployeeName",
        "CompanyStaffReportSortBy_EmployeeEmail"
      ],
      "default": "CompanyStaffReportSortBy_UNDEFINED"
    },
    "v1CreateStaffProfileRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent: employee-id"
        },
        "staffProfile": {
          "$ref": "#/definitions/v1StaffProfile"
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      }
    },
    "v1EmployeeFormFieldOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1ExtendedFieldSubmissionValueInput": {
      "type": "object",
      "properties": {
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      }
    },
    "v1GeneratePrivateUrlResponse": {
      "type": "object",
      "properties": {
        "privateUrl": {
          "type": "string"
        }
      }
    },
    "v1GetCompanyStaffReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyStaffReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetEmployeesCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListEmployeesPerformingServiceResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SerializedEmployeeNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListEmployeesWithServicesResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SerializedEmployeeNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        },
        "count": {
          "$ref": "#/definitions/v1ServicesEmployeeCount"
        }
      }
    },
    "v1ListStaffProfileResponse": {
      "type": "object",
      "properties": {
        "staffProfile": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffProfile"
          }
        }
      }
    },
    "v1RegenerateStaffLinkResponse": {
      "type": "object",
      "properties": {
        "guid": {
          "type": "string"
        }
      }
    },
    "v1SerializedEmployeeNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/typesProtobuf",
          "title": "Employee node is added in connection"
        }
      }
    },
    "v1ServicesEmployeeCount": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64"
        },
        "activeCount": {
          "type": "string",
          "format": "int64"
        },
        "inactiveCount": {
          "type": "string",
          "format": "int64"
        },
        "canLoginCount": {
          "type": "string",
          "format": "int64"
        },
        "disableLoginCount": {
          "type": "string",
          "format": "int64"
        },
        "customCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ServicesEmployeeFilter": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "active": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "designation": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "hasExtendedProfiles": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "changedSetting": {
          "type": "string"
        },
        "disabledLogin": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "query": {
          "type": "string"
        }
      }
    },
    "v1ServicesEmployeeSortBy": {
      "type": "string",
      "enum": [
        "ServicesEmployeeSortBy_CreatedOn",
        "ServicesEmployeeSortBy_LastName",
        "ServicesEmployeeSortBy_FirstName",
        "ServicesEmployeeSortBy_Email",
        "ServicesEmployeesSortBy_FullName"
      ],
      "default": "ServicesEmployeeSortBy_CreatedOn"
    },
    "v1StaffFormField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "formFieldType": {
          "$ref": "#/definitions/v1StaffFormFieldType"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeFormFieldOption"
          }
        },
        "multiple": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1StaffFormFieldType": {
      "type": "string",
      "enum": [
        "FormFieldType_UNDEFINED",
        "INPUT",
        "CHECKBOX",
        "SELECT",
        "ADDRESS"
      ],
      "default": "FormFieldType_UNDEFINED"
    },
    "v1StaffProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent: employee-id"
        },
        "firstName": {
          "type": "string",
          "title": "FirstName of the service provider"
        },
        "lastName": {
          "type": "string",
          "title": "LastName of the service provider"
        },
        "email": {
          "type": "string",
          "description": "Email of the service provider."
        },
        "phoneNumber": {
          "type": "string",
          "description": "PhoneNumber of the service provider."
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "description": "ProfileImage of the service provider."
        },
        "gender": {
          "$ref": "#/definitions/typesGender",
          "title": "Gender of the service provider"
        },
        "qualifications": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "List of qualifications of service provider"
        },
        "description": {
          "type": "string",
          "title": "Description of service provider"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the service provider"
        },
        "profileType": {
          "$ref": "#/definitions/v1StaffProfileType",
          "title": "Profile type"
        },
        "userId": {
          "type": "string",
          "title": "user"
        },
        "timezone": {
          "type": "string",
          "title": "time zone of corresponding employee"
        },
        "provideServices": {
          "type": "boolean",
          "title": "Does staff provide services"
        },
        "staffVisibility": {
          "$ref": "#/definitions/v1StaffVisibility",
          "title": "staff visibility"
        }
      }
    },
    "v1StaffProfileFilter": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "visibility": {
          "$ref": "#/definitions/v1StaffVisibility"
        },
        "profileType": {
          "$ref": "#/definitions/v1StaffProfileType"
        },
        "provideServices": {
          "$ref": "#/definitions/typesBooleanFilter"
        }
      }
    },
    "v1StaffProfileType": {
      "type": "string",
      "enum": [
        "SERVICE_PROVIDER",
        "OTHER"
      ],
      "default": "SERVICE_PROVIDER"
    },
    "v1StaffProfileWrapper": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1StaffProfile"
        },
        "error": {
          "type": "string"
        }
      }
    },
    "v1StaffReportData": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "employeeFullName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "employeeIsActive": {
          "type": "boolean"
        },
        "timezone": {
          "type": "string"
        },
        "employeeDesignation": {
          "type": "string"
        },
        "employeeDepartment": {
          "type": "string"
        },
        "secondaryDesignations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "secondaryDepartments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staffId": {
          "type": "string"
        },
        "staffFirstName": {
          "type": "string"
        },
        "staffLastName": {
          "type": "string"
        },
        "staffFullName": {
          "type": "string"
        },
        "staffEmail": {
          "type": "string"
        },
        "staffDescription": {
          "type": "string"
        },
        "staffQualifications": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "providesServices": {
          "type": "boolean"
        },
        "staffVisibility": {
          "$ref": "#/definitions/v1StaffVisibility"
        },
        "staffBookingLink": {
          "type": "string"
        },
        "assignedServicesTitle": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "assignedLocationsName": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "staffExtendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "staffExtendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffFormField"
          }
        },
        "userExtendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "userExtendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StaffFormField"
          }
        },
        "employeeSsoId": {
          "type": "string"
        },
        "employeeCreatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1StaffReportFilters": {
      "type": "object",
      "properties": {
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "useActiveFilter": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "serviceTitle": {
          "type": "string"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "employeeDesignation": {
          "type": "string"
        },
        "employeeDepartment": {
          "type": "string"
        }
      }
    },
    "v1StaffVisibility": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PUBLIC",
        "PRIVATE",
        "PRIVATE_WITH_LINK"
      ],
      "default": "UNKNOWN"
    },
    "v1UpdateProfileImageRequest": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "updateAll": {
          "type": "boolean"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile image"
        },
        "staffIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "used to remove cache"
        }
      }
    },
    "v1UpdateProfileImageResponse": {
      "type": "object",
      "properties": {
        "profileId": {
          "type": "string"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      }
    },
    "v1BatchGetLeaseResponse": {
      "type": "object",
      "properties": {
        "leases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GenericLease"
          }
        }
      }
    },
    "v1Details": {
      "type": "object",
      "properties": {
        "objects": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "v1GenericLease": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier for a ticket with the specified prefix"
        },
        "details": {
          "$ref": "#/definitions/v1Details",
          "title": "object which requires to obtain lease"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "title": "lease expiry time period will be set in code"
        }
      }
    },
    "typesChannelType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CHANNEL_TYPE",
        "EMAIL",
        "SMS",
        "PUSH",
        "WEB",
        "CALENDAR"
      ],
      "default": "UNKNOWN_CHANNEL_TYPE"
    },
    "typesSmsClient": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_SMS_CLIENT",
        "TWILIO",
        "PLIVO",
        "SIGNAL_WIRE",
        "GOV_DELIVERY",
        "OTHER_API",
        "TELNYX"
      ],
      "default": "UNSPECIFIED_SMS_CLIENT"
    },
    "v1ConsumeCreditResponse": {
      "type": "object",
      "properties": {
        "creditStore": {
          "$ref": "#/definitions/v1CreditStore"
        },
        "insufficientBalance": {
          "type": "boolean"
        }
      }
    },
    "v1CreditLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string",
          "title": "BusinessId company id"
        },
        "typeDetail": {
          "type": "string",
          "title": "Type is the name of consumed type eg: (phone number verification/ appointment reminder)"
        },
        "typeId": {
          "type": "string",
          "title": "Type id is the id of consumed type eg: (appointment_id, customer_id)"
        },
        "price": {
          "$ref": "#/definitions/typesPrice",
          "title": "Price of the consumed type. (required)"
        },
        "smsNumber": {
          "type": "string",
          "title": "SmsNumber is the phone number that will be used to identify country"
        },
        "channel": {
          "$ref": "#/definitions/typesChannelType",
          "title": "channel refers to email or sms"
        },
        "creditsUtilised": {
          "type": "number",
          "format": "float",
          "title": "the credits that will be utilised by the channel : calculated internally"
        },
        "gateway": {
          "$ref": "#/definitions/typesSmsClient",
          "title": "the gateway used for sending the sms\nin case of email currently we don't have different gateway"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "additional metadata for informational purpose"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CreditMaster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "taken for chaku"
        },
        "isoCountryCode": {
          "type": "string",
          "title": "country code"
        },
        "country": {
          "type": "string",
          "title": "country name"
        },
        "channel": {
          "$ref": "#/definitions/typesChannelType",
          "title": "channel type (sms/email)"
        },
        "gateway": {
          "$ref": "#/definitions/typesSmsClient",
          "title": "sms gateway (twilio/plivo)"
        },
        "gatewayCost": {
          "$ref": "#/definitions/typesPrice",
          "title": "gateway specific cost"
        },
        "saastackCost": {
          "$ref": "#/definitions/typesPrice",
          "title": "saastack specific cost (for eg: appointy specific cost)\nNOTE: calculated using : gatewayAmount.AmountInFloat*3"
        },
        "creditsCost": {
          "type": "number",
          "format": "float",
          "title": "credits required for sending a single (mail/sms)\nNOTE: calculated using : float32(int(math.Round(float64((100*saastackAmount.AmountInFloat)+0.5))))"
        }
      }
    },
    "v1CreditStore": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "boughtCredits": {
          "type": "number",
          "format": "float",
          "title": "BoughtCredits credits bought by the business(company)"
        },
        "availableCredits": {
          "type": "number",
          "format": "float",
          "title": "AvailableCredits credits available at any point of time\nAvailableCredits <= BoughtCredits"
        },
        "totalSms": {
          "type": "string",
          "format": "int64",
          "title": "TotalSms sent"
        },
        "email": {
          "type": "string",
          "title": "email address for communicating about insufficient credits"
        },
        "totalEmailSent": {
          "type": "string",
          "format": "int64"
        },
        "emailLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListCreditMasterResponse": {
      "type": "object",
      "properties": {
        "creditMaster": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreditMaster"
          }
        }
      }
    },
    "v1ListCreditReportResponse": {
      "type": "object",
      "properties": {
        "credits": {
          "$ref": "#/definitions/v1CreditStore"
        },
        "creditLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreditLog"
          }
        }
      }
    },
    "v1AppointmentNotificationPreference": {
      "type": "string",
      "enum": [
        "ALWAYS",
        "NEVER",
        "MANUAL"
      ],
      "default": "ALWAYS"
    },
    "v1AppointmentSetting": {
      "type": "object",
      "properties": {
        "titleOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "notificationPreference": {
          "$ref": "#/definitions/v1AppointmentNotificationPreference"
        }
      }
    },
    "v1AppointyUserSettingData": {
      "type": "object",
      "properties": {
        "appointmentSetting": {
          "$ref": "#/definitions/v1AppointmentSetting"
        },
        "blockHourSetting": {
          "$ref": "#/definitions/v1BlockHourSetting"
        },
        "calendarSetting": {
          "$ref": "#/definitions/v1CalendarSetting"
        },
        "openHourSetting": {
          "$ref": "#/definitions/v1OpenHourSetting"
        },
        "meetingSetting": {
          "$ref": "#/definitions/v1MeetingSetting"
        }
      }
    },
    "v1BlockHourSetting": {
      "type": "object",
      "properties": {
        "resourceColors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CalendarDuration": {
      "type": "string",
      "enum": [
        "AUTOMATIC",
        "MANUALLY"
      ],
      "default": "AUTOMATIC"
    },
    "v1CalendarFilterGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is user_id"
        },
        "name": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string",
          "title": "Per source per user there can be max 5 filter settings"
        },
        "pin": {
          "type": "boolean"
        },
        "selectedStatuses": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "selectedFilterIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "showBlockTime": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CalendarSetting": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "weekends": {
          "type": "boolean"
        },
        "columnWidth": {
          "type": "integer",
          "format": "int32"
        },
        "rowHeight": {
          "type": "integer",
          "format": "int32"
        },
        "view": {
          "type": "string"
        },
        "minEventDuration": {
          "type": "integer",
          "format": "int32"
        },
        "resourceColors": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "weekdays": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "calendarDuration": {
          "$ref": "#/definitions/v1CalendarDuration"
        },
        "selectedResource": {
          "type": "string"
        },
        "selectedFilters": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "groupBy": {
          "type": "integer",
          "format": "int32"
        },
        "resourceOrder": {
          "$ref": "#/definitions/v1ResourceOrder"
        },
        "filterResourceWithEvents": {
          "type": "boolean"
        },
        "startOfWeek": {
          "type": "integer",
          "format": "int32",
          "title": "0: SUNDAY, 1: MONDAY ... 6: SATURDAY, 7: SUNDAY"
        },
        "slotInterval": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1DeleteCalendarFilterGroupResponse": {
      "type": "object",
      "properties": {
        "deletedFilterGroup": {
          "$ref": "#/definitions/v1CalendarFilterGroup"
        }
      }
    },
    "v1GetAppointyUserSettingsResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "appointyUserSettingsData": {
          "$ref": "#/definitions/v1AppointyUserSettingData"
        }
      }
    },
    "v1ListCalendarFilterGroupResponse": {
      "type": "object",
      "properties": {
        "filterGroups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarFilterGroup"
          }
        }
      }
    },
    "v1MeetingSetting": {
      "type": "object",
      "properties": {
        "savedEmployees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SavedEmployee"
          }
        }
      }
    },
    "v1OpenHourSetting": {
      "type": "object",
      "properties": {
        "weekends": {
          "type": "boolean"
        },
        "resourceColumnWidth": {
          "type": "integer",
          "format": "int32"
        },
        "view": {
          "type": "string"
        }
      }
    },
    "v1ResourceOrder": {
      "type": "string",
      "enum": [
        "MAX_EVENTS",
        "MIN_EVENTS",
        "UNSPECIFIED"
      ],
      "default": "MAX_EVENTS",
      "title": "- MAX_EVENTS: default value"
    },
    "v1SavedEmployee": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "checked": {
          "type": "boolean"
        }
      }
    },
    "v1UpsertAppointyUserSettingsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "appointyUserSettingsData": {
          "$ref": "#/definitions/v1AppointyUserSettingData"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpsertCalendarFilterGroupRequest": {
      "type": "object",
      "properties": {
        "filterGroup": {
          "$ref": "#/definitions/v1CalendarFilterGroup"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpsertCalendarFilterGroupResponse": {
      "type": "object",
      "properties": {
        "filterGroup": {
          "$ref": "#/definitions/v1CalendarFilterGroup"
        }
      }
    },
    "v1BlacklistedDomain": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        }
      }
    },
    "v1BlacklistedDomainNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1BlacklistedDomain"
        }
      }
    },
    "v1EmailType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "BLACKLISTED",
        "INAUTHENTIC",
        "VERIFIED"
      ],
      "default": "UNSPECIFIED"
    },
    "v1IPQualityScore": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean",
          "title": "ipqualityscore fields"
        },
        "valid": {
          "type": "boolean"
        },
        "disposable": {
          "type": "boolean"
        },
        "fraudScore": {
          "type": "number",
          "format": "float"
        },
        "honeypot": {
          "type": "boolean"
        },
        "dnsValid": {
          "type": "boolean"
        },
        "overallScore": {
          "type": "number",
          "format": "float"
        },
        "smtpScore": {
          "type": "number",
          "format": "float"
        },
        "suspect": {
          "type": "boolean"
        },
        "frequentComplainer": {
          "type": "boolean"
        },
        "recentAbuse": {
          "type": "boolean"
        },
        "deliverability": {
          "type": "string"
        },
        "smtpTrapScore": {
          "type": "string"
        },
        "timedOut": {
          "type": "boolean"
        }
      }
    },
    "v1ListBlacklistedDomainResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlacklistedDomainNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1VerifyEmailAuthenticityResponse": {
      "type": "object",
      "properties": {
        "response": {
          "$ref": "#/definitions/v1EmailType"
        },
        "isValid": {
          "type": "boolean"
        },
        "ipQualityScore": {
          "$ref": "#/definitions/v1IPQualityScore"
        }
      }
    },
    "v1ListSitbackAppointmentDataResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackAppointmentData"
          }
        }
      }
    },
    "v1SitbackAppointmentData": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "counsellorLocation": {
          "type": "string",
          "title": "employee_location"
        },
        "counsellorName": {
          "type": "string",
          "title": "employee_name"
        },
        "gambleAwareProvider": {
          "type": "string",
          "title": "company_name"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "appointment timeslot"
        },
        "serviceName": {
          "type": "string"
        },
        "customersData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackCustomerData"
          }
        },
        "attributes": {
          "$ref": "#/definitions/v1SitbackAppointmentFormAttributes"
        },
        "establishmentType": {
          "$ref": "#/definitions/v1SitbackEstablishmentType",
          "title": "appointment booked by details"
        }
      }
    },
    "v1SitbackAppointmentFormAttributes": {
      "type": "object",
      "properties": {
        "returningClient": {
          "type": "boolean"
        },
        "sessionType": {
          "type": "string"
        },
        "aboriginalSupportRequirements": {
          "type": "boolean"
        },
        "meetingLocation": {
          "type": "string"
        },
        "languageSupportRequirement": {
          "type": "string"
        }
      }
    },
    "v1SitbackCustomerData": {
      "type": "object",
      "properties": {
        "providerClientId": {
          "type": "string"
        },
        "customerName": {
          "type": "string"
        },
        "intakeStatus": {
          "type": "boolean"
        },
        "completionStatus": {
          "type": "string"
        }
      }
    },
    "v1SitbackEstablishmentType": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "DynamicLinksUpdateSingleUseLinkAppointmentBody": {
      "type": "object",
      "properties": {
        "dynamicLinkAppointment": {
          "type": "object",
          "properties": {
            "guid": {
              "type": "string"
            },
            "expireAt": {
              "type": "string",
              "format": "date-time"
            },
            "setting": {
              "$ref": "#/definitions/v1DynamicLinkAppointmentSetting"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "isSingleUse": {
              "type": "boolean"
            },
            "bookingId": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "bookingUpdatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "resourceId": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "isExpired": {
              "type": "boolean",
              "title": "is link is used"
            },
            "userId": {
              "type": "string",
              "title": "user id of user who creates user"
            }
          },
          "title": "guid: Unique id attached with the url\nexpire_at: guid expiry time\nis_single_use: guid will be single use only or multiple use\nbooking_id: stores the latest booking id corresponding to the url"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given location object can be updated.\nList of fields which can be updated are  :\nName , Description , Gallery , Address , Telephones"
        }
      }
    },
    "v1AvailableDynamicLinkSlots": {
      "type": "object",
      "properties": {
        "linkData": {
          "$ref": "#/definitions/v1DynamicLinkAppointment"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LinkSlot"
          }
        }
      }
    },
    "v1CreateDynamicLinkAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be location Id"
        },
        "dynamicLink": {
          "$ref": "#/definitions/v1DynamicLinkAppointment"
        }
      }
    },
    "v1DynamicLinkAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time"
        },
        "setting": {
          "$ref": "#/definitions/v1DynamicLinkAppointmentSetting"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isSingleUse": {
          "type": "boolean"
        },
        "bookingId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "bookingUpdatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "resourceId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "isExpired": {
          "type": "boolean",
          "title": "is link is used"
        },
        "userId": {
          "type": "string",
          "title": "user id of user who creates user"
        }
      },
      "title": "guid: Unique id attached with the url\nexpire_at: guid expiry time\nis_single_use: guid will be single use only or multiple use\nbooking_id: stores the latest booking id corresponding to the url"
    },
    "v1DynamicLinkAppointmentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1DynamicLinkAppointment",
          "title": "Node is the actual dynamic object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1DynamicLinkAppointmentSetting": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slot": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "customerEmail": {
          "type": "string"
        },
        "staffId": {
          "type": "string"
        },
        "allowOtherTimes": {
          "type": "boolean"
        },
        "otherStaffIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditionAnd": {
          "type": "boolean",
          "title": "determines whether to check availability for each staff combined(AND: true) or separately(OR: false)"
        },
        "otherInvitees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OtherInvitee"
          }
        }
      }
    },
    "v1LinkSlot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner\nParent is usually location. Not sure what it will be"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "channel": {
          "type": "string",
          "description": "Channel is the id of the channel."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources are the ids of the resources that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resource types are the ids of the resource types that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Capacity"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "otherEmployees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OtherEmployees of the meeting"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1ListDynamicLinkByResourceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DynamicLinkAppointmentNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "v1OtherInvitee": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "AppointmentsAddConsumersBody": {
      "type": "object",
      "properties": {
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "notes": {
          "type": "string",
          "title": "initial notes given"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        }
      }
    },
    "AppointmentsAddConsumersToRecurringAppointmentBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "notes": {
          "type": "string"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        }
      }
    },
    "AppointmentsBatchCancelConsumersBody": {
      "type": "object",
      "properties": {
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "AppointmentsCancelAllFutureAppointmentsBody": {
      "type": "object",
      "properties": {
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "AppointmentsCancelAppointmentBody": {
      "type": "object",
      "properties": {
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "consumerId": {
          "type": "string"
        }
      },
      "title": "Request to cancel appointment"
    },
    "AppointmentsCancelAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        }
      }
    },
    "AppointmentsCancelPortedAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        }
      }
    },
    "AppointmentsCancelRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string",
          "title": "one of the two will be required"
        },
        "thisAppointmentId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "customerId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        }
      }
    },
    "AppointmentsChangeAppointmentStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus",
          "title": "for internal use only"
        },
        "reason": {
          "type": "string",
          "title": "reason for status change"
        },
        "isAdmin": {
          "type": "boolean"
        }
      },
      "title": "Request to change appointment status"
    },
    "AppointmentsChangeAppointmentStatusByDataCodeBody": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus",
          "title": "NewStatus: new appointment status"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment for log service"
        }
      }
    },
    "AppointmentsChangeConsumerStatusBody": {
      "type": "object",
      "properties": {
        "cusId": {
          "type": "string"
        },
        "newConsumerStatus": {
          "$ref": "#/definitions/v1ConsumerStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string"
        }
      },
      "title": "Request to change consumer status"
    },
    "AppointmentsChangeRecurringAppointmentStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "originalAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "title": "OriginalAppointment is the appointment before update"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for status change"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "recurringId": {
          "type": "string",
          "title": "change recurring appointment status, all at a time"
        }
      },
      "title": "Request to change recurring-appointment status"
    },
    "AppointmentsDeleteRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string",
          "title": "one of the two will be required"
        },
        "thisAppointmentId": {
          "type": "string"
        }
      }
    },
    "AppointmentsListAppointmentsOfOrderBody": {
      "type": "object",
      "properties": {
        "recurringId": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateAppointmentBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "type": "object",
          "properties": {
            "timeSlot": {
              "$ref": "#/definitions/typesTimeslot",
              "title": "Timeslot of the appointment in UTC. (required)"
            },
            "resources": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Resource"
              },
              "title": "Resources booked in this appointment. (optional)"
            },
            "resourceTypes": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ResourceType"
              },
              "title": "Resource Types booked in this appointment. (optional)"
            },
            "service": {
              "$ref": "#/definitions/v1Service",
              "title": "Service of the appointment. (required)"
            },
            "channel": {
              "$ref": "#/definitions/v1Channel",
              "title": "Channel of the appointment. (optional)"
            },
            "employee": {
              "$ref": "#/definitions/v1Employee",
              "title": "Employee of the appointment. (required but can be filled using availability only in serialize appointment case)\nIn case of Meeting, this employee is considered to be the Host of the booking"
            },
            "invitedEmployees": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1InvitedEmployee"
              },
              "title": "InvitedEmployees represents list of employees other than the host that are booked in the appointment\nThis will only be used in case of meetings"
            },
            "consumers": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Consumer"
              },
              "title": "Consumers booked in this appointment. (optional)"
            },
            "quantity": {
              "type": "string",
              "format": "int64",
              "description": "total consumers",
              "title": "total no. of consumers in the appointment"
            },
            "bookingId": {
              "type": "string",
              "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id."
            },
            "recurringId": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/v1AppointmentStatus"
            },
            "paymentStatus": {
              "$ref": "#/definitions/v1AppointmentPaymentStatus"
            },
            "createdBy": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "source": {
              "type": "string"
            },
            "rescheduleAllowedTill": {
              "type": "string",
              "format": "date-time"
            },
            "cancellationAllowedTill": {
              "type": "string",
              "format": "date-time"
            },
            "totalPrice": {
              "$ref": "#/definitions/typesPrice"
            },
            "discountCode": {
              "type": "string"
            },
            "totalDiscountedPrice": {
              "$ref": "#/definitions/typesPrice"
            },
            "meetingData": {
              "$ref": "#/definitions/v1MeetingData"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "medium": {
              "type": "string"
            },
            "campaign": {
              "type": "string"
            },
            "isBookedByAdmin": {
              "type": "boolean",
              "title": "is_booked_by_admin true if booked by admin"
            },
            "reason": {
              "type": "string",
              "title": "reason for update or cancel"
            },
            "submissionData": {
              "type": "string",
              "format": "byte",
              "title": "form submission data, this is read only value, and is not stored in db"
            },
            "isIntakeFormSubmitted": {
              "type": "boolean"
            },
            "hasNotes": {
              "type": "boolean"
            },
            "historicalData": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1AppointmentHistory"
              },
              "title": "Appointment historical data"
            },
            "everRescheduled": {
              "type": "boolean",
              "title": "true on update in time"
            },
            "lastRescheduledBy": {
              "type": "string"
            },
            "lastRescheduledOn": {
              "type": "string",
              "format": "date-time"
            },
            "isLastRescheduledByAdmin": {
              "type": "boolean"
            },
            "lastStatusUpdatedBy": {
              "type": "string",
              "title": "Last Status Change fields"
            },
            "lastStatusUpdatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "isLastStatusUpdatedByAdmin": {
              "type": "boolean"
            },
            "recurrenceSet": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inviteeCanModify": {
              "type": "boolean",
              "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
            },
            "inviteeCanManageOtherInvitees": {
              "type": "boolean",
              "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
            },
            "viewGuestList": {
              "type": "boolean",
              "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment."
            },
            "lastRecurringAppointment": {
              "type": "boolean"
            }
          },
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "consumerId": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "note": {
          "type": "string",
          "title": "note"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "originalExtendedFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      },
      "title": "Request to update appointment"
    },
    "AppointmentsUpdateAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        }
      }
    },
    "AppointmentsUpdateAppointmentCustomStatusBody": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isDefault": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateConsumerRSVPByDataCodeBody": {
      "type": "object",
      "properties": {
        "rsvp": {
          "$ref": "#/definitions/typesRsvp"
        },
        "rsvpMessage": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateConsumersQuantityBody": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "consumerId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        }
      }
    },
    "AppointmentsUpdatePortedAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        }
      }
    },
    "AppointmentsUpdateRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/v1Appointment"
        },
        "updateMask": {
          "type": "string"
        },
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "skipValidation": {
          "type": "boolean",
          "title": "skip validation"
        },
        "customerId": {
          "type": "string"
        }
      }
    },
    "typesIntegrationType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "GOOGLECALENDAR",
        "OUTLOOK",
        "QUICKBOOKS",
        "STRIPE",
        "GOOGLE_BUSINESS_REVIEW",
        "YELP",
        "OTHERS",
        "FIREBASE",
        "WEBEX",
        "ZOOM",
        "GOOGLE_TAG_MANAGER",
        "GOOGLE_ANALYTICS",
        "FACEBOOK_PIXEL",
        "MIXPANEL",
        "SQUARE",
        "BRAINTREE",
        "PAYPAL",
        "ICLOUD",
        "INTERCOM",
        "GOOGLE_DRIVE",
        "DROPBOX",
        "GOOGLE_CONTACT",
        "ZAPIER",
        "MICROSOFT_TEAMS",
        "MICROSOFT_TEAMS_CONNECTOR",
        "CUSTOM_WEBHOOK",
        "SERVICE_NOW",
        "RAZORPAY",
        "SALESFORCE",
        "FRESH_SALES",
        "OPEN_HOUR_GOOGLE_CALENDAR",
        "BIG_COMMERCE",
        "XERO",
        "MAILCHIMP",
        "ZENDESK",
        "HUBSPOT"
      ],
      "default": "UNKNOWN_TYPE",
      "title": "- GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar"
    },
    "typesMetaDetailsWrapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "deletedBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "updateMask": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "typesRsvp": {
      "type": "string",
      "enum": [
        "NOT_RESPONDED",
        "YES",
        "NO",
        "MAYBE"
      ],
      "default": "NOT_RESPONDED"
    },
    "v1AddConsumersToRecurringAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointmentsWithMessage": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1AddOrRemoveMeetingInviteesRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "InvitedEmployees will contain list of employees\n * to be added if Remove is false,\n * or to be removed if Remove is true"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "Similarly, consumers will contain list of consumers\n * to be added if Remove is false,\n * or to be removed if Remove is true"
        },
        "remove": {
          "type": "boolean",
          "title": "Remove flag as discussed in Employees and Consumers fields above"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        }
      }
    },
    "v1AdditionalReportsFilter": {
      "type": "object",
      "properties": {
        "vehicleRegistrationNumber": {
          "type": "string"
        },
        "buyerOrganizationName": {
          "type": "string"
        },
        "buyerOrganizationId": {
          "type": "string"
        }
      }
    },
    "v1Appointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the appointment."
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Timeslot of the appointment in UTC. (required)"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          },
          "title": "Resources booked in this appointment. (optional)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          },
          "title": "Resource Types booked in this appointment. (optional)"
        },
        "service": {
          "$ref": "#/definitions/v1Service",
          "title": "Service of the appointment. (required)"
        },
        "channel": {
          "$ref": "#/definitions/v1Channel",
          "title": "Channel of the appointment. (optional)"
        },
        "employee": {
          "$ref": "#/definitions/v1Employee",
          "title": "Employee of the appointment. (required but can be filled using availability only in serialize appointment case)\nIn case of Meeting, this employee is considered to be the Host of the booking"
        },
        "invitedEmployees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "InvitedEmployees represents list of employees other than the host that are booked in the appointment\nThis will only be used in case of meetings"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "Consumers booked in this appointment. (optional)"
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "description": "total consumers",
          "title": "total no. of consumers in the appointment"
        },
        "bookingId": {
          "type": "string",
          "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id."
        },
        "recurringId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "rescheduleAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "cancellationAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "discountCode": {
          "type": "string"
        },
        "totalDiscountedPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "meetingData": {
          "$ref": "#/definitions/v1MeetingData"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "isBookedByAdmin": {
          "type": "boolean",
          "title": "is_booked_by_admin true if booked by admin"
        },
        "reason": {
          "type": "string",
          "title": "reason for update or cancel"
        },
        "submissionData": {
          "type": "string",
          "format": "byte",
          "title": "form submission data, this is read only value, and is not stored in db"
        },
        "isIntakeFormSubmitted": {
          "type": "boolean"
        },
        "hasNotes": {
          "type": "boolean"
        },
        "historicalData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentHistory"
          },
          "title": "Appointment historical data"
        },
        "everRescheduled": {
          "type": "boolean",
          "title": "true on update in time"
        },
        "lastRescheduledBy": {
          "type": "string"
        },
        "lastRescheduledOn": {
          "type": "string",
          "format": "date-time"
        },
        "isLastRescheduledByAdmin": {
          "type": "boolean"
        },
        "lastStatusUpdatedBy": {
          "type": "string",
          "title": "Last Status Change fields"
        },
        "lastStatusUpdatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isLastStatusUpdatedByAdmin": {
          "type": "boolean"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inviteeCanModify": {
          "type": "boolean",
          "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean",
          "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
        },
        "viewGuestList": {
          "type": "boolean",
          "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment."
        },
        "lastRecurringAppointment": {
          "type": "boolean"
        }
      }
    },
    "v1AppointmentBuyerOrganization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "This is created for VTNZ Client"
    },
    "v1AppointmentCancellationPolicyResponse": {
      "type": "object",
      "properties": {
        "cancellationPossible": {
          "type": "boolean"
        },
        "penalty": {
          "$ref": "#/definitions/typesPrice"
        },
        "penaltyPercentage": {
          "type": "number",
          "format": "double"
        },
        "reason": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        }
      }
    },
    "v1AppointmentCustomStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1AppointmentEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "title": "title of service"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parent": {
          "type": "string",
          "title": "contains location-id"
        }
      }
    },
    "v1AppointmentFormField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "formFieldType": {
          "$ref": "#/definitions/v1AppointmentFormFieldType"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormFieldOption"
          }
        },
        "multiple": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1AppointmentFormFieldOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1AppointmentFormFieldType": {
      "type": "string",
      "enum": [
        "FormFieldType_UNDEFINED",
        "INPUT",
        "CHECKBOX",
        "SELECT",
        "ADDRESS"
      ],
      "default": "FormFieldType_UNDEFINED"
    },
    "v1AppointmentHistory": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "meta data for this history object"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "isCreatedByAdmin": {
          "type": "boolean"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Old Appointment data"
        },
        "serviceId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "inviteeCanModify": {
          "type": "boolean"
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean"
        },
        "viewGuestList": {
          "type": "boolean"
        },
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inviteeEmployeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceTypeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        }
      }
    },
    "v1AppointmentMonthView": {
      "type": "string",
      "enum": [
        "StaffView",
        "ServiceView",
        "ResourceView",
        "LocationView"
      ],
      "default": "StaffView"
    },
    "v1AppointmentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the Appointment list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Information about the AppointmentNode"
        },
        "buyerOrganization": {
          "$ref": "#/definitions/v1AppointmentBuyerOrganization"
        }
      },
      "title": "Information about each Appointment and its position"
    },
    "v1AppointmentNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "all its validations are checked in notes service"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "private": {
          "type": "boolean"
        },
        "typeId": {
          "type": "string"
        },
        "against": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "appTypeName": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details"
        },
        "updatedBy": {
          "type": "string"
        },
        "deletedBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "updatedByName": {
          "type": "string"
        },
        "deletedByName": {
          "type": "string"
        },
        "createdByEmail": {
          "type": "string"
        },
        "updatedByEmail": {
          "type": "string"
        },
        "deletedByEmail": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1AppointmentNoteNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentNote",
          "title": "Node is the actual consumer object"
        }
      }
    },
    "v1AppointmentPaymentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_PAYMENT_UNKNOWN",
        "APPOINTMENT_PAYMENT_FAILED",
        "APPOINTMENT_PAYMENT_PAID",
        "APPOINTMENT_PAYMENT_UNPAID",
        "APPOINTMENT_PAYMENT_REFUND",
        "APPOINTMENT_PAYMENT_PARTIAL"
      ],
      "default": "APPOINTMENT_PAYMENT_UNKNOWN"
    },
    "v1AppointmentRefundStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_REFUND_STATUS_UNKNOWN",
        "APPOINTMENT_PAYMENT_FULL_REFUND",
        "APPOINTMENT_PAYMENT_PARTIAL_REFUND"
      ],
      "default": "APPOINTMENT_REFUND_STATUS_UNKNOWN"
    },
    "v1AppointmentReportData": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerWithTags"
          }
        },
        "serviceTitle": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        },
        "bookingDate": {
          "type": "string",
          "format": "date-time"
        },
        "appointmentDate": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "source": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isBookedByAdmin": {
          "type": "boolean"
        },
        "bookedByUserId": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "employeeId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "forms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReportIntakeForm"
          }
        },
        "submissionValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UnitSubmissionValue"
          }
        },
        "invitedEmployees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "Invited employees"
        },
        "rescheduledByUserId": {
          "type": "string"
        },
        "cancelledByUserId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "extendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "extendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "employeeExtendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "employeeExtendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "discountCode": {
          "type": "string"
        },
        "totalDiscountedPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "serviceCategory": {
          "type": "string"
        },
        "employeeSsoId": {
          "type": "string"
        },
        "membershipTitle": {
          "type": "string"
        },
        "membershipCode": {
          "type": "string"
        },
        "refundStatus": {
          "$ref": "#/definitions/v1AppointmentRefundStatus"
        },
        "refundedQuantity": {
          "type": "string",
          "format": "int64"
        },
        "bookingUrl": {
          "type": "string"
        },
        "additionalAmountNote": {
          "type": "string"
        },
        "additionalDiscountNote": {
          "type": "string"
        },
        "buyerOrganization": {
          "$ref": "#/definitions/v1AppointmentBuyerOrganization"
        }
      }
    },
    "v1AppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1AppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentReportData"
        }
      }
    },
    "v1AppointmentReportSortBy": {
      "type": "string",
      "enum": [
        "AppointmentReportSortBy_UNDEFINED",
        "AppointmentReportSortBy_StartTime",
        "AppointmentReportSortBy_EndTime",
        "AppointmentReportSortBy_BookingTime",
        "AppointmentReportSortBy_LastRescheduledTime",
        "AppointmentReportSortBy_ServiceTitle",
        "AppointmentReportSortBy_EmployeeName",
        "AppointmentReportSortBy_EmployeeEmail",
        "AppointmentReportSortBy_CustomerName",
        "AppointmentReportSortBy_CustomerEmail"
      ],
      "default": "AppointmentReportSortBy_UNDEFINED"
    },
    "v1AppointmentSearchData": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "service": {
          "$ref": "#/definitions/v1ServiceSearchData"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerSearchData"
          },
          "title": "student data"
        },
        "employee": {
          "$ref": "#/definitions/v1UserSearchData",
          "title": "employee data"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        }
      }
    },
    "v1AppointmentSearchForCalendarResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentSearchNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "in PageInfo object, HasPrevious field is always ignored, do not use it"
        }
      }
    },
    "v1AppointmentSearchNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor is the current position of the cursor in the Appointment list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentSearchData",
          "title": "Information about appointment"
        }
      }
    },
    "v1AppointmentSortBy": {
      "type": "string",
      "enum": [
        "StartTime",
        "CreatedOn"
      ],
      "default": "StartTime"
    },
    "v1AppointmentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_STATUS_UNSPECIFIED",
        "APPOINTMENT_CONFIRMED",
        "APPOINTMENT_CANCELLED",
        "APPOINTMENT_WAITING_FOR_APPROVAL"
      ],
      "default": "APPOINTMENT_STATUS_UNSPECIFIED"
    },
    "v1AppointmentStatusFilter": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppointmentStatus"
          },
          "title": "status filter"
        },
        "paymentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppointmentPaymentStatus"
          },
          "title": "payment status filter"
        },
        "customStatus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer custom status"
        },
        "customStatusNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer custom status names (not used in reports at the moment)"
        }
      }
    },
    "v1AppointmentWithMessage": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/v1Appointment",
          "title": "App contains appointment object"
        },
        "isBooked": {
          "type": "boolean",
          "title": "whether appointment is booked or not"
        },
        "errorMessage": {
          "type": "string",
          "title": "error message for appointment"
        },
        "isUpdated": {
          "type": "boolean",
          "title": "whether appointment is updated or not"
        },
        "isCancelled": {
          "type": "boolean",
          "title": "whether appointment is cancelled or not"
        }
      }
    },
    "v1AppointmentsCancellationPoliciesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
          }
        }
      }
    },
    "v1AppointmentsMonthViewResponse": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DailyAppointmentViewCount"
          }
        }
      }
    },
    "v1AvailabilityStatus": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1BatchCancelAppointmentsRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "customerId": {
          "type": "string"
        }
      }
    },
    "v1BatchCancelAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointmentsWithMessage": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        },
        "cancellationPolicies": {
          "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
        }
      }
    },
    "v1BatchCancelConsumersResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        }
      }
    },
    "v1BatchCheckAvailabilityRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "description": "Appointments to be checked. If recurrence is set then only first is considered."
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Recurrence is the rrule set. It takes first of the Appointments field and applies recurrence."
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "checkOpenHours": {
          "type": "boolean"
        }
      }
    },
    "v1BatchCheckAvailabilityResponse": {
      "type": "object",
      "properties": {
        "cannotBook": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "List of items that cannot be booked.\nIf the request has recurrence then it is the index of slot in order built."
        },
        "slotsStatus": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1AvailabilityStatus"
          }
        }
      }
    },
    "v1BatchConsumerAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "consumersAppointmentCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerAppointmentCountResponse"
          }
        }
      }
    },
    "v1BatchCreateAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateAppointmentWrapper"
          },
          "title": "List of Appointments requested"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "setNotesPrivate": {
          "type": "boolean"
        },
        "importCall": {
          "type": "boolean"
        }
      }
    },
    "v1BatchCreateAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          },
          "title": "List of Appointment with message"
        },
        "bookingId": {
          "type": "string",
          "title": "Unique booking id of appointment"
        }
      }
    },
    "v1BatchGetAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointment": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1BatchUpdateAppointmentsRequest": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/v1Appointment"
        },
        "parent": {
          "type": "string"
        },
        "updateMask": {
          "type": "string"
        },
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "note": {
          "type": "string"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        }
      }
    },
    "v1BatchUpdateAppointmentsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "originalList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "description": "OriginalList contains original appointments before update with 1 to 1 mapping with list."
        }
      }
    },
    "v1CancelAllFutureAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointmentCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CancelAppointmentByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1CancelAppointmentResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        }
      }
    },
    "v1CancelRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "oldAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        },
        "cancellationPolicies": {
          "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
        }
      }
    },
    "v1ChangeAppointmentStatusByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1ChangeAppointmentStatusResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        },
        "updatedAppointment": {
          "$ref": "#/definitions/v1AppointmentWithMessage"
        }
      }
    },
    "v1ChangeRecurringAppointmentStatusResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
          }
        },
        "updatedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1Channel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CompanyAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1AppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanyAppointmentReportLocationData"
        }
      }
    },
    "v1CompanyAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1CompanyAppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanyAppointmentReportData"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1GroupedAppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanyGroupedAppointmentReportLocationData"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanyGroupedAppointmentReportData"
        }
      }
    },
    "v1ConfirmLeaseResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1Consumer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the customer"
        },
        "firstName": {
          "type": "string",
          "description": "First name of customer."
        },
        "lastName": {
          "type": "string",
          "description": "LastName of customer."
        },
        "email": {
          "type": "string",
          "description": "Email of customer."
        },
        "status": {
          "$ref": "#/definitions/v1ConsumerStatus",
          "title": "Status of customer whether unspecified, confirmed, cancelled or no show"
        },
        "language": {
          "type": "string",
          "description": "Language is the ISO language codes. For example 'en-US', 'fr', 'fr-CA'."
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'Asia/Kolkatta', 'America/Los_Angeles'"
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus",
          "title": "custom status"
        },
        "isBookedByAdmin": {
          "type": "boolean",
          "title": "is_booked_by_admin true if booked by admin"
        },
        "policyId": {
          "type": "string"
        },
        "acceptanceId": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "rescheduleLink": {
          "type": "string"
        },
        "cancelLink": {
          "type": "string"
        }
      }
    },
    "v1ConsumerAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "consumerId": {
          "type": "string"
        }
      }
    },
    "v1ConsumerData": {
      "type": "object",
      "properties": {
        "customerData": {
          "$ref": "#/definitions/v1CustomerData"
        },
        "studentData": {
          "$ref": "#/definitions/v1StudentData"
        }
      }
    },
    "v1ConsumerSearchData": {
      "type": "object",
      "properties": {
        "consumerId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "customer": {
          "$ref": "#/definitions/v1UserSearchData",
          "title": "Guardian data"
        }
      }
    },
    "v1ConsumerStatus": {
      "type": "string",
      "enum": [
        "CONSUMER_STATUS_UNSPECIFIED",
        "CONFIRMED",
        "CANCELLED"
      ],
      "default": "CONSUMER_STATUS_UNSPECIFIED"
    },
    "v1ConsumerType": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "STUDENT"
      ],
      "default": "CUSTOMER",
      "description": "More type will be added in the future."
    },
    "v1ConsumerWithTags": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1Consumer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyId": {
          "type": "string"
        },
        "extendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "extendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "ssoId": {
          "type": "string"
        },
        "displayCustomerId": {
          "type": "string"
        }
      }
    },
    "v1CreateAppointmentCustomStatusRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/v1AppointmentCustomStatus"
        }
      }
    },
    "v1CreateAppointmentNoteRequest": {
      "type": "object",
      "properties": {
        "setPrivate": {
          "type": "boolean"
        },
        "appointmentId": {
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/v1AppointmentNote"
        }
      }
    },
    "v1CreateAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent id where the appointment is to be created"
        },
        "leaseId": {
          "type": "string",
          "description": "LeaseId is the id obtained from LeaseAppointment method."
        },
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "description": "Appointment is the appointment to be booked."
        },
        "validateOnly": {
          "type": "boolean",
          "description": "ValidateOnly if true, it indicates that the given request should only be validated, not executed."
        },
        "skipValidation": {
          "type": "boolean"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "notes": {
          "type": "string",
          "title": "initial notes given"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "recurringSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      },
      "title": "CreateAppointmentRequest: Request object for CreateAppointment rpc call"
    },
    "v1CreateAppointmentWrapper": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "note": {
          "type": "string"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1CustomStatus": {
      "type": "object",
      "properties": {
        "customStatusId": {
          "type": "string"
        },
        "customStatusName": {
          "type": "string"
        }
      }
    },
    "v1CustomerData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of consumer."
        },
        "lastName": {
          "type": "string",
          "description": "LastName of consumer."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1DailyAppointmentCount": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1DailyAppointmentViewCount": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "against": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1DeleteRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "deletedAppointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1DeleteRelatedAppointmentsRequest": {
      "type": "object",
      "properties": {
        "relatedToIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedTo": {
          "$ref": "#/definitions/v1DeleteRelatedAppointmentsType"
        },
        "period": {
          "$ref": "#/definitions/v1DeleteRelatedAppointmentsTimePeriod"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "optional"
        },
        "deleteOnlyCancelled": {
          "type": "boolean"
        },
        "buyerOrganizationId": {
          "type": "string"
        }
      }
    },
    "v1DeleteRelatedAppointmentsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1DeleteRelatedAppointmentsTimePeriod": {
      "type": "string",
      "enum": [
        "NoTime",
        "AllTime",
        "PastTime",
        "FutureTime"
      ],
      "default": "NoTime"
    },
    "v1DeleteRelatedAppointmentsType": {
      "type": "string",
      "enum": [
        "RelatedToNone",
        "RelatedToService",
        "RelatedToEmployee",
        "RelatedToConsumer"
      ],
      "default": "RelatedToNone"
    },
    "v1Employee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of employee"
        },
        "firstName": {
          "type": "string",
          "title": "First Name of the employee"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the employee"
        },
        "email": {
          "type": "string",
          "title": "Unique Email of the employee"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile image"
        },
        "gender": {
          "$ref": "#/definitions/employeev1Gender",
          "title": "Gender of the employee"
        },
        "employeeNumber": {
          "type": "string",
          "title": "employee Number of the employee"
        },
        "phoneNumber": {
          "type": "string",
          "title": "phone Number of the employee"
        },
        "isPhoneVerified": {
          "type": "boolean"
        },
        "phoneVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "departmentId": {
          "type": "string",
          "title": "department of employee – these is the primary department"
        },
        "designationId": {
          "type": "string",
          "title": "designation of the employee – these is the primary designation"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data of employee"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date on which employee was hired"
        },
        "userId": {
          "type": "string",
          "title": "corresponds to user in system"
        },
        "isInvitationAccepted": {
          "type": "boolean",
          "title": "is_invitation_accepted: if employee is invited and has accepted the invitation,\nthen the field is set to true, else in all other cases, it is false"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "profileIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "profile_ids: staff profiles"
        },
        "timeZone": {
          "type": "string",
          "title": "timezone: IANA string"
        },
        "hasExtendedProfiles": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "disableLogin": {
          "type": "boolean"
        },
        "changedSettings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "changed settings fields"
        },
        "secondaryDepartmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "department of employee – these is the primary department"
        },
        "secondaryDesignationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "designation of the employee – these is the primary designation"
        }
      }
    },
    "v1EmployeeReviewMailStatus": {
      "type": "string",
      "enum": [
        "DoNotSendMail",
        "ReviewMailScheduled",
        "ReviewMailSent"
      ],
      "default": "DoNotSendMail"
    },
    "v1FormSubmissions": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SingleSubmission"
          }
        },
        "submittedByName": {
          "type": "string"
        },
        "submittedByEmail": {
          "type": "string"
        },
        "submittedByUserId": {
          "type": "string"
        }
      }
    },
    "v1GenerateDataCodeForPortedAppointmentRequest": {
      "type": "object",
      "properties": {
        "oldOrderId": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1GenerateDataCodeForPortedAppointmentResponse": {
      "type": "object",
      "properties": {
        "dataCode": {
          "type": "string"
        }
      }
    },
    "v1GetAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DailyAppointmentCount"
          }
        }
      }
    },
    "v1GetAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        },
        "duration": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1AppointmentReportLocationData"
        }
      }
    },
    "v1GetCompanyAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        },
        "duration": {
          "type": "string"
        }
      }
    },
    "v1GetCompanyGroupedAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyGroupedAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetGroupLevelAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupLevelAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetGroupedAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetPortedAppointmentsByCodeResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1GetRecurringAppointmentsFromBaseAppointmentResponse": {
      "type": "object",
      "properties": {
        "recurringAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1GroupBatchCheckAvailabilityRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "title": "list of appointments with different consumers to be checked"
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Recurrence is the rrule set. we will apply this recurrence rule for all the appointments in request"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "checkOpenHours": {
          "type": "boolean"
        }
      }
    },
    "v1GroupBatchCheckAvailabilityResponse": {
      "type": "object",
      "properties": {
        "slotsStatus": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1AvailabilityStatus"
          },
          "description": "recurrence will be the index of slots in this map."
        }
      }
    },
    "v1GroupLevelAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1AppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1GroupLevelAppointmentReportLocationData"
        }
      }
    },
    "v1GroupLevelAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1GroupLevelAppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupLevelAppointmentReportData"
        }
      }
    },
    "v1GroupedAppointmentReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parsed date-time: will be used as cursor // no need"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "serviceTitle": {
          "type": "string"
        },
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "resourceTitle": {
          "type": "string"
        },
        "resourceTypeTitle": {
          "type": "string"
        },
        "appointmentCount": {
          "type": "integer",
          "format": "int32"
        },
        "consumerCount": {
          "type": "integer",
          "format": "int32"
        },
        "sales": {
          "$ref": "#/definitions/typesPrice"
        },
        "grouperId": {
          "type": "string"
        }
      }
    },
    "v1GroupedAppointmentReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedAppointmentReportData"
        }
      }
    },
    "v1ImportAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1InvitedEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1Employee"
        }
      },
      "title": "InvitedEmployee represents other invited employees in any booking"
    },
    "v1LeaseResultWrapper": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "leaseId": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListAppointmentCustomStatusesResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCustomStatus"
          }
        }
      }
    },
    "v1ListAppointmentEventsForCalendarResponse": {
      "type": "object",
      "properties": {
        "appointmentEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentEvent"
          }
        }
      }
    },
    "v1ListAppointmentFilters": {
      "type": "object",
      "properties": {
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "consumerName": {
          "type": "string",
          "title": "search queries"
        },
        "consumerEmail": {
          "type": "string"
        },
        "serviceTitle": {
          "type": "string"
        },
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "query": {
          "type": "string",
          "title": "on all above, search queries with 'or' condition"
        }
      }
    },
    "v1ListAppointmentNotesResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentNoteNode"
          },
          "title": "List of notes"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1ListAppointmentResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentNode"
          },
          "title": "List of Appointments node which contains Appointment and its position in the list"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "in PageInfo object, HasPrevious field is always ignored, do not use it"
        }
      },
      "title": "ListAppointmentsResponse: Response object for ListAppointments rpc call"
    },
    "v1ListAppointmentsForCalendarResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "blockingAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1ListAppointmentsOfOrderResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1LocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1MeetingData": {
      "type": "object",
      "properties": {
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "externalMeetingId": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "joinUrl": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      }
    },
    "v1MeetingInvitee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      }
    },
    "v1NoteStatusType": {
      "type": "string",
      "enum": [
        "PUBLIC",
        "PRIVATE",
        "ANY"
      ],
      "default": "PUBLIC"
    },
    "v1ObtainLeaseForAppointmentResponse": {
      "type": "object",
      "properties": {
        "leaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LeaseResultWrapper"
          }
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1RecurringUpdateType": {
      "type": "string",
      "enum": [
        "ThisAppointment",
        "ThisAndFollowingAppointment",
        "AllAppointments"
      ],
      "default": "ThisAppointment"
    },
    "v1ReportIntakeForm": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReportIntakeFormBlock"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ReportIntakeFormBlock": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "v1ReportsDropDownFilter": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "https://appointy.atlassian.net/browse/AXN-3779"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bookedByUserId": {
          "type": "string",
          "title": "https://appointy.atlassian.net/browse/AXN-3786"
        },
        "discountCoupon": {
          "type": "string",
          "title": "https://appointy.atlassian.net/browse/AXN-3777"
        }
      }
    },
    "v1ResourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "name of the resources type"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "image": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "only resource type of non-identifiable type can have capacity"
        },
        "resourceTypesType": {
          "$ref": "#/definitions/v1ResourceTypesType"
        },
        "active": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "hasOpenHours": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "templateId": {
          "type": "string",
          "title": "for company-level resource-type template-id will be empty\nfor location-level resource-type template-id is compulsory"
        }
      }
    },
    "v1SearchMeetingInviteesResponse": {
      "type": "object",
      "properties": {
        "meetingInvitee": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingInvitee"
          }
        }
      }
    },
    "v1SendNotification": {
      "type": "object",
      "properties": {
        "email": {
          "type": "boolean"
        },
        "sms": {
          "type": "boolean"
        }
      }
    },
    "v1SerializeAppointmentRequest": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "parent": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "dynamicLinkId": {
          "type": "string"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SerializeAppointmentResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/typesProtobuf"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesProtobuf"
          }
        },
        "updatedRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier for the service"
        },
        "title": {
          "type": "string",
          "title": "Title of the service"
        },
        "description": {
          "type": "string",
          "title": "Description of service"
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Duration in minutes for which the service will be performed."
        },
        "categoryId": {
          "type": "string",
          "description": "Category to which a service belongs(optional)."
        },
        "active": {
          "type": "boolean",
          "description": "Status represents the type of service: external/internal/link-only",
          "title": "Is the service currently active and can it be booked or not"
        },
        "status": {
          "$ref": "#/definitions/servicev1Status"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "policyId": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "templateId": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "preBufferTime": {
          "type": "integer",
          "format": "int32",
          "title": "Pre service buffer time in seconds"
        },
        "postBufferTime": {
          "type": "integer",
          "format": "int32",
          "title": "Post service buffer time in seconds"
        },
        "serviceType": {
          "$ref": "#/definitions/v1ServiceType",
          "title": "service type"
        },
        "changedSettings": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "changed settings fields"
        }
      },
      "title": "NOTE: The new fields are to be added in graphql"
    },
    "v1ServiceSearchData": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceTitle": {
          "type": "string"
        }
      }
    },
    "v1SingleSubmission": {
      "type": "object",
      "properties": {
        "formId": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UnitSubmissionValue"
          }
        }
      }
    },
    "v1StudentData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "guardian": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "guardianEmail": {
          "type": "string"
        },
        "guardianFirstName": {
          "type": "string"
        },
        "guardianLastName": {
          "type": "string"
        }
      }
    },
    "v1UnitSubmissionValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesFormValue"
          }
        }
      }
    },
    "v1UpdateAppointmentByDataCodeResponse": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo",
          "title": "internal"
        }
      }
    },
    "v1UpdateAppointmentNoteRequest": {
      "type": "object",
      "properties": {
        "setPrivate": {
          "type": "boolean"
        },
        "note": {
          "$ref": "#/definitions/v1AppointmentNote"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateConsumerRSVPByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1UpdateConsumerRSVPRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "rsvp": {
          "$ref": "#/definitions/typesRsvp"
        },
        "rsvpMessage": {
          "type": "string"
        },
        "originalRsvp": {
          "$ref": "#/definitions/typesRsvp",
          "title": "internal use"
        }
      }
    },
    "v1UpdateMeetingPermissionsRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "inviteeCanModify": {
          "type": "boolean",
          "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean",
          "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
        },
        "viewGuestList": {
          "type": "boolean",
          "description": "SeeGuestList represent Meeting app permission for all users to view other users involved in appointment."
        }
      }
    },
    "v1UpdateRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "oldAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "updatedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1UserSearchData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "filter": {
          "type": "string"
        }
      }
    },
    "v1ListAdminSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListAdminSlotsRequest"
        }
      }
    },
    "v1ListAdminSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListDatesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the ListDateRequest (Min Length : 1)"
        }
      }
    },
    "v1ListDatesResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "Available contains dates as key and true/false as values, true if available"
        },
        "errorMessage": {
          "type": "string"
        },
        "datesStatus": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DatesStatus contains dates as key and type of slot(available/booked) as values"
        }
      }
    },
    "v1ListDynamicSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListDynamicSlotsRequest"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "isDynamic": {
          "type": "boolean"
        }
      }
    },
    "v1ListDynamicSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Slot"
          },
          "title": "Slots contains time slots for resources"
        }
      }
    },
    "v1ListServicesOrEmployeesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "listEmployees": {
          "type": "boolean",
          "title": "default behaviour of the endpoint is to return available services\nand if employees are required set list_employees field true"
        }
      }
    },
    "v1ListServicesOrEmployeesResponse": {
      "type": "object",
      "properties": {
        "availableIds": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListSlotsRequest"
        }
      }
    },
    "v1ListSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "slotRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotRule"
          },
          "title": "deprecated"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ReasonOfUnavailability": {
      "type": "string",
      "enum": [
        "None",
        "EmployeeUnavailable",
        "ResourceUnavailable",
        "ResourceTypeUnavailable",
        "ServiceUnavailable"
      ],
      "default": "None"
    },
    "v1Slot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner\nParent is usually location. Not sure what it will be"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "channel": {
          "type": "string",
          "description": "Channel is the id of the channel."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources are the ids of the resources that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resource types are the ids of the resource types that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Total capacity of the slot"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "slot metadata"
        },
        "otherEmployees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OtherEmployees of the meeting"
        },
        "maxCapacity": {
          "type": "string",
          "format": "int64",
          "title": "MaxCapacity of the slot"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1SlotRule": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "Slot contains time slots for resources."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "StartTime of the slot."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Endtime of slot."
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Duration of slot."
        }
      },
      "description": "SlotRule returns the slots available as a rule.\nSlot is repeated from StartTime to EndTime with the given Durations from StartTime.\nFor example, StartTime is 9:00 AM PST, EndTime is 5:00 PM PST. and a Duration is 30 min. Slot is available\nfrom 9:00 AM PST to 9:30 AM PST, 9:30 AM PST to 10:00 AM PST and so on until 4:30 PM PST to 5:00 PM PST.\nsimilarly for each duration in the duration-slice."
    },
    "v1SlotType": {
      "type": "string",
      "enum": [
        "Available",
        "AvailableAppointment",
        "BookedAppointment",
        "BlockedHours",
        "NonOpenHours",
        "LeasedAppointment"
      ],
      "default": "Available",
      "title": "- NonOpenHours: not handled\n - LeasedAppointment: Partial availability - not considered"
    },
    "v1SlotWrapper": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1SlotType"
        },
        "slot": {
          "$ref": "#/definitions/v1Slot"
        },
        "reason": {
          "$ref": "#/definitions/v1ReasonOfUnavailability"
        }
      }
    },
    "OpenHoursUpdateOpenHourRuleBody": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "object",
          "properties": {
            "resourceId": {
              "type": "string",
              "title": "Id of the resource"
            },
            "openHour": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1OpenHour"
              },
              "title": "Specifies individual open hour"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional data for open hour"
            },
            "timezone": {
              "type": "string",
              "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
            },
            "openHourType": {
              "$ref": "#/definitions/v1OpenHourType"
            }
          },
          "title": "Represents the open hour rule"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "to contain start and until of rrule-set.\noptional (if empty delete from current time)"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "originalOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule",
          "title": "internal"
        },
        "deletedOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "OpenHoursUpdateOpenHourRuleMetadataBody": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information/data"
        }
      },
      "title": "UpdateOpenHourRuleMetadataRequest updates metadata corresponding to rule_id\ncurrently exists corresponding to rule_id"
    },
    "OpenHoursUpdateSingleSlotBody": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "specifies the time slot of new updated slot"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids in new slots"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "bookable": {
          "type": "boolean",
          "title": "whether the resource can be booked or not"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "openHourRuleId": {
          "type": "string",
          "title": "OpenHourRuleId is the id of open hour rule to which this slot belongs"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "originalBuiltSlot": {
          "$ref": "#/definitions/v1OpenHourBuiltSlot",
          "title": "internal"
        }
      },
      "title": "To update a particular slot from all the slots"
    },
    "OpenHoursUpsertRecurrenceRuleBody": {
      "type": "object",
      "properties": {
        "recurrenceId": {
          "type": "string",
          "title": "open hour id"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "specifies the time slot of recurrence in a day"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids in new slots"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "bookable": {
          "type": "boolean",
          "title": "whether the resource can be booked or not"
        },
        "newRecurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rrule set containing : string{\"rrule\", \"rdate\", \"exrule\", \"exdate\"}\nmust be a valid rrule-set\nonly used for initial building of sessions during create or update"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "to contain start and until of rrule-set.\noptional (if empty delete from current time)"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "deletedOpenHour": {
          "$ref": "#/definitions/v1OpenHour",
          "title": "internal use"
        },
        "originalOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      },
      "title": "To update the recurrence set"
    },
    "v1BatchGetOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      },
      "description": "BatchGetOpenHourResponse contains the list of open hour rules given in the \nrequest object."
    },
    "v1ChannelRestriction": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string",
          "title": "ID of channel that is restricted for a specific resource"
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "duration of slots to be built"
        }
      },
      "title": "ChannelRestriction represents duration of slots allowed corresponding to channel"
    },
    "v1CheckOpenHourAvailabilityRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id can be staff or service"
        }
      }
    },
    "v1CheckOpenHourAvailabilityResponse": {
      "type": "object",
      "properties": {
        "availability": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "map for each ID with true if any future open hour slots available"
        }
      }
    },
    "v1CreateOpenHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given company like group"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids of the resource"
        },
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          },
          "title": "Specifies individual open hour(s)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour rule"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "openHourType": {
          "$ref": "#/definitions/v1OpenHourType"
        },
        "skipBuildSlots": {
          "type": "boolean",
          "title": "can be used to skip building of slots here and build them in background\ndone for optimization of endpoint"
        }
      },
      "title": "CreateOpenHourRuleRequest is the request to create a new open hour rule ,"
    },
    "v1CreateOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal use"
        }
      }
    },
    "v1DeleteAndCreateOpenHourRulesRequest": {
      "type": "object",
      "properties": {
        "deleteRequest": {
          "$ref": "#/definitions/v1DeleteOpenHourRulesRequest"
        },
        "createRequest": {
          "$ref": "#/definitions/v1CreateOpenHourRuleRequest"
        }
      }
    },
    "v1DeleteAndCreateOpenHourRulesResponse": {
      "type": "object",
      "properties": {
        "openHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal"
        }
      }
    },
    "v1DeleteOpenHourRulesRequest": {
      "type": "object",
      "properties": {
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteType": {
          "$ref": "#/definitions/v1DeleteType"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "optional (if empty deleted from current time)"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "openHourRuleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recurrenceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activity": {
          "type": "string"
        },
        "internalUse": {
          "$ref": "#/definitions/v1InternalUse",
          "title": "internal use"
        }
      }
    },
    "v1DeleteRelatedOpenHoursTimePeriod": {
      "type": "string",
      "enum": [
        "NoTime",
        "FutureTime"
      ],
      "default": "NoTime"
    },
    "v1DeleteRelatedOpenHoursType": {
      "type": "string",
      "enum": [
        "RelatedToNone",
        "RelatedToLocation",
        "RelatedToEmployee"
      ],
      "default": "RelatedToNone"
    },
    "v1DeleteType": {
      "type": "string",
      "enum": [
        "DATE_RANGE",
        "DAY",
        "DATE_AND_FOLLOWING",
        "FUTURE"
      ],
      "default": "DATE_RANGE"
    },
    "v1GetNextAvailabilityResponse": {
      "type": "object",
      "properties": {
        "nextAvailability": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "v1GetOpenHourSlotsTrackerReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourSlotsTrackerReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1InternalUse": {
      "type": "object",
      "properties": {
        "futureOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedOpenHourExceptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedOpenHourExceptionParentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newAndOldOpenHourIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ListFutureOpenHourRulesResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1ListOpenHourBuildSlotsForAvailabilityResponse": {
      "type": "object",
      "properties": {
        "openHourBuiltSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourBuiltSlot"
          }
        }
      }
    },
    "v1ListOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRuleNode"
          },
          "description": "Nodes contains the list of open hour rule."
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "PageInfo returns the information about pagination."
        }
      },
      "title": "ListOpenHourRuleResponse contains the list of open hour rule"
    },
    "v1ListOpenHourRulesForAvailabilityResponse": {
      "type": "object",
      "properties": {
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1ListOpenHourRulesForCalendarResponse": {
      "type": "object",
      "properties": {
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1OpenHour": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the open hour rule"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Timeslot of recurrence in a day"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rrule set containing : [\"RRULE\", \"RDATE\", \"EXRULE\", \"EXDATE\"]\nmust be a valid rrule-set\nonly used for initial building of sessions during create or update"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "Start of the OpenHour"
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "title": "End of the OpenHour"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids linked with open-hour"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "builtSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourBuiltSlot"
          },
          "title": "Slots built using above recurrence set"
        },
        "builtTill": {
          "type": "string",
          "format": "date-time",
          "title": "BuiltTill represents the time until which open hour rule has been built in DB\nIt is used to extends built slots for open hours"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourException"
          },
          "title": "will be added when single slot update/delete is called and rule is not changed"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        }
      },
      "title": "OpenHour represents recurrence rule to built slots corresponding to Open Hour Rules"
    },
    "v1OpenHourBuiltSlot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "recurrenceId": {
          "type": "string",
          "title": "RecurrenceId is the id of open-hour-id from which slot is built"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Slot is the timeslot of recurrence in a day"
        },
        "bookable": {
          "type": "boolean",
          "title": "Tells whether a resource can be booked or not"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids linked with open-hour-built-slot"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "locationId": {
          "type": "string",
          "description": "parent",
          "title": "extra fields for query"
        },
        "resourceId": {
          "type": "string"
        },
        "exceptionDeleted": {
          "type": "boolean"
        },
        "specialCase": {
          "type": "boolean",
          "title": "special case - when built slot start_time > until of open hour"
        }
      },
      "title": "OpenHourBuiltSlot represents the each single slot(timing + bookable-status) built from recurrence rule in open hour rule"
    },
    "v1OpenHourException": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "builtSlot": {
          "$ref": "#/definitions/v1OpenHourBuiltSlot"
        },
        "exceptionDeleted": {
          "type": "boolean",
          "description": "else than chaku's is-deleted(not used), to avoid not-deleted default condition in list..."
        }
      }
    },
    "v1OpenHourLocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenHourRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the open hour rule"
        },
        "resourceId": {
          "type": "string",
          "title": "Id of the resource"
        },
        "openHour": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          },
          "title": "Specifies individual open hour"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "openHourType": {
          "$ref": "#/definitions/v1OpenHourType"
        }
      },
      "title": "Represents the open hour rule"
    },
    "v1OpenHourRuleNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position in the list of open hour rule"
        },
        "node": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      },
      "title": "Represents data corresponding to a position in the list of open hour rule"
    },
    "v1OpenHourSlotsTrackerReportData": {
      "type": "object",
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "availabilityDate": {
          "type": "string",
          "format": "date-time"
        },
        "numberOfSlots": {
          "type": "integer",
          "format": "int32"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceTitles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenHourSlotsTrackerReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1OpenHourSlotsTrackerReportData"
        }
      }
    },
    "v1OpenHourType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "WEEKLY",
        "CUSTOM"
      ],
      "default": "UNKNOWN"
    },
    "v1OverrideOpenHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given company like group"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids of the resource"
        },
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          }
        },
        "customOpenHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour rule"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteExistingRules": {
          "type": "boolean"
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "deletedOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal use"
        },
        "deletedCustomOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1OverrideOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        },
        "customOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      }
    },
    "v1ServiceRestriction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "just for chaku, no other significance"
        },
        "serviceId": {
          "type": "string",
          "title": "ID of service that is restricted for a specific resource"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChannelRestriction"
          },
          "title": "ChannelRestriction represents duration of slots allowed corresponding to channel"
        }
      },
      "title": "ServiceRestriction represent group of channel restrictions: restriction on slot duration of service corresponding to a channel"
    },
    "v1UpdateOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      }
    },
    "v1UpsertRecurrenceRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        },
        "newOpenHour": {
          "$ref": "#/definitions/v1OpenHour",
          "title": "internal"
        }
      }
    },
    "CustomStatusesUpdateCustomStatusBody": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isDefault": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "customStatusType": {
              "$ref": "#/definitions/v1CustomStatusType"
            }
          },
          "description": "CustomStatus represents new status-es defined as per requirements of business\nThese custom-status are used with appointments and classes..."
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the given CustomStatus object can be\nupdated."
        }
      },
      "title": "UpdateCustomStatusRequest contains the CustomStatus object and update_mask .\nThe update mask will be used to update a specific field in CustomStatus object"
    },
    "CustomStatusesUpdateCustomStatusDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchGetCustomStatusResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomStatus"
          },
          "title": "Companies contains the list of CustomStatus"
        }
      },
      "description": "BatchGetCompaniesResponse contains the list of companies given in the request object."
    },
    "v1CreateCustomStatusRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given CustomStatus like\ngroup."
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        }
      },
      "title": "CreateCustomStatusRequest is the request to create a new CustomStatus ,"
    },
    "v1CustomStatusType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ALL",
        "APPOINTMENT",
        "CLASS"
      ],
      "default": "UNDEFINED"
    },
    "v1ListCustomStatusResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomStatus"
          },
          "title": "Nodes contains the list of CustomStatus"
        }
      },
      "title": "ListCustomStatusResponse"
    },
    "GroupSettingsUpsertGroupSettingBody": {
      "type": "object",
      "properties": {
        "groupSetting": {
          "type": "object",
          "properties": {
            "adminCss": {
              "type": "string",
              "title": "fields"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "hasExtendedFields": {
              "type": "boolean"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1GroupSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "adminCss": {
          "type": "string",
          "title": "fields"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "hasExtendedFields": {
          "type": "boolean"
        }
      }
    },
    "PiiServiceRequestCancellationBody": {
      "type": "object"
    },
    "v1BusinessInformation": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CheckStatusOfPIIResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1PIIRequestStatus"
        },
        "request": {
          "$ref": "#/definitions/v1PiiRequests"
        }
      }
    },
    "v1DataCodeString": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "v1EncryptedData": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      },
      "title": "EncryptedData is the object stored against data-code"
    },
    "v1GetOwnedBusinessInfoResponse": {
      "type": "object",
      "properties": {
        "businesses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BusinessInformation"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListRequestsToDeleteResponse": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PiiRequests"
          }
        }
      }
    },
    "v1PIIRequestStatus": {
      "type": "string",
      "enum": [
        "NoRequestFound",
        "SearchIsRequested",
        "DeletionScheduled",
        "WorkingOnDeletion",
        "DataDeleted",
        "RequestCancelled"
      ],
      "default": "NoRequestFound"
    },
    "v1PiiRequests": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "dataCode": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "searchRequested": {
          "type": "boolean",
          "title": "search_requested: true if search is requested only"
        },
        "deletionScheduled": {
          "type": "boolean",
          "title": "deletion_scheduled: true if deletion is scheduled for date: wait_till"
        },
        "cancelled": {
          "type": "boolean",
          "title": "cancelled: true if request is cancelled"
        },
        "dataDeleted": {
          "type": "boolean",
          "title": "data_deleted: true if all data is deleted or masked"
        },
        "waitTill": {
          "type": "string",
          "format": "date-time",
          "title": "wait_till is the time scheduled to delete all data of user which is\n10 days after the delete is requested"
        },
        "searchRequestedOn": {
          "type": "string",
          "format": "date-time",
          "title": "search_requested_on stores the time and date of the request"
        },
        "deletionFields": {
          "type": "string"
        }
      },
      "title": "PiiRequests will contains the deleted users data"
    },
    "v1RequestCancellationResponse": {
      "type": "object",
      "properties": {
        "status": {
          "$ref": "#/definitions/v1PIIRequestStatus"
        }
      }
    },
    "v1Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isDefault": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "displayModuleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DisplayModuleRole"
          }
        },
        "internal": {
          "type": "boolean"
        },
        "overriddenRoleId": {
          "type": "string",
          "title": "role id that is overridden"
        }
      },
      "title": "Role is a custom role object\nThe role is created at a certain level\nThe role saves corresponding module_role_ids using which patterns can be obtained and filled with the level ids"
    },
    "v1CheckDictionaryAccountResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1CheckDiscountEligibilityResponse": {
      "type": "object",
      "properties": {
        "eligible": {
          "type": "boolean"
        },
        "discountCode": {
          "type": "string"
        }
      }
    },
    "ServiceSettingsBatchUpsertServiceSettingBody": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1ServiceSetting"
        },
        "updatePath": {
          "type": "string"
        },
        "resetPathToLocation": {
          "type": "boolean"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "titles of service/location/template according to parent"
        }
      }
    },
    "ServiceSettingsUpsertServiceGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "serviceSetting": {
          "type": "object",
          "properties": {
            "bookingRules": {
              "$ref": "#/definitions/v1AppointmentBookingRules",
              "description": "BookingRules contain various options for controlling\nvarious booking settings. Please refer to the object for\nthe exact settings."
            },
            "paymentSetting": {
              "$ref": "#/definitions/v1ServicePaymentSetting",
              "description": "ServicePaymentSetting contains various options for controlling\nvarious payment settings. Please refer to the object for\nthe exact settings."
            },
            "taxSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1TaxSetting"
              },
              "description": "TaxSetting contains tax related settings. Please refer to the object for exact options."
            },
            "changeMask": {
              "type": "string",
              "description": "ChangeMask represents overridden fields of the settings."
            }
          }
        }
      }
    },
    "ServiceSettingsUpsertServiceSettingBody": {
      "type": "object",
      "properties": {
        "serviceSetting": {
          "type": "object",
          "properties": {
            "bookingRules": {
              "$ref": "#/definitions/v1AppointmentBookingRules",
              "description": "BookingRules contain various options for controlling\nvarious booking settings. Please refer to the object for\nthe exact settings."
            },
            "paymentSetting": {
              "$ref": "#/definitions/v1ServicePaymentSetting",
              "description": "ServicePaymentSetting contains various options for controlling\nvarious payment settings. Please refer to the object for\nthe exact settings."
            },
            "taxSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1TaxSetting"
              },
              "description": "TaxSetting contains tax related settings. Please refer to the object for exact options."
            },
            "changeMask": {
              "type": "string",
              "description": "ChangeMask represents overridden fields of the settings."
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given service setting object that can be\nupdated.\nList of fields which can be updated are  :\nbooking rules, payment settings, tax setting, notification setting,\navailability interval"
        },
        "title": {
          "type": "string",
          "title": "title of service/location/template according to parent"
        }
      },
      "title": "UpsertServiceSettingRequest contains the service setting object and the\nupdate mask\nThe update mask will be used to update a specific field in service setting object"
    },
    "typesInterval": {
      "type": "object",
      "properties": {
        "frequency": {
          "$ref": "#/definitions/typesIntervalFrequency"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "typesIntervalFrequency": {
      "type": "string",
      "enum": [
        "IntervalFrequency_UNKNOWN",
        "SECOND",
        "MINUTE",
        "HOUR",
        "DAY",
        "WEEK",
        "MONTH",
        "YEAR"
      ],
      "default": "IntervalFrequency_UNKNOWN"
    },
    "v1AppointmentBookingApproval": {
      "type": "object",
      "properties": {
        "emailVerifiedCustomer": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through mail"
        },
        "phoneVerifiedCustomer": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through phone"
        },
        "prePayingCustomer": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through payment"
        },
        "customerWithCreditCard": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through payment"
        },
        "nonEmailVerifiedCustomer": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through non verified mail"
        },
        "nonPhoneVerifiedCustomer": {
          "$ref": "#/definitions/v1Approval",
          "title": "Booking approved by the customer through non verified phone"
        },
        "priorities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ApprovalCustomerTypes"
          },
          "title": "Priority - higher zeroth index"
        }
      },
      "title": "Levels over which the booking is approved by the customer\nThis setting can be override at service level"
    },
    "v1AppointmentBookingRules": {
      "type": "object",
      "properties": {
        "leadAndCancellationSetting": {
          "$ref": "#/definitions/v1AppointmentLeadAndCancellationSetting",
          "title": "Lead and cancellation settings of any service which is booked"
        },
        "bookingApproval": {
          "$ref": "#/definitions/v1AppointmentBookingApproval",
          "description": "BookingApproval contains settings to control which appointments require approval."
        },
        "availabilityType": {
          "$ref": "#/definitions/v1AvailabilityType",
          "title": "availability slot interval setting"
        },
        "fixedInterval": {
          "type": "string",
          "format": "int64",
          "title": "in case of fixed availability type"
        },
        "precisionPattern": {
          "type": "string"
        },
        "detectCustomerTimezone": {
          "type": "boolean"
        }
      }
    },
    "v1AppointmentLeadAndCancellationSetting": {
      "type": "object",
      "properties": {
        "minAdvanceIntervalToBook": {
          "$ref": "#/definitions/v1IntervalCutOff",
          "title": "Min Time prior to which the appointment can only be booked"
        },
        "intervalAdvanceAppointmentCanBeBooked": {
          "$ref": "#/definitions/typesInterval",
          "title": "Advance time after which an appointment cannot be booked in seconds"
        },
        "minIntervalBetweenAppointments": {
          "$ref": "#/definitions/typesInterval",
          "title": "Minimum time interval required between appointments"
        },
        "forCancellation": {
          "$ref": "#/definitions/v1AppointmentUpdatePolicy",
          "title": "Cancellation policy for appointment"
        },
        "forRescheduling": {
          "$ref": "#/definitions/v1AppointmentUpdatePolicy",
          "title": "Reschedule policy for appointment"
        },
        "minAdvancePeriodToBookAppointment": {
          "type": "integer",
          "format": "int32",
          "title": "deprecated"
        },
        "minAdvancePeriodToCancelAppointment": {
          "type": "integer",
          "format": "int32",
          "title": "deprecated"
        },
        "minAdvancePeriodToRescheduleAppointment": {
          "type": "integer",
          "format": "int32",
          "title": "deprecated"
        },
        "timeAdvanceAppointmentCanBeBooked": {
          "type": "integer",
          "format": "int32",
          "title": "deprecated"
        },
        "minTimeIntervalBetweenAppointments": {
          "type": "integer",
          "format": "int32",
          "title": "deprecated"
        },
        "cancellationRefundPolicy": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "title": "deprecated"
        }
      },
      "title": "All the settings are in seconds\nthese setting can be override at service level"
    },
    "v1AppointmentUpdatePolicy": {
      "type": "object",
      "properties": {
        "policyType": {
          "$ref": "#/definitions/v1AppointmentUpdatePolicyType"
        },
        "minAdvanceInterval": {
          "$ref": "#/definitions/v1IntervalCutOff",
          "title": "Time prior to which update can be done"
        },
        "penalties": {
          "type": "object",
          "additionalProperties": {
            "type": "number",
            "format": "double"
          },
          "title": "how much penalties is to be cut for time before `key` seconds\nkey in seconds and value in percentage"
        },
        "updateFutureAppointments": {
          "type": "boolean",
          "description": "UpdateFutureAppointments will update all booked appointments in future with the\nnew policy details."
        }
      },
      "description": "AllowUpdate type will allow all types of update without any restriction\nDoNotAllowUpdate type will restricts all types of update\nFixedIntervalUpdate type will only all updates prior to the MinAdvanceInterval\nAnd AllowWithPenalty type will allow all updates but with certain Penalties defined as percentages\n\nPenalties will only work with AllowWithPenalty type.\nFor reschedule policy, AllowWithPenalty will not work",
      "title": "AppointmentUpdatePolicy specifies the intent of update that can be performed\nfreely or with penalty based on the AppointmentUpdatePolicyType"
    },
    "v1AppointmentUpdatePolicyType": {
      "type": "string",
      "enum": [
        "AllowUpdate",
        "DoNotAllowUpdate",
        "FixedIntervalUpdate",
        "AllowWithPenalty"
      ],
      "default": "AllowUpdate",
      "title": "AppointmentUpdatePolicyType represents the type of update policy to be used"
    },
    "v1Approval": {
      "type": "string",
      "enum": [
        "DO_NOT_REQUIRE",
        "REQUIRE",
        "DO_NOT_BOOK"
      ],
      "default": "DO_NOT_REQUIRE",
      "title": "Type of approval, whether required or not"
    },
    "v1ApprovalCustomerTypes": {
      "type": "string",
      "enum": [
        "PrePayingCustomer",
        "CustomerWithCreditCard",
        "PhoneVerifiedCustomer",
        "EmailVerifiedCustomer",
        "NonPhoneVerifiedCustomer",
        "NonEmailVerifiedCustomer"
      ],
      "default": "PrePayingCustomer"
    },
    "v1AvailabilityType": {
      "type": "string",
      "enum": [
        "AUTOMATIC",
        "FIXED",
        "PRECISION"
      ],
      "default": "AUTOMATIC"
    },
    "v1BatchGetServiceSettingResponse": {
      "type": "object",
      "properties": {
        "serviceSetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceSetting"
          }
        }
      }
    },
    "v1ChargeType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "FULL_AMOUNT",
        "FIXED_AMOUNT",
        "PERCENTAGE"
      ],
      "default": "UNSPECIFIED",
      "title": "Type of charge when a service is booked by a customer"
    },
    "v1IntervalCutOff": {
      "type": "object",
      "properties": {
        "interval": {
          "$ref": "#/definitions/typesInterval"
        },
        "cutOff": {
          "type": "string",
          "format": "date-time",
          "title": "cutoff time is to be in locations timezone and only the hours, minutes and seconds part are concerned"
        }
      }
    },
    "v1ServicePaymentSetting": {
      "type": "object",
      "properties": {
        "chargeType": {
          "$ref": "#/definitions/v1ChargeType",
          "title": "Whether the customer is charged or not"
        },
        "chargeValue": {
          "type": "number",
          "format": "float",
          "title": "Incase of fixed_amount it is amount and in case of percentage it is percentage"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "acceptPrePayment": {
          "type": "boolean",
          "title": "Accept pre-payments (Enable or disable this setting)"
        },
        "payLater": {
          "type": "boolean"
        }
      },
      "title": "Payment setting of the service"
    },
    "v1ServiceSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id is of the location or service. Settings can be set at multiple levels.\nWhen retrieving for a level. The service returns the object by merging all the levels\ngiving precedence to the lowest level."
        },
        "bookingRules": {
          "$ref": "#/definitions/v1AppointmentBookingRules",
          "description": "BookingRules contain various options for controlling\nvarious booking settings. Please refer to the object for\nthe exact settings."
        },
        "paymentSetting": {
          "$ref": "#/definitions/v1ServicePaymentSetting",
          "description": "ServicePaymentSetting contains various options for controlling\nvarious payment settings. Please refer to the object for\nthe exact settings."
        },
        "taxSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TaxSetting"
          },
          "description": "TaxSetting contains tax related settings. Please refer to the object for exact options."
        },
        "changeMask": {
          "type": "string",
          "description": "ChangeMask represents overridden fields of the settings."
        }
      }
    },
    "v1TaxSetting": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "percentage": {
          "type": "number",
          "format": "float"
        }
      },
      "title": "Type and percentage of tax when a service is booked by a customer"
    },
    "RolesUpdateAssignedRolesBody": {
      "type": "object",
      "properties": {
        "assignRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "removeRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "RolesUpdateRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "object",
          "properties": {
            "roleName": {
              "type": "string"
            },
            "level": {
              "type": "string"
            },
            "moduleRoleNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isDefault": {
              "type": "boolean"
            },
            "priority": {
              "type": "string",
              "format": "int64"
            },
            "description": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "displayModuleRoles": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1DisplayModuleRole"
              }
            },
            "internal": {
              "type": "boolean"
            },
            "overriddenRoleId": {
              "type": "string",
              "title": "role id that is overridden"
            }
          },
          "title": "Role is a custom role object\nThe role is created at a certain level\nThe role saves corresponding module_role_ids using which patterns can be obtained and filled with the level ids"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AssignRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "v1AssignServiceAccountRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1BatchGetRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          },
          "title": "Customer contains list of customers requested"
        }
      }
    },
    "v1BatchGetUserRoleResponse": {
      "type": "object",
      "properties": {
        "userRole": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          },
          "title": "Customer contains list of customers requested"
        }
      }
    },
    "v1BatchGetUsersByRolesResponse": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateRoleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1Role"
        }
      }
    },
    "v1DisplayModuleRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "moduleRoles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "level": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "dummy": {
          "type": "boolean"
        }
      }
    },
    "v1GetAssignedUsersByRoleResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetPrefixResponse": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        }
      }
    },
    "v1GetUsersByLevelIdResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetUsersByLevelRequest": {
      "type": "object",
      "properties": {
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1GetUsersByLevelResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        }
      }
    },
    "v1InviteUserObject": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1InviteUsersToRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InviteUserObject"
          }
        }
      }
    },
    "v1ListCustomRolesResponse": {
      "type": "object",
      "properties": {
        "customRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListDefaultRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListInvitedUserResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleIdNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListUsersOfModuleRolesResponse": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ModuleRoleAtLevel": {
      "type": "object",
      "properties": {
        "moduleRoleName": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1RemoveRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "v1UserRole": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleId": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleIdNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1UserRoleId"
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "v1UserRoleNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1UserRole"
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "v1UserRoleRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1ValidateLevelResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "CalendarsChangeCalendarMeetingLinkSettingsBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "createMeetingLink": {
          "type": "boolean"
        }
      }
    },
    "CalendarsToggleCalendarSettingsBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "createMeetingLink": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "justBlockTime": {
          "$ref": "#/definitions/typesBooleanFilter"
        }
      }
    },
    "CalendarsUpdateCalendarSettingsBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        },
        "blockedEventStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EventStatus"
          }
        },
        "createMeetingLink": {
          "type": "boolean"
        },
        "justBlockTime": {
          "type": "boolean",
          "description": "JustBlockTime means when enabled, do not add any participants in the events that are\ncreated in external calendars."
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "calendarv1Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "entityEventId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendarId": {
          "type": "string"
        },
        "calendarEventId": {
          "type": "string"
        },
        "calendarConferenceId": {
          "type": "string"
        },
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        },
        "subject": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "location": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizer": {
          "type": "string"
        },
        "isCancelled": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1EventStatus"
        },
        "pushedToCalendar": {
          "type": "boolean"
        },
        "pulledFromCalendar": {
          "type": "boolean"
        },
        "userId": {
          "type": "string",
          "title": "event is corresponding to this user"
        },
        "recurringId": {
          "type": "string",
          "title": "only used in outlook"
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        },
        "isRecurring": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetCalendarSettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarSettings"
          }
        }
      }
    },
    "v1Calendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pushFutureEventsOnCalendar": {
          "type": "boolean"
        },
        "pullFutureEventsFromCalendar": {
          "type": "boolean"
        },
        "accountName": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "twoWay": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "oneWay": {
          "type": "boolean"
        }
      }
    },
    "v1CalendarSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        },
        "blockedEventStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EventStatus"
          }
        },
        "createMeetingLink": {
          "type": "boolean"
        },
        "justBlockTime": {
          "type": "boolean",
          "description": "JustBlockTime means when enabled, do not add any participants in the events that are\ncreated in external calendars."
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CalendarsList": {
      "type": "object",
      "properties": {
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        }
      }
    },
    "v1ConferenceData": {
      "type": "object",
      "properties": {
        "meetingType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "iconUrl": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1CreateEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1EventStatus": {
      "type": "string",
      "enum": [
        "NeedAction",
        "Accepted",
        "Declined",
        "Tentative",
        "Delegated"
      ],
      "default": "NeedAction"
    },
    "v1GetCalendarTypeResponse": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1ImprovedCreateEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1ImprovedListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "nextSyncToken": {
          "type": "string"
        }
      }
    },
    "v1ImprovedUpsertEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        }
      }
    },
    "v1ListInstanceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "isRecurring": {
          "type": "boolean"
        }
      }
    },
    "v1UpsertEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1PhoneLoginBlock": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "blockTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1PhoneLoginOTP": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "attempt": {
          "type": "integer",
          "format": "int32"
        },
        "resendTimes": {
          "type": "integer",
          "format": "int32"
        },
        "otp": {
          "type": "string"
        },
        "validTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ApiKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the customer"
        },
        "userId": {
          "type": "string"
        },
        "apiKey": {
          "type": "string"
        }
      }
    },
    "v1GenerateNewApiKeyRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        }
      }
    },
    "EmployeeSettingsUpsertEmployeeGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employeeSetting": {
          "type": "object",
          "properties": {
            "enableDraft": {
              "type": "boolean"
            },
            "enabledServiceDurations": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/v1Durations"
              }
            },
            "privateUrl": {
              "type": "string"
            },
            "bookingLimits": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1EmployeeBookingLimits"
              }
            },
            "changeMask": {
              "type": "string"
            }
          },
          "title": "Employee settings"
        }
      }
    },
    "EmployeeSettingsUpsertEmployeeSettingBody": {
      "type": "object",
      "properties": {
        "setting": {
          "type": "object",
          "properties": {
            "enableDraft": {
              "type": "boolean"
            },
            "enabledServiceDurations": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/v1Durations"
              }
            },
            "privateUrl": {
              "type": "string"
            },
            "bookingLimits": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1EmployeeBookingLimits"
              }
            },
            "changeMask": {
              "type": "string"
            }
          },
          "title": "Employee settings"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "typesDayOfWeek": {
      "type": "string",
      "enum": [
        "SUNDAY",
        "MONDAY",
        "TUESDAY",
        "WEDNESDAY",
        "THURSDAY",
        "FRIDAY",
        "SATURDAY"
      ],
      "default": "SUNDAY",
      "description": "Represents a day of week.\n\n - SUNDAY: The day-of-week of Sunday.\n - MONDAY: The day-of-week of Monday.\n - TUESDAY: The day-of-week of Tuesday.\n - WEDNESDAY: The day-of-week of Wednesday.\n - THURSDAY: The day-of-week of Thursday.\n - FRIDAY: The day-of-week of Friday.\n - SATURDAY: The day-of-week of Saturday."
    },
    "typesFrequency": {
      "type": "string",
      "enum": [
        "ONCE",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "YEARLY",
        "FIXED",
        "HOURLY"
      ],
      "default": "ONCE",
      "title": "Frequency"
    },
    "typesFrequencyInfo": {
      "type": "object",
      "properties": {
        "startDay": {
          "$ref": "#/definitions/typesDayOfWeek"
        },
        "monthDate": {
          "type": "string",
          "format": "int64"
        },
        "startMonth": {
          "$ref": "#/definitions/typesMonths"
        }
      }
    },
    "typesLimitRestrictionType": {
      "type": "string",
      "enum": [
        "ALLOWED",
        "NOT_ALLOWED",
        "CUSTOM"
      ],
      "default": "ALLOWED",
      "title": "Type of restriction on a entity"
    },
    "typesMonths": {
      "type": "string",
      "enum": [
        "JANUARY",
        "FEBRUARY",
        "MARCH",
        "APRIL",
        "MAY",
        "JUNE",
        "JULY",
        "AUGUST",
        "SEPTEMBER",
        "OCTOBER",
        "NOVEMBER",
        "DECEMBER"
      ],
      "default": "JANUARY",
      "description": "Represents a month."
    },
    "v1BatchGetEmployeeSettingResponse": {
      "type": "object",
      "properties": {
        "employeeSetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeSetting"
          }
        }
      }
    },
    "v1BatchUpsertEmployeeSettingRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UpsertEmployeeSettingRequest"
          }
        }
      }
    },
    "v1BatchUpsertEmployeeSettingResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeSettingWrapper"
          }
        }
      }
    },
    "v1Durations": {
      "type": "object",
      "properties": {
        "seconds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1EmployeeBookingLimits": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesLimitRestrictionType",
          "title": "Type of limit to restrict the booking of an employee"
        },
        "allowedBookingsInDuration": {
          "type": "integer",
          "format": "int32",
          "title": "No. of bookings that are allowed in a specific duration"
        },
        "frequency": {
          "$ref": "#/definitions/typesFrequency",
          "title": "Restriction will be applied for the following frequency"
        },
        "interval": {
          "$ref": "#/definitions/typesDateslot",
          "title": "Restriction will be applied b/w these days"
        },
        "frequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "Frequency Info"
        }
      }
    },
    "v1EmployeeSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "enableDraft": {
          "type": "boolean"
        },
        "enabledServiceDurations": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Durations"
          }
        },
        "privateUrl": {
          "type": "string"
        },
        "bookingLimits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeBookingLimits"
          }
        },
        "changeMask": {
          "type": "string"
        }
      },
      "title": "Employee settings"
    },
    "v1EmployeeSettingWrapper": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1EmployeeSetting"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1UpsertEmployeeSettingRequest": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1EmployeeSetting"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "LocalesGetLocaleByIdBody": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LocalesGetLocaleByParentBody": {
      "type": "object",
      "properties": {
        "propertyType": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchUpsertLocaleResponse": {
      "type": "object",
      "properties": {
        "recordData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecordData"
          }
        }
      }
    },
    "v1GetDefaultLocaleResponse": {
      "type": "object",
      "properties": {
        "records": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Record"
          }
        }
      }
    },
    "v1GetLocaleByIdResponse": {
      "type": "object",
      "properties": {
        "recordData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecordData"
          }
        }
      },
      "title": "TODO why we need array of Record Data if only one id is coming in input"
    },
    "v1GetLocaleByParentResponse": {
      "type": "object",
      "properties": {
        "recordData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecordData"
          }
        }
      }
    },
    "v1Record": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "propertyType": {
          "type": "string"
        },
        "propertyData": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1RecordData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "propertyType": {
          "type": "string"
        },
        "recordLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecordLocale"
          }
        }
      }
    },
    "v1RecordLocale": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string"
        },
        "propertyData": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "typesGallery": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesGalleryItem"
          }
        },
        "default": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      },
      "title": "for chaku always tag json"
    },
    "v1AppType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "markdown": {
          "type": "string"
        },
        "classification": {
          "$ref": "#/definitions/v1AppTypeCategory"
        },
        "categories": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppTypeCategory"
          }
        },
        "level": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppTypeLevel"
          }
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "serviceModules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "modules that will be activated on this app-type"
        },
        "disabledModules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "modules that will be deactivated on this app-type"
        },
        "invisible": {
          "type": "boolean"
        },
        "dependentAppTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "privacyPolicyLink": {
          "type": "string"
        },
        "termsAndConditionsLink": {
          "type": "string"
        },
        "docsLink": {
          "type": "string"
        },
        "madeBy": {
          "type": "string"
        }
      }
    },
    "v1AppTypeCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "v1AppTypeLevel": {
      "type": "string",
      "enum": [
        "LOCATION",
        "USER",
        "COMPANY",
        "EMPLOYEE"
      ],
      "default": "LOCATION"
    },
    "v1AppTypeLevelFilter": {
      "type": "string",
      "enum": [
        "ALL",
        "LOCATION_FILTER",
        "USER_FILTER",
        "COMPANY_FILTER",
        "EMPLOYEE_FILTER"
      ],
      "default": "ALL"
    },
    "v1BatchGetAppTypeResponse": {
      "type": "object",
      "properties": {
        "appType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppType"
          }
        }
      }
    },
    "v1ListAppTypeResponse": {
      "type": "object",
      "properties": {
        "appType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppType"
          }
        }
      }
    },
    "v1Dimension": {
      "type": "object",
      "properties": {
        "width": {
          "type": "integer",
          "format": "int32"
        },
        "height": {
          "type": "integer",
          "format": "int32"
        },
        "left": {
          "type": "integer",
          "format": "int32"
        },
        "top": {
          "type": "integer",
          "format": "int32"
        },
        "static": {
          "type": "boolean"
        }
      }
    },
    "v1GetUserSettingsResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "userSettingsData": {
          "$ref": "#/definitions/v1UserSettingData"
        }
      }
    },
    "v1MySpaceSetting": {
      "type": "object",
      "properties": {
        "activeWidgets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "dimensions": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ResponsiveDimension"
          }
        }
      }
    },
    "v1QuickStartGuideSetting": {
      "type": "object",
      "properties": {
        "step": {
          "type": "integer",
          "format": "int32"
        },
        "completedSteps": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "v1ResponsiveDimension": {
      "type": "object",
      "properties": {
        "xs": {
          "$ref": "#/definitions/v1Dimension"
        },
        "sm": {
          "$ref": "#/definitions/v1Dimension"
        },
        "md": {
          "$ref": "#/definitions/v1Dimension"
        },
        "lg": {
          "$ref": "#/definitions/v1Dimension"
        },
        "xl": {
          "$ref": "#/definitions/v1Dimension"
        }
      }
    },
    "v1UpsertUserSettingsRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "userSettingsData": {
          "$ref": "#/definitions/v1UserSettingData"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UserSettingData": {
      "type": "object",
      "properties": {
        "userUISetting": {
          "$ref": "#/definitions/v1UserUISetting"
        },
        "quickStartGuideSetting": {
          "$ref": "#/definitions/v1QuickStartGuideSetting"
        },
        "wizardSetting": {
          "$ref": "#/definitions/v1WizardSetting"
        },
        "mySpaceSetting": {
          "$ref": "#/definitions/v1MySpaceSetting"
        }
      }
    },
    "v1UserUISetting": {
      "type": "object",
      "properties": {
        "themeColor": {
          "type": "string"
        },
        "darkMode": {
          "type": "boolean"
        },
        "signupProfession": {
          "type": "string"
        }
      }
    },
    "v1WizardSetting": {
      "type": "object",
      "properties": {
        "step": {
          "type": "integer",
          "format": "int32"
        },
        "completedSteps": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "v1Assistant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent will be location id"
        },
        "openaiAssistantId": {
          "type": "string",
          "title": "fields"
        },
        "fileUrl": {
          "type": "string"
        },
        "openaiFileId": {
          "type": "string"
        },
        "lastGenerationDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ChatConversationRequest": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "assistant": {
          "type": "string"
        },
        "threadId": {
          "type": "string"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1ChatConversationResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "string"
        },
        "threadId": {
          "type": "string"
        }
      }
    },
    "v1ListAllAssistantsByCompanyResponse": {
      "type": "object",
      "properties": {
        "assistants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Assistant"
          }
        }
      }
    },
    "v1UpsertAssistantRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "location-id"
        }
      }
    },
    "CompanySettingsUpsertCompanyGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "companySetting": {
          "type": "object",
          "properties": {
            "navMenus": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "aliases": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/v1Alias"
              }
            },
            "disableSeo": {
              "type": "boolean"
            },
            "customization": {
              "$ref": "#/definitions/v1CompanyCustomization"
            }
          }
        }
      }
    },
    "CompanySettingsUpsertCompanySettingBody": {
      "type": "object",
      "properties": {
        "companySetting": {
          "type": "object",
          "properties": {
            "navMenus": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "aliases": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/v1Alias"
              }
            },
            "disableSeo": {
              "type": "boolean"
            },
            "customization": {
              "$ref": "#/definitions/v1CompanyCustomization"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1Alias": {
      "type": "object",
      "properties": {
        "singular": {
          "type": "string"
        },
        "plural": {
          "type": "string"
        }
      }
    },
    "v1BatchCompanySettingLocaleUpsertRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "override": {
          "type": "boolean"
        },
        "companySettingLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocale"
          }
        }
      }
    },
    "v1BatchCompanySettingLocaleUpsertResponse": {
      "type": "object",
      "properties": {
        "companySettingLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocale"
          }
        }
      }
    },
    "v1BatchGetCompanySettingByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "companySettingByIdLocale": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingByIdLocale"
          }
        }
      }
    },
    "v1BatchGetCompanySettingByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "companySettingLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocale"
          }
        }
      }
    },
    "v1BatchGetCompanySettingByParentLocaleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchGetCompanySettingByParentLocaleResponse": {
      "type": "object",
      "properties": {
        "companySettingLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocale"
          }
        }
      }
    },
    "v1ClickBehaviour": {
      "type": "string",
      "enum": [
        "NEXT",
        "DESCRIPTION"
      ],
      "default": "NEXT"
    },
    "v1CompanyCustomization": {
      "type": "object",
      "properties": {
        "disableStaffBooking": {
          "type": "boolean"
        },
        "showStaffRandomly": {
          "type": "boolean"
        },
        "hideClientSideDiscount": {
          "type": "boolean"
        },
        "checkDiscountEligibility": {
          "type": "boolean"
        },
        "disableBilling": {
          "type": "boolean"
        },
        "billingMessage": {
          "type": "string"
        },
        "disableApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clickBehaviour": {
          "$ref": "#/definitions/v1ClickBehaviour"
        },
        "loginProvider": {
          "type": "string"
        },
        "skipInformationScreen": {
          "type": "boolean"
        },
        "skipTimeSelection": {
          "type": "boolean"
        },
        "onlyCheckOpenHourForAvailableServices": {
          "type": "boolean"
        },
        "onlyAllowVerifiedCustomersToBook": {
          "type": "boolean",
          "title": "OnlyAllowVerifiedCustomersToBook - only existing customers can book"
        },
        "messageForUnverifiedCustomers": {
          "type": "string",
          "title": "MessageForUnverifiedCustomers only applicable if OnlyAllowVerifiedCustomersToBook is true"
        },
        "customerLinkedWithLocations": {
          "type": "boolean",
          "title": "CustomerLinkedWithLocations - only customers linked to the location can book"
        },
        "messageForCustomerLinking": {
          "type": "string",
          "title": "MessageForCustomerLinking - only applicable if CustomerLinkedWithLocations is true"
        },
        "messageForNoStudentInParent": {
          "type": "string",
          "title": "MessageForNoStudentInParent provides message to parents with no children"
        },
        "sameStaffReschedule": {
          "type": "boolean",
          "title": "SameStaffReschedule for client side"
        },
        "autoRedirectToSso": {
          "type": "boolean",
          "title": "AutoRedirectToSSO - auto redirect on true"
        },
        "showLogoOnPaymentScreen": {
          "type": "boolean",
          "title": "ShowLogoOnPaymentScreen controls logo on payment screen"
        },
        "redirectUrlAfterBooking": {
          "type": "string",
          "title": "RedirectUrlAfterBooking will store url to redirect to after booking confirmation"
        },
        "locationOverrides": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocationOverrides"
          },
          "title": "contains the corresponding customizations overridden on location"
        },
        "optimiseEvents": {
          "type": "boolean"
        },
        "hideMarketplace": {
          "type": "boolean"
        },
        "calendarView": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hideCalendarSetting": {
          "type": "boolean"
        },
        "hideExploreMarketplace": {
          "type": "boolean"
        },
        "hideEmployeePhoneNumber": {
          "type": "boolean"
        },
        "sendReviewMailToStaff": {
          "type": "boolean"
        },
        "sendIndividualMailForEachCartItem": {
          "type": "boolean",
          "title": "SendIndividualMailForEachCartItems will allow to send mail individually for each cart item"
        },
        "showDeleteLocationButton": {
          "type": "boolean",
          "title": "ShowDeleteLocationButton will show deleteLocationButton"
        },
        "sendOpenHourEmail": {
          "type": "boolean",
          "title": "SendOpenHourEmail will send open hour details in email"
        },
        "hideAddLocationPhoneStep": {
          "type": "boolean"
        },
        "disableLogoRedirect": {
          "type": "boolean"
        },
        "disablePastBooking": {
          "type": "boolean"
        },
        "displayMinimalSlot": {
          "type": "boolean"
        },
        "disableStaffApproveAppointments": {
          "type": "boolean"
        },
        "condenseStaffList": {
          "type": "boolean"
        },
        "replyToEmail": {
          "type": "string",
          "description": "ReplyToEmail is for all client side booking emails and if it is not present, default\nowner's email will be used."
        },
        "hideMapFromBookingPortalForStaff": {
          "type": "boolean"
        },
        "addLocationWithoutNumber": {
          "type": "boolean"
        },
        "checkConsumerLimitRestriction": {
          "type": "boolean",
          "description": "CheckConsumerLimitRestriction and CheckEmployeeLimitRestriction will apply employee and customer restrictions in\nthe availability of slots."
        },
        "checkEmployeeLimitRestriction": {
          "type": "boolean"
        },
        "hideStaffFromAddAppointmentDialog": {
          "type": "boolean"
        },
        "customerMandatoryInAppointment": {
          "type": "boolean",
          "title": "https://appointy.atlassian.net/browse/AXN-1816"
        },
        "intakeFormMandatoryInAppointment": {
          "type": "boolean"
        },
        "applyLocationNameAsEmailSender": {
          "type": "boolean",
          "description": "ApplyLocationNameAsEmailSender will use location name as the sender in all appointment emails."
        },
        "displayStaffInAlphabeticOrder": {
          "type": "boolean"
        },
        "checkCustomerStaffLinking": {
          "type": "boolean"
        },
        "sendMailAsBcc": {
          "type": "boolean"
        },
        "unBrandingEnabled": {
          "type": "boolean"
        },
        "unBranding": {
          "$ref": "#/definitions/v1UnBranding"
        },
        "showExternalCalendarEventName": {
          "type": "boolean",
          "description": "ShowExternalCalendarEventName will show the external-calendar event (i.e block hour) name to all the admin users."
        },
        "linkAllLocationsToCustomer": {
          "type": "boolean",
          "title": "LinkAllLocationsToCustomer will link all the locations present in the company for all the customers"
        },
        "mergeIntakeFormFieldsWithSameLabel": {
          "type": "boolean",
          "description": "MergeIntakeFormFieldsWithSameLabel will merge all intake form fields having same form name in company appointment reports."
        },
        "hideInviteEmployeeLog": {
          "type": "boolean",
          "description": "HideInviteEmployeeLog hides invite sent entry from activity && notification logs."
        },
        "applyFullMasking": {
          "type": "boolean",
          "title": "ApplyFullMasking will hide the data completely (i.e Th**** to ******)"
        },
        "applyCompanyNameAsEmailSender": {
          "type": "boolean",
          "title": "ApplyCompanyNameAsEmailSender when true, send mail with company name;"
        },
        "hideEmptyUpdateLog": {
          "type": "boolean",
          "title": "HideEmptyUpdateLog when true, hides empty update logs generating on appointments and employees update"
        },
        "applyNewAdminAvailabilityFlow": {
          "type": "boolean",
          "title": "ApplyAdminAvailabilityFlow will apply the new availability flow for admin side (implemented for appointy x)"
        },
        "countryCodeToBeRemoved": {
          "type": "string",
          "title": "CountryCodeToBeRemoved will have the code that is to be removed from the phoneNumber"
        },
        "formatPhoneNumber": {
          "type": "boolean",
          "title": "FormatPhoneNumber will format the phone number in xxx-xxx-xxxx this format"
        },
        "hideDescriptionInCalendar": {
          "type": "boolean",
          "title": "HideDescriptionInCalendar will remove the description from calendar events"
        },
        "donotSendPastBookingSmsToAdmin": {
          "type": "boolean",
          "title": "DonotSendPastBookingSmsToAdmin will define whether to send past booking sms to admin or not"
        },
        "donotSendPastBookingEmailToAdmin": {
          "type": "boolean",
          "title": "DonotSendPastBookingEmailToAdmin will define whether to send past booking email to admin or not"
        },
        "displayIntakeFormField": {
          "type": "boolean",
          "title": "DisplayIntakeFormFieldKey will store the intake form key which UI need to show in calendar section"
        },
        "blockHourApprovalRequired": {
          "type": "boolean",
          "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
        },
        "displayServiceInAlphabeticOrder": {
          "type": "boolean",
          "title": "DisplayServiceInAlphabeticOrder is used to validate alphabetical sorting of services across the system"
        },
        "displayLocationInAlphabeticOrder": {
          "type": "boolean",
          "title": "DisplayLocationInAlphabeticOrder is used to validate alphabetical sorting of locations under a company"
        },
        "enableLocationLevelToCreateCustomStatus": {
          "type": "boolean",
          "title": "EnableLocationLevelToCreateCustomStatus is used to Enable Location level user to create custom status at location Level"
        },
        "hideCompanyLevelCustomStatusForLocation": {
          "type": "boolean",
          "title": "HideCompanyLevelCustomStatusForLocation is used to hide Company level custom status from location level user"
        },
        "enableResourceTierPrioritization": {
          "type": "boolean",
          "description": "EnableResourceTierPrioritization - It is used to enable Tier Prioritization on Company Level."
        },
        "allowLocationAdminToToggleResourceTierPrioritization": {
          "type": "boolean",
          "description": "AllowLocationAdminToToggleResourceTierPrioritization - It is used to enable/disable prioritization on location level."
        },
        "allowLocationAdminToSetResourceTierPriority": {
          "type": "boolean",
          "title": "AllowLocationAdminToSetResourceTierPriority - It allows location admin to set its own priority"
        },
        "allowOnlyStaffOnClientSide": {
          "type": "boolean",
          "title": "IMP: While adding new customization field, also add in LocationCustomization object below"
        },
        "showServiceDescriptionClientSide": {
          "type": "boolean",
          "title": "AllowOnlyStaffOnClientSide - It is used to allow only staff to book appointments on client side (Cana-Elite customisation)"
        },
        "breakServiceTitleOnClientSide": {
          "type": "string",
          "description": "ShowServiceDescriptionClientSide - It is used to display a description on the booking page after selecting a service.\n\nBreakServiceTitleClientSide - Specifies how to break the service title on the client side, possibly containing formatting instructions or breakpoint indicators."
        }
      }
    },
    "v1CompanySetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id can be companyId while creation"
        },
        "navMenus": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Alias"
          }
        },
        "disableSeo": {
          "type": "boolean"
        },
        "customization": {
          "$ref": "#/definitions/v1CompanyCustomization"
        }
      }
    },
    "v1CompanySettingByIdLocale": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "v1CompanySettingLocale": {
      "type": "object",
      "properties": {
        "companySettingLocalesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocaleData"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1CompanySettingLocaleData": {
      "type": "object",
      "properties": {
        "companySettingLocaleValue": {
          "$ref": "#/definitions/v1CompanySettingLocaleValue"
        },
        "locale": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1CompanySettingLocaleValue": {
      "type": "object",
      "properties": {
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1Alias"
          }
        }
      }
    },
    "v1GetCompanySettingByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetCompanySettingByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "companySettingLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanySettingLocale"
          }
        }
      }
    },
    "v1LocationCustomization": {
      "type": "object",
      "properties": {
        "disableStaffBooking": {
          "type": "boolean"
        },
        "showStaffRandomly": {
          "type": "boolean"
        },
        "hideClientSideDiscount": {
          "type": "boolean"
        },
        "checkDiscountEligibility": {
          "type": "boolean"
        },
        "disableBilling": {
          "type": "boolean"
        },
        "billingMessage": {
          "type": "string"
        },
        "disableApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "clickBehaviour": {
          "$ref": "#/definitions/v1ClickBehaviour"
        },
        "loginProvider": {
          "type": "string"
        },
        "skipInformationScreen": {
          "type": "boolean"
        },
        "skipTimeSelection": {
          "type": "boolean"
        },
        "onlyCheckOpenHourForAvailableServices": {
          "type": "boolean"
        },
        "onlyAllowVerifiedCustomersToBook": {
          "type": "boolean",
          "title": "OnlyAllowVerifiedCustomersToBook - only existing customers can book"
        },
        "messageForUnverifiedCustomers": {
          "type": "string",
          "title": "MessageForUnverifiedCustomers only applicable if OnlyAllowVerifiedCustomersToBook is true"
        },
        "customerLinkedWithLocations": {
          "type": "boolean",
          "title": "CustomerLinkedWithLocations - only customers linked to the location can book"
        },
        "messageForCustomerLinking": {
          "type": "string",
          "title": "MessageForCustomerLinking - only applicable if CustomerLinkedWithLocations is true"
        },
        "messageForNoStudentInParent": {
          "type": "string",
          "title": "MessageForNoStudentInParent provides message to parents with no children"
        },
        "sameStaffReschedule": {
          "type": "boolean",
          "title": "SameStaffReschedule for client side"
        },
        "autoRedirectToSso": {
          "type": "boolean",
          "title": "AutoRedirectToSSO - auto redirect on true"
        },
        "showLogoOnPaymentScreen": {
          "type": "boolean",
          "title": "ShowLogoOnPaymentScreen controls logo on payment screen"
        },
        "redirectUrlAfterBooking": {
          "type": "string",
          "title": "RedirectUrlAfterBooking will store url to redirect to after booking confirmation"
        },
        "optimiseEvents": {
          "type": "boolean"
        },
        "hideMarketplace": {
          "type": "boolean"
        },
        "calendarView": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "hideCalendarSetting": {
          "type": "boolean"
        },
        "hideExploreMarketplace": {
          "type": "boolean"
        },
        "hideEmployeePhoneNumber": {
          "type": "boolean"
        },
        "sendReviewMailToStaff": {
          "type": "boolean"
        },
        "sendIndividualMailForEachCartItem": {
          "type": "boolean",
          "title": "SendIndividualMailForEachCartItems will allow to send mail individually for each cart item"
        },
        "showDeleteLocationButton": {
          "type": "boolean",
          "title": "ShowDeleteLocationButton will show deleteLocationButton"
        },
        "sendOpenHourEmail": {
          "type": "boolean",
          "title": "SendOpenHourEmail will send open hour details in email"
        },
        "hideAddLocationPhoneStep": {
          "type": "boolean"
        },
        "disableLogoRedirect": {
          "type": "boolean"
        },
        "disablePastBooking": {
          "type": "boolean"
        },
        "displayMinimalSlot": {
          "type": "boolean"
        },
        "disableStaffApproveAppointments": {
          "type": "boolean"
        },
        "condenseStaffList": {
          "type": "boolean"
        },
        "replyToEmail": {
          "type": "string",
          "description": "ReplyToEmail is for all client side booking emails and if it is not present, default\nowner's email will be used."
        },
        "hideMapFromBookingPortalForStaff": {
          "type": "boolean"
        },
        "addLocationWithoutNumber": {
          "type": "boolean"
        },
        "checkConsumerLimitRestriction": {
          "type": "boolean",
          "description": "CheckConsumerLimitRestriction and CheckEmployeeLimitRestriction will apply employee and customer restrictions in\nthe availability of slots."
        },
        "checkEmployeeLimitRestriction": {
          "type": "boolean"
        },
        "hideStaffFromAddAppointmentDialog": {
          "type": "boolean"
        },
        "customerMandatoryInAppointment": {
          "type": "boolean"
        },
        "intakeFormMandatoryInAppointment": {
          "type": "boolean"
        },
        "applyLocationNameAsEmailSender": {
          "type": "boolean",
          "description": "ApplyLocationNameAsEmailSender will use location name as the sender in all appointment emails."
        },
        "displayStaffInAlphabeticOrder": {
          "type": "boolean"
        },
        "checkCustomerStaffLinking": {
          "type": "boolean"
        },
        "sendMailAsBcc": {
          "type": "boolean"
        },
        "unBrandingEnabled": {
          "type": "boolean"
        },
        "unBranding": {
          "$ref": "#/definitions/v1UnBranding"
        },
        "showExternalCalendarEventName": {
          "type": "boolean",
          "description": "ShowExternalCalendarEventName will show the external-calendar event (i.e block hour) name to all the admin users."
        },
        "linkAllLocationsToCustomer": {
          "type": "boolean",
          "title": "LinkAllLocationsToCustomer will link all the locations present in the company for all the customers"
        },
        "mergeIntakeFormFieldsWithSameLabel": {
          "type": "boolean",
          "description": "MergeIntakeFormFieldsWithSameLabel will merge all intake form fields having same form name in company appointment reports."
        },
        "hideInviteEmployeeLog": {
          "type": "boolean",
          "description": "HideInviteEmployeeLog hides invite sent entry from activity && notification logs."
        },
        "applyFullMasking": {
          "type": "boolean",
          "title": "ApplyFullMasking will hide the data completely (i.e Th**** to ******)"
        },
        "applyCompanyNameAsEmailSender": {
          "type": "boolean",
          "title": "ApplyCompanyNameAsEmailSender when true, send mail with company name;"
        },
        "hideEmptyUpdateLog": {
          "type": "boolean",
          "title": "HideEmptyUpdateLog when true, hides empty update logs generating on appointments and employees update"
        },
        "applyNewAdminAvailabilityFlow": {
          "type": "boolean",
          "title": "ApplyAdminAvailabilityFlow will apply the new availability flow for admin side (implemented for appointy x)"
        },
        "countryCodeToBeRemoved": {
          "type": "string",
          "title": "CountryCodeToBeRemoved will have the code that is to be removed from the phoneNumber"
        },
        "formatPhoneNumber": {
          "type": "boolean",
          "title": "FormatPhoneNumber will format the phone number in xxx-xxx-xxxx this format"
        },
        "hideDescriptionInCalendar": {
          "type": "boolean",
          "title": "HideDescriptionInCalendar will remove the description from calendar events"
        },
        "displayIntakeFormField": {
          "type": "boolean",
          "title": "DisplayIntakeFormFieldKey will store the intake form key which UI need to show in calendar section"
        },
        "blockHourApprovalRequired": {
          "type": "boolean",
          "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
        },
        "displayServiceInAlphabeticOrder": {
          "type": "boolean",
          "title": "DisplayServiceInAlphabeticOrder is used to validate alphabetical sorting of services across the system"
        },
        "allowOnlyStaffOnClientSide": {
          "type": "boolean",
          "title": "AllowOnlyStaffOnClientSide - It is used to allow only staff to book appointments on client side (Cana-Elite customisation)"
        },
        "showServiceDescriptionClientSide": {
          "type": "boolean",
          "description": "ShowServiceDescriptionClientSide - It is used to display a description on the booking page after selecting a service."
        },
        "breakServiceTitleOnClientSide": {
          "type": "string",
          "description": "BreakServiceTitleClientSide - Specifies how to break the service title on the client side, possibly containing formatting instructions or breakpoint indicators."
        }
      }
    },
    "v1LocationOverrides": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "customization": {
          "$ref": "#/definitions/v1LocationCustomization"
        }
      }
    },
    "v1UnBranding": {
      "type": "object",
      "properties": {
        "calendarInviteSubject": {
          "type": "string"
        },
        "skipICS": {
          "type": "boolean"
        }
      }
    },
    "AppsToggleAppBody": {
      "type": "object",
      "properties": {
        "active": {
          "type": "boolean"
        },
        "appTypeId": {
          "type": "string"
        }
      }
    },
    "appv1ListAppsOfCompany": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        }
      }
    },
    "v1App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1AppCategory": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "v1AppDetail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "serviceModules": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1AppLinkingLevel": {
      "type": "string",
      "enum": [
        "LOCATION",
        "USER",
        "COMPANY",
        "EMPLOYEE"
      ],
      "default": "LOCATION"
    },
    "v1BatchCreateAppObject": {
      "type": "object",
      "properties": {
        "appTypeId": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1CreateAppRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1GetAppCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListAppResponse": {
      "type": "object",
      "properties": {
        "app": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1App"
          }
        }
      }
    },
    "v1ListAppsDetailResponse": {
      "type": "object",
      "properties": {
        "app": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppDetail"
          }
        }
      }
    },
    "v1ListAppsOfLocation": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        }
      }
    },
    "v1ListAppsOfUser": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1Analytic": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "targetId": {
          "type": "string"
        },
        "analyticsId": {
          "type": "string"
        },
        "accountName": {
          "type": "string"
        },
        "entityName": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "v1AnalyticData": {
      "type": "object",
      "properties": {
        "targetId": {
          "type": "string"
        },
        "analyticsId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "v1AnalyticsAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1BatchGetAnalyticResponse": {
      "type": "object",
      "properties": {
        "analytic": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Analytic"
          }
        }
      }
    },
    "v1Entity": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "analyticsId": {
          "type": "string"
        }
      }
    },
    "v1EntityV2": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "analyticsId": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1ListAnalyticAccountsResponse": {
      "type": "object",
      "properties": {
        "accounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AnalyticsAccount"
          }
        }
      }
    },
    "v1ListAnalyticByTargetResponse": {
      "type": "object",
      "properties": {
        "analytic": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AnalyticData"
          }
        }
      }
    },
    "v1ListAnalyticResponse": {
      "type": "object",
      "properties": {
        "analytic": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Analytic"
          }
        }
      }
    },
    "v1ListEntitiesResponse": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Entity"
          }
        }
      }
    },
    "v1ListEntitiesResponseV2": {
      "type": "object",
      "properties": {
        "entities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EntityV2"
          }
        }
      }
    },
    "v1UpsertAnalyticRequest": {
      "type": "object",
      "properties": {
        "analytic": {
          "$ref": "#/definitions/v1Analytic"
        }
      }
    },
    "v1BatchGetWebhookLogsResponse": {
      "type": "object",
      "properties": {
        "webhookLog": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookLog"
          }
        }
      }
    },
    "v1WebhookLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "description": "data send by the server to the given url."
        },
        "url": {
          "type": "string",
          "title": "url on which we have to send the notification"
        },
        "status": {
          "type": "integer",
          "format": "int64",
          "title": "status of the packet send i.e  200 404"
        },
        "response": {
          "type": "string"
        },
        "companyId": {
          "type": "string",
          "title": "parent company id"
        },
        "webhookId": {
          "type": "string",
          "title": "object id"
        },
        "webhookIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sentOn": {
          "type": "string",
          "format": "date-time"
        },
        "retryAttempt": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1WebhookLogNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1WebhookReportObject"
        }
      }
    },
    "v1WebhookReportObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "title": "data associated with webhook"
        },
        "status": {
          "type": "integer",
          "format": "int64"
        },
        "response": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "sentOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1WebhookReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookLogNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetReceiptSettingsResponse": {
      "type": "object",
      "properties": {
        "receiptSettings": {
          "$ref": "#/definitions/v1ReceiptSetting"
        }
      }
    },
    "v1ReceiptSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "sendAutomaticReceiptMail": {
          "type": "boolean"
        }
      }
    },
    "v1UpsertReceiptSettingsRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "updateMask": {
          "type": "string"
        },
        "receiptSetting": {
          "$ref": "#/definitions/v1ReceiptSetting"
        }
      }
    },
    "v1UpsertReceiptSettingsResponse": {
      "type": "object",
      "properties": {
        "receiptSetting": {
          "$ref": "#/definitions/v1ReceiptSetting"
        }
      }
    },
    "v1ValidateLicenseResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1LicenseTrialTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is company-id"
        },
        "trialId": {
          "type": "string"
        },
        "licenseId": {
          "type": "string"
        },
        "licenseWalletId": {
          "type": "string"
        },
        "optedOn": {
          "type": "string",
          "format": "date-time"
        },
        "validTill": {
          "type": "string",
          "format": "date-time"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ListLicenseTrialTransactionResponse": {
      "type": "object",
      "properties": {
        "licenseTrialTransaction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LicenseTrialTransaction"
          }
        }
      }
    },
    "v1BatchGetLicenseTrialResponse": {
      "type": "object",
      "properties": {
        "licenseTrial": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LicenseTrial"
          }
        }
      }
    },
    "v1LicenseTrial": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique identifier for license trial"
        },
        "name": {
          "type": "string",
          "title": "name/title for license trial"
        },
        "description": {
          "type": "string",
          "title": "description of license trial"
        },
        "licenseId": {
          "type": "string",
          "title": "License identifier which will be provided in trial"
        },
        "expiryInDays": {
          "type": "integer",
          "format": "int64",
          "title": "time in days after which trial will expire on activation"
        },
        "restrictionNumberOfTimesCanBeUsed": {
          "type": "integer",
          "format": "int32",
          "title": "number of times this trial can be used by same entity"
        },
        "allowedOnBillingMembershipPlans": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of billing membership plans with which trial can be availed only\nif list is empty, no restriction is applied"
        },
        "creditedAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "amount to be credited to the wallet of entity when this trial is availed"
        }
      }
    },
    "v1ListLicenseTrialResponse": {
      "type": "object",
      "properties": {
        "licenseTrial": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LicenseTrial"
          }
        }
      }
    },
    "typesRestrictionTypes": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_RESTRICTION",
        "NUMBER_LIMIT",
        "CYCLIC_NUMBER_LIMIT",
        "MODULE",
        "FEATURE_RPC",
        "ATTRIBUTE"
      ],
      "default": "UNSPECIFIED_RESTRICTION",
      "description": "- NUMBER_LIMIT: hard number limit on total count (Ex: 5 staff)\n - CYCLIC_NUMBER_LIMIT: number limit on total count in 1 cycle (Ex: 100 appointments in 1 month)\n - MODULE: restrict complete module usage (Ex: restrict class module from usage completely)\n - FEATURE_RPC: restrict certain features/rpc (Ex: Reply feature for review)\n - ATTRIBUTE: restrict input parameter values (Ex: Date-Range in reports)",
      "title": "Restriction-types for License and Billing-Plan"
    },
    "v1BatchGetLicenseResponse": {
      "type": "object",
      "properties": {
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1License"
          }
        }
      }
    },
    "v1License": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "licenseName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "moduleLicenses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ModuleLicense"
          }
        },
        "product": {
          "type": "string"
        },
        "displayActivityLogFromInMonths": {
          "type": "integer",
          "format": "int32"
        },
        "deleteActivityLogAfterInMonths": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ListLicenseResponse": {
      "type": "object",
      "properties": {
        "license": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1License"
          }
        }
      }
    },
    "v1ModuleLicense": {
      "type": "object",
      "properties": {
        "slug": {
          "type": "string",
          "title": "slug: Module license slug will be unique throughout the project"
        },
        "moduleName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "restrictionType": {
          "$ref": "#/definitions/typesRestrictionTypes"
        },
        "rpcs": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rpc: list of RPCs methods for Feature based Restriction"
        },
        "defaultLimit": {
          "type": "integer",
          "format": "int32",
          "title": "default limit for numeric/cyclic limit"
        }
      }
    },
    "CertificatesUpdateCertificateBody": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "authority": {
              "type": "string"
            },
            "licenseNumber": {
              "type": "string"
            },
            "validFrom": {
              "type": "string",
              "format": "date-time"
            },
            "validTill": {
              "type": "string",
              "format": "date-time"
            },
            "url": {
              "type": "string"
            },
            "certificateType": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetCertificateResponse": {
      "type": "object",
      "properties": {
        "certificate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Certificate"
          }
        }
      }
    },
    "v1Certificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "authority": {
          "type": "string"
        },
        "licenseNumber": {
          "type": "string"
        },
        "validFrom": {
          "type": "string",
          "format": "date-time"
        },
        "validTill": {
          "type": "string",
          "format": "date-time"
        },
        "url": {
          "type": "string"
        },
        "certificateType": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CertificateNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Certificate"
        }
      }
    },
    "v1CreateCertificateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "certificate": {
          "$ref": "#/definitions/v1Certificate"
        }
      }
    },
    "v1ListCertificateResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CertificateNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "CategoriesUpdateCategoryBody": {
      "type": "object",
      "properties": {
        "category": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name is the human readable name of the category.\nIt need not be unique."
            },
            "description": {
              "type": "string",
              "title": "Description is a short note about a category"
            },
            "image": {
              "$ref": "#/definitions/typesGalleryItem",
              "title": "Image/Picture to represent category"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "parentCategory": {
              "type": "string",
              "title": "represents parent category of current category.\nCategories will form a tree like structure (hierarchy),\nin which a single category can have multiple child categories, but only\none parent"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "categoryLevel": {
              "type": "integer",
              "format": "int32",
              "title": "holds level of category in hierarchy of categories\nEx: If has 4 parent_categories(one-by-one) above, then value = 4"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the category object can be updated.\nList of fields which can be updated are  :\nName, Description, ImageUrl, Metadata, SubCategories"
        }
      },
      "title": "UpdateCategoryRequest contains the category object and update_mask .\nThe update mask will be used to update a specific field in Category object"
    },
    "CategoriesUpdateCategoryDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchCategoryLocaleUpsertRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "override": {
          "type": "boolean"
        },
        "categoryLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocale"
          }
        }
      }
    },
    "v1BatchCategoryLocaleUpsertResponse": {
      "type": "object",
      "properties": {
        "categoryLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocale"
          }
        }
      }
    },
    "v1BatchGetCategoryByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "categoryByIdLocale": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryByIdLocale"
          }
        }
      }
    },
    "v1BatchGetCategoryByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "categoryLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocale"
          }
        }
      }
    },
    "v1BatchGetCategoryByParentLocaleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchGetCategoryByParentLocaleResponse": {
      "type": "object",
      "properties": {
        "categoryLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocale"
          }
        }
      }
    },
    "v1BatchGetCategoryResponse": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Category"
          }
        }
      },
      "description": "BatchGetCategoryResponse contains the list of categories given in the request\nobject."
    },
    "v1Category": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the category id which uniquely identify a category"
        },
        "name": {
          "type": "string",
          "description": "Name is the human readable name of the category.\nIt need not be unique."
        },
        "description": {
          "type": "string",
          "title": "Description is a short note about a category"
        },
        "image": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Image/Picture to represent category"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "parentCategory": {
          "type": "string",
          "title": "represents parent category of current category.\nCategories will form a tree like structure (hierarchy),\nin which a single category can have multiple child categories, but only\none parent"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "categoryLevel": {
          "type": "integer",
          "format": "int32",
          "title": "holds level of category in hierarchy of categories\nEx: If has 4 parent_categories(one-by-one) above, then value = 4"
        }
      }
    },
    "v1CategoryByIdLocale": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "v1CategoryLocale": {
      "type": "object",
      "properties": {
        "categoryLocalesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocaleData"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1CategoryLocaleData": {
      "type": "object",
      "properties": {
        "categoryLocaleValue": {
          "$ref": "#/definitions/v1CategoryLocaleValue"
        },
        "locale": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1CategoryLocaleValue": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1CreateCategoryRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the ID of the given category's parent."
        },
        "category": {
          "$ref": "#/definitions/v1Category"
        }
      }
    },
    "v1GetCategoryByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetCategoryByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "categoryLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CategoryLocale"
          }
        }
      }
    },
    "v1ListCategoryResponse": {
      "type": "object",
      "properties": {
        "category": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Category"
          }
        }
      },
      "title": "ListCategoryResponse contains the list of companies"
    },
    "v1VehicleInfo": {
      "type": "object",
      "properties": {
        "plate": {
          "type": "string"
        },
        "colour": {
          "type": "string"
        },
        "make": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "subModel": {
          "type": "string"
        },
        "yearOfManufacture": {
          "type": "string"
        },
        "age": {
          "type": "integer",
          "format": "int32"
        },
        "vehicleType": {
          "type": "string"
        },
        "grossVehicleMass": {
          "type": "integer",
          "format": "int32"
        },
        "noOfAxles": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "RequestAppsUpdateRequestAppBody": {
      "type": "object",
      "properties": {
        "requestApp": {
          "type": "object",
          "properties": {
            "employeeId": {
              "type": "string"
            },
            "employeeFirstName": {
              "type": "string"
            },
            "employeeLastName": {
              "type": "string"
            },
            "appTypeId": {
              "type": "string"
            },
            "appTypeName": {
              "type": "string"
            },
            "note": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "createdBy": {
              "type": "string"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateRequestAppRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "requestApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequestApp"
          }
        }
      }
    },
    "v1BatchCreateRequestAppResponse": {
      "type": "object",
      "properties": {
        "requestApps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequestApp"
          }
        }
      }
    },
    "v1BatchGetRequestAppResponse": {
      "type": "object",
      "properties": {
        "requestApp": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequestApp"
          }
        }
      }
    },
    "v1CreateRequestAppRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "requestApp": {
          "$ref": "#/definitions/v1RequestApp"
        }
      }
    },
    "v1ListRequestAppResponse": {
      "type": "object",
      "properties": {
        "requestApp": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequestApp"
          }
        }
      }
    },
    "v1RequestAccessReportFilter": {
      "type": "object",
      "properties": {
        "staffIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appTypeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1RequestAccessReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1RequestApp"
        }
      }
    },
    "v1RequestAccessReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RequestAccessReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "totalCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RequestApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is company"
        },
        "employeeId": {
          "type": "string"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "appTypeName": {
          "type": "string"
        },
        "note": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        }
      }
    },
    "v1CreateCustomizationInput": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "customization": {
          "$ref": "#/definitions/v1RoleCustomization"
        }
      }
    },
    "v1CreateCustomizationsRequest": {
      "type": "object",
      "properties": {
        "inputs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateCustomizationInput"
          }
        }
      }
    },
    "v1CreateCustomizationsResponse": {
      "type": "object",
      "properties": {
        "customizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleCustomization"
          }
        }
      }
    },
    "v1ListCustomizationsResponse": {
      "type": "object",
      "properties": {
        "customizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RoleCustomization"
          }
        }
      }
    },
    "v1RoleCustomization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "disableApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "readonlyApps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "BlockHoursUpdateBlockHourByDataCodeBody": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        }
      }
    },
    "BlockHoursUpdateBlockHourRuleBody": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "type": "object",
          "properties": {
            "resourceId": {
              "type": "string",
              "description": "Id of the specific resource/employee\nIf ResourceId is empty it means that the block hour is for all resources at the given parent level."
            },
            "slots": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1BlockHourSlot"
              },
              "title": "Time slots for which the resource will be blocked"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional information for blocking"
            },
            "reason": {
              "type": "string",
              "title": "Reason due to which the resource is blocked"
            },
            "locale": {
              "type": "string",
              "title": "Locale in which the time slot is blocked"
            },
            "title": {
              "type": "string",
              "description": "title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
            },
            "source": {
              "type": "string"
            },
            "externalSourceId": {
              "type": "string"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "recurrenceSet": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "$ref": "#/definitions/v1BlockHourStatus"
            },
            "approvedOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "title": "slots will be updated based on id"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given block hour rule object that can be\nupdated.\nList of fields which can be updated are  :\nslot duration, recurrence set, reason, locale, title\nMessage is required"
        },
        "parent": {
          "type": "string",
          "title": "parent can only be location-id"
        }
      },
      "title": "UpdateBlockHourRuleRequest contains the block hour rule object and update_mask .\nThe update mask will be used to update a specific field in block hour rule object"
    },
    "BlockHoursUpdateBlockHourRuleStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1BlockHourStatus"
        }
      }
    },
    "v1BatchCreateBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      }
    },
    "v1BatchGetBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      },
      "description": "BatchGetBlockHourResponse contains the list of block hour rules given in the request object."
    },
    "v1BlockHourLocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BlockHourRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "Id of the specific resource/employee\nIf ResourceId is empty it means that the block hour is for all resources at the given parent level."
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourSlot"
          },
          "title": "Time slots for which the resource will be blocked"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information for blocking"
        },
        "reason": {
          "type": "string",
          "title": "Reason due to which the resource is blocked"
        },
        "locale": {
          "type": "string",
          "title": "Locale in which the time slot is blocked"
        },
        "title": {
          "type": "string",
          "description": "title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "source": {
          "type": "string"
        },
        "externalSourceId": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1BlockHourStatus"
        },
        "approvedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1BlockHourRuleNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position in the list of block hour rule"
        },
        "node": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      },
      "title": "Represents data corresponding to a position in the list of block hour rule"
    },
    "v1BlockHourSlot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot"
        }
      },
      "title": "Represents a time slot"
    },
    "v1BlockHourStatus": {
      "type": "string",
      "enum": [
        "BLOCK_HOUR_UNKNOWN",
        "BLOCK_HOUR_APPROVED",
        "BLOCK_HOUR_DENIED",
        "BLOCK_HOUR_WAITING_FOR_APPROVAL"
      ],
      "default": "BLOCK_HOUR_UNKNOWN"
    },
    "v1CheckPreExistingBookingForBlockHourResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateBlockHourRuleForMultipleResourcesRequest": {
      "type": "object",
      "properties": {
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request": {
          "$ref": "#/definitions/v1CreateBlockHourRuleRequest"
        }
      }
    },
    "v1CreateBlockHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given block hour rules\nlike group."
        },
        "resourceId": {
          "type": "string",
          "title": "Id of the specific resource/employee"
        },
        "slotDurationInMinutes": {
          "type": "string",
          "format": "int64",
          "title": "slot of time for which the resource is blocked\nDuration must be greater than zero; only if recurrence set provided"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "RRule Set for which time will be blocked"
        },
        "recurringSlotStartTime": {
          "type": "string",
          "format": "date-time",
          "title": "Start time for recurring slots"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information for blocking"
        },
        "reason": {
          "type": "string",
          "title": "Reason due to which the resource is blocked"
        },
        "locale": {
          "type": "string",
          "title": "Locale in which the time slot is blocked"
        },
        "title": {
          "type": "string",
          "description": "Title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          },
          "title": "to add time slots directly without recurrence rule"
        },
        "source": {
          "type": "string"
        },
        "externalSourceId": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateBlockHourRuleRequest is the request to create a new block hour rule ,"
    },
    "v1CreateBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      }
    },
    "v1ListBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRuleNode"
          },
          "title": "Nodes contains the list of block hour rule"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      },
      "title": "ListBlockHourRuleResponse contains the list of block hour rule"
    },
    "v1ListBlockHourRulesForCalendarResponse": {
      "type": "object",
      "properties": {
        "blockHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      },
      "title": "ListBlockHourRulesForCalendarResponse contains the list of block hour\nrules between start time and end time"
    },
    "v1UpdateBlockHourByDataCodeResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      }
    },
    "v1UpdateBlockHourRuleStatusResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      }
    },
    "GroupsUpdateGroupBody": {
      "type": "object",
      "properties": {
        "group": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name of the group which will be displayed to user"
            },
            "description": {
              "type": "string",
              "title": "Description is a short note of this group"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "title": "Group is a collection of companies which have a name and descriptions"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Group"
          }
        }
      }
    },
    "v1Group": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id a unique identifier for group"
        },
        "name": {
          "type": "string",
          "title": "Name of the group which will be displayed to user"
        },
        "description": {
          "type": "string",
          "title": "Description is a short note of this group"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "A group owner can apply settings which can be  applied across all the companies or selected companies.\n\nA group owner can update its group name and description\n\nA group owner can delete its group only when there is no active companies are\nlinked to it, otherwise the owner is informed about the active companies\nwithin that group and he is asked to delete the companies first in order to\ndelete the group.",
      "title": "Group is a collection of companies"
    },
    "v1ListGroupResponse": {
      "type": "object",
      "properties": {
        "group": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Group"
          }
        }
      }
    },
    "WebhookEventsUpdateWebhookEventBody": {
      "type": "object",
      "properties": {
        "webhookEvent": {
          "type": "object",
          "properties": {
            "eventName": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "appName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetWebhookEventResponse": {
      "type": "object",
      "properties": {
        "webhookEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookEvent"
          }
        }
      }
    },
    "v1CreateWebhookEventRequest": {
      "type": "object",
      "properties": {
        "webhookEvent": {
          "$ref": "#/definitions/v1WebhookEvent"
        }
      }
    },
    "v1ListWebhookEventResponse": {
      "type": "object",
      "properties": {
        "webhookEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookEvent"
          }
        }
      }
    },
    "v1WebhookEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventName": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1CompositeBookingFlowCompanySetting": {
      "type": "object",
      "properties": {
        "companyInfo": {
          "$ref": "#/definitions/v1CompositeCompanyInfo"
        },
        "childLocationsInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompositeLocationInfo"
          }
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1CompositeBookingPortalSettings"
        }
      }
    },
    "v1CompositeBookingFlowLocationSetting": {
      "type": "object",
      "properties": {
        "locationInfo": {
          "$ref": "#/definitions/v1CompositeLocationInfo"
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1CompositeBookingPortalSettings"
        }
      }
    },
    "v1CompositeBookingPortalSettings": {
      "type": "object",
      "properties": {
        "customerInformation": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enableBookingPortal": {
          "type": "boolean"
        },
        "enableGuestLogin": {
          "type": "boolean"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeBranding": {
          "type": "boolean"
        },
        "defaultTab": {
          "type": "string"
        },
        "menuOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "availableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customCss": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "showHomeMenu": {
          "type": "boolean"
        },
        "showAppointmentTab": {
          "type": "boolean"
        }
      }
    },
    "v1CompositeCompanyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "preferences": {
          "$ref": "#/definitions/v1CompositePreferences"
        }
      }
    },
    "v1CompositeLocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "preferences": {
          "$ref": "#/definitions/v1CompositePreferences"
        }
      }
    },
    "v1CompositePreferences": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        }
      }
    },
    "v1ChangedAppointment": {
      "type": "object",
      "properties": {
        "oldAppointment": {
          "$ref": "#/definitions/v1ZapierAppointment"
        },
        "newAppointment": {
          "$ref": "#/definitions/v1ZapierAppointment"
        }
      }
    },
    "v1ChangedCustomer": {
      "type": "object",
      "properties": {
        "oldCustomer": {
          "$ref": "#/definitions/v1ZapierCustomer"
        },
        "newCustomer": {
          "$ref": "#/definitions/v1ZapierCustomer"
        }
      }
    },
    "v1GetHooksResponse": {
      "type": "object",
      "properties": {
        "hooks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierHook"
          }
        }
      }
    },
    "v1ListCompaniesResponse": {
      "type": "object",
      "properties": {
        "companies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierCompany"
          }
        }
      }
    },
    "v1ListEmployeesResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierEmployee"
          }
        }
      }
    },
    "v1ListLocationsResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierLocation"
          }
        }
      }
    },
    "v1ListResourceTypesResponse": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierResourceType"
          }
        }
      }
    },
    "v1ListResourcesResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierResource"
          }
        }
      }
    },
    "v1SampleAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierAppointment"
          }
        }
      }
    },
    "v1SampleChangedAppointmentResponse": {
      "type": "object",
      "properties": {
        "changedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChangedAppointment"
          }
        }
      }
    },
    "v1SampleChangedCustomerResponse": {
      "type": "object",
      "properties": {
        "changedCustomers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChangedCustomer"
          }
        }
      }
    },
    "v1SampleCustomerResponse": {
      "type": "object",
      "properties": {
        "customers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierCustomer"
          }
        }
      }
    },
    "v1SearchCustomerResponse": {
      "type": "object",
      "properties": {
        "customers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZapierCustomer"
          }
        }
      }
    },
    "v1TriggerType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "NEW_APPOINTMENT_TRIGGER",
        "UPDATE_APPOINTMENT_TRIGGER",
        "RESCHEDULE_APPOINTMENT_TRIGGER",
        "DELETE_APPOINTMENT_TRIGGER",
        "STATUS_CHANGED_APPOINTMENT_TRIGGER",
        "NEW_CUSTOMER_TRIGGER",
        "UPDATE_CUSTOMER_TRIGGER"
      ],
      "default": "UNDEFINED"
    },
    "v1ValidateApiKeyResponse": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        }
      }
    },
    "v1ZapierAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the appointment."
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Timeslot of the appointment in UTC. (required)"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          },
          "title": "Resources booked in this appointment. (optional)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          },
          "title": "Resource Types booked in this appointment. (optional)"
        },
        "service": {
          "$ref": "#/definitions/v1Service",
          "title": "Service of the appointment. (required)"
        },
        "channel": {
          "$ref": "#/definitions/v1Channel",
          "title": "Channel of the appointment. (optional)"
        },
        "employee": {
          "$ref": "#/definitions/v1Employee",
          "title": "Employee of the appointment. (required)"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "Customers booked in this appointment. (optional)"
        },
        "bookingId": {
          "type": "string",
          "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id."
        },
        "recurringId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "rescheduleAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "cancellationAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "meetingData": {
          "$ref": "#/definitions/v1MeetingData"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "orderId": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        }
      }
    },
    "v1ZapierBlockHourRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "title": "Id of the specific resource/employee\nMinimum length should be 1"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Time slots for which the resource will be blocked"
        },
        "reason": {
          "type": "string",
          "title": "Reason due to which the resource is blocked"
        },
        "locale": {
          "type": "string",
          "title": "Locale in which the time slot is blocked"
        },
        "title": {
          "type": "string",
          "description": "title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "source": {
          "type": "string"
        },
        "externalSourceId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "v1ZapierCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ZapierCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the customer"
        },
        "email": {
          "type": "string",
          "title": "Unique email of the customer"
        },
        "firstName": {
          "type": "string",
          "title": "First name of the customer"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the customer"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date of Birth of the customer"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile Image"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Telephone/Mobile Numbers of the customer // Validation can be added for numbers"
        },
        "phoneNumber": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "title": "Address of the customer"
        },
        "gender": {
          "$ref": "#/definitions/typesGender",
          "title": "Gender of Customer"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags saved against by a customer"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the customer"
        },
        "preferredLanguage": {
          "type": "string",
          "title": "Preferred Languages of a customer"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the customer"
        },
        "userId": {
          "type": "string",
          "title": "user representing the customer"
        },
        "invitedBy": {
          "type": "string",
          "title": "invited_by = created_by"
        },
        "isInvitedByAdmin": {
          "type": "boolean",
          "title": "is_invited_by_admin true if customer is invited by admin"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "customerLevel": {
          "type": "string",
          "description": "to signify if customer is a lead, active, paying, ..."
        },
        "companyId": {
          "type": "string"
        }
      }
    },
    "v1ZapierEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ZapierHook": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "hookUrl": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "triggerType": {
          "$ref": "#/definitions/v1TriggerType"
        }
      }
    },
    "v1ZapierLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ZapierResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ZapierResourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ConnectResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1GetIntegrationTypeResponse": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1IntegrationToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "targetId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "accessToken": {
          "type": "string"
        },
        "refreshToken": {
          "type": "string"
        },
        "accessTokenExpiry": {
          "type": "string",
          "format": "date-time"
        },
        "refreshTokenExpiry": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "active": {
          "type": "boolean"
        },
        "appTypeId": {
          "type": "string"
        },
        "deviceId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "revoked": {
          "type": "boolean"
        },
        "filterId": {
          "type": "string"
        }
      }
    },
    "v1ListIntegrationsResponse": {
      "type": "object",
      "properties": {
        "integrations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IntegrationToken"
          }
        }
      }
    },
    "v1SaveCredentialRequest": {
      "type": "object",
      "properties": {
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "targetId": {
          "type": "string"
        },
        "other": {
          "type": "string"
        }
      }
    },
    "LocationsUpdateLocationBody": {
      "type": "object",
      "properties": {
        "location": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name is the human readable name of the location.\nShould never be considered unique for any purposes\nand should only be used for reference."
            },
            "description": {
              "type": "string",
              "description": "Description is a short description for the location."
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "telephones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Telephones will be used for display purpose , a location can have a\nmultiple phone numbers."
            },
            "address": {
              "$ref": "#/definitions/typesAddress",
              "description": "Address is a physical address of a location , location can only have one\naddress."
            },
            "preference": {
              "$ref": "#/definitions/v1LocationPreference"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "active": {
              "type": "boolean"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "customLocationId": {
              "type": "string"
            },
            "customCompanyId": {
              "type": "string"
            },
            "inactiveDate": {
              "type": "string",
              "format": "date-time"
            },
            "clonedFromLocationId": {
              "type": "string",
              "title": "non-empty represents this location is cloned from another location"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given location object can be updated.\nList of fields which can be updated are  :\nName , Description , Gallery , Address , Telephones"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "UpdateLocationRequest contains the location object and the list of fields to be updates"
    },
    "locationv1Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is a unique identifier of the location"
        },
        "name": {
          "type": "string",
          "description": "Name is the human readable name of the location.\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "description": {
          "type": "string",
          "description": "Description is a short description for the location."
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Telephones will be used for display purpose , a location can have a\nmultiple phone numbers."
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "description": "Address is a physical address of a location , location can only have one\naddress."
        },
        "preference": {
          "$ref": "#/definitions/v1LocationPreference"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "active": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "customLocationId": {
          "type": "string"
        },
        "customCompanyId": {
          "type": "string"
        },
        "inactiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "clonedFromLocationId": {
          "type": "string",
          "title": "non-empty represents this location is cloned from another location"
        }
      }
    },
    "v1BatchGetLocationResponse": {
      "type": "object",
      "properties": {
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      },
      "description": "BatchGetLocationsResponse ..."
    },
    "v1BatchUpdateLocationRequest": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchUpdateLocationResponse": {
      "type": "object",
      "properties": {
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      }
    },
    "v1BookingPortalSettings": {
      "type": "object",
      "properties": {
        "removeBranding": {
          "type": "boolean"
        }
      }
    },
    "v1CompanyCustomizations": {
      "type": "object",
      "properties": {
        "replyToEmail": {
          "type": "string",
          "title": "remember adding to default object as well in location_settings.go, to avoid nil issue"
        },
        "applyLocationNameAsEmailSender": {
          "type": "boolean"
        },
        "applyCompanyNameAsEmailSender": {
          "type": "boolean"
        },
        "doNotSendPastBookingEmailToAdmin": {
          "type": "boolean"
        },
        "unBranding": {
          "$ref": "#/definitions/v1UnBrandingSetting"
        },
        "hideDescriptionInCalendar": {
          "type": "boolean"
        }
      }
    },
    "v1CompanyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "bookingLink": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        },
        "customizations": {
          "$ref": "#/definitions/v1CompanyCustomizations"
        },
        "installedApps": {
          "$ref": "#/definitions/v1InstalledApps"
        }
      }
    },
    "v1CreateLocationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given Location"
        },
        "location": {
          "$ref": "#/definitions/locationv1Location"
        }
      },
      "description": "CreateLocationRequest ..."
    },
    "v1GetLocationCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GroupInfo": {
      "type": "object",
      "properties": {
        "groupOwnerUserInfo": {
          "$ref": "#/definitions/v1GroupOwnerUserInfo"
        }
      }
    },
    "v1GroupOwnerUserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1InstalledApps": {
      "type": "object",
      "properties": {
        "appointyX": {
          "type": "boolean"
        },
        "sitback": {
          "type": "boolean"
        }
      }
    },
    "v1ListAllLocationsResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      }
    },
    "v1ListLocationResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocationNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "v1LocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "bookingLink": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        },
        "customizations": {
          "$ref": "#/definitions/v1CompanyCustomizations"
        }
      }
    },
    "v1LocationNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/locationv1Location",
          "title": "Node is the actual location object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1LocationPreference": {
      "type": "object",
      "properties": {
        "timezone": {
          "type": "string",
          "title": "Timezone format in INA => Ex: \"Etc/UTC\""
        },
        "language": {
          "type": "string",
          "title": "Local Format Ex: \"en-US\""
        },
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "uiInfo": {
          "type": "string",
          "title": "contains json object, used by frontend"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "v1LocationSetting": {
      "type": "object",
      "properties": {
        "locationInfo": {
          "$ref": "#/definitions/v1LocationInfo"
        },
        "companyInfo": {
          "$ref": "#/definitions/v1CompanyInfo"
        },
        "groupInfo": {
          "$ref": "#/definitions/v1GroupInfo"
        },
        "sendNotificationSettings": {
          "$ref": "#/definitions/v1SendNotificationSettings"
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1BookingPortalSettings"
        }
      }
    },
    "v1Preferences": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "dateFormat": {
          "type": "string"
        }
      }
    },
    "v1SendNotificationSettings": {
      "type": "object",
      "properties": {
        "okAdmin": {
          "type": "boolean"
        },
        "okClient": {
          "type": "boolean"
        },
        "skipIcs": {
          "type": "boolean"
        },
        "skipIcsAdmin": {
          "type": "boolean"
        },
        "skipIcsClient": {
          "type": "boolean"
        }
      }
    },
    "v1SendNotificationSettingsFilter": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        }
      }
    },
    "v1UnBrandingSetting": {
      "type": "object",
      "properties": {
        "calendarInviteSubject": {
          "type": "string"
        }
      }
    },
    "ServiceTemplatesUpdateServiceTemplateBody": {
      "type": "object",
      "properties": {
        "serviceTemplate": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "Title of the service template"
            },
            "description": {
              "type": "string",
              "title": "Description of service template"
            },
            "categoryId": {
              "type": "string",
              "description": "Category to which a service template belongs(optional)."
            },
            "active": {
              "type": "boolean",
              "title": "Is the service currently active and can it be booked or not"
            },
            "status": {
              "$ref": "#/definitions/v1ServiceTemplateStatus",
              "title": "Status represents the type of service: external/internal/link-only"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "policyId": {
              "type": "string"
            },
            "capacity": {
              "type": "string",
              "format": "int64"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "templateId": {
              "type": "string"
            },
            "internal": {
              "type": "boolean"
            },
            "resourceTypeIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "intakeFormId": {
              "type": "string"
            },
            "prices": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1DurationPrice"
              },
              "title": "Duration in minutes for which the service using this template will be performed, with corresponding price"
            },
            "preBufferTime": {
              "type": "integer",
              "format": "int32",
              "title": "Pre service buffer time in seconds"
            },
            "postBufferTime": {
              "type": "integer",
              "format": "int32",
              "title": "Post service buffer time in seconds"
            },
            "serviceTemplateType": {
              "$ref": "#/definitions/v1ServiceTemplateType",
              "title": "service type"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateServiceTemplatesResponse": {
      "type": "object",
      "properties": {
        "serviceTemplates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplate"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateFailed"
          }
        }
      }
    },
    "v1BatchGetServiceTemplateByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "serviceTemplateByIdLocale": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateByIdLocale"
          }
        }
      }
    },
    "v1BatchGetServiceTemplateByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceTemplateLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocale"
          }
        }
      }
    },
    "v1BatchGetServiceTemplateByParentLocaleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchGetServiceTemplateByParentLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceTemplateLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocale"
          }
        }
      }
    },
    "v1BatchGetServiceTemplateResponse": {
      "type": "object",
      "properties": {
        "serviceTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplate"
          }
        }
      }
    },
    "v1BatchServiceTemplateLocaleUpsertRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "override": {
          "type": "boolean"
        },
        "serviceTemplateLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocale"
          }
        }
      }
    },
    "v1BatchServiceTemplateLocaleUpsertResponse": {
      "type": "object",
      "properties": {
        "serviceTemplateLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocale"
          }
        }
      }
    },
    "v1CreateServiceTemplateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "serviceTemplate": {
          "$ref": "#/definitions/v1ServiceTemplate"
        }
      }
    },
    "v1DurationPrice": {
      "type": "object",
      "properties": {
        "duration": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1GetServiceTemplateByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetServiceTemplateByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceTemplateLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocale"
          }
        }
      }
    },
    "v1ListServiceTemplateResponse": {
      "type": "object",
      "properties": {
        "serviceTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplate"
          }
        }
      }
    },
    "v1ServiceTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "Title of the service template"
        },
        "description": {
          "type": "string",
          "title": "Description of service template"
        },
        "categoryId": {
          "type": "string",
          "description": "Category to which a service template belongs(optional)."
        },
        "active": {
          "type": "boolean",
          "title": "Is the service currently active and can it be booked or not"
        },
        "status": {
          "$ref": "#/definitions/v1ServiceTemplateStatus",
          "title": "Status represents the type of service: external/internal/link-only"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "policyId": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "templateId": {
          "type": "string"
        },
        "internal": {
          "type": "boolean"
        },
        "resourceTypeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intakeFormId": {
          "type": "string"
        },
        "prices": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DurationPrice"
          },
          "title": "Duration in minutes for which the service using this template will be performed, with corresponding price"
        },
        "preBufferTime": {
          "type": "integer",
          "format": "int32",
          "title": "Pre service buffer time in seconds"
        },
        "postBufferTime": {
          "type": "integer",
          "format": "int32",
          "title": "Post service buffer time in seconds"
        },
        "serviceTemplateType": {
          "$ref": "#/definitions/v1ServiceTemplateType",
          "title": "service type"
        }
      }
    },
    "v1ServiceTemplateByIdLocale": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "v1ServiceTemplateFailed": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1ServiceTemplate"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ServiceTemplateLocale": {
      "type": "object",
      "properties": {
        "serviceTemplateLocalesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTemplateLocaleData"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1ServiceTemplateLocaleData": {
      "type": "object",
      "properties": {
        "serviceTemplateLocaleValue": {
          "$ref": "#/definitions/v1ServiceTemplateLocaleValue"
        },
        "locale": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1ServiceTemplateLocaleValue": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1ServiceTemplateStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INTERNAL",
        "EXTERNAL",
        "LINK_ONLY"
      ],
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: Status for services formed using this template\nService status unspecified.\n - INTERNAL: Service can only be booked through the administrator portal,\ni.e., by service providers, managers, admins, etc.\n - EXTERNAL: Service can be booked from both the client booking portal and the administrator portal,\ni.e., by employees and customers.\n - LINK_ONLY: Service can only be booked by those having the unique link generated corresponding to the service."
    },
    "v1ServiceTemplateType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN_STORE",
        "VIRTUAL",
        "AT_HOME"
      ],
      "default": "UNKNOWN"
    },
    "typesEmailClient": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_EMAIL_CLIENT",
        "AWS_SES",
        "MAILGUN"
      ],
      "default": "UNSPECIFIED_EMAIL_CLIENT"
    },
    "typesEmailConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "emailClient": {
          "$ref": "#/definitions/typesEmailClient"
        },
        "region": {
          "type": "string"
        },
        "accessKeyId": {
          "type": "string"
        },
        "secretAccessKey": {
          "type": "string"
        },
        "senderEmail": {
          "type": "string"
        }
      }
    },
    "typesSmsConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "smsClient": {
          "$ref": "#/definitions/typesSmsClient"
        },
        "accountId": {
          "type": "string"
        },
        "authToken": {
          "type": "string"
        },
        "sender": {
          "type": "string"
        }
      }
    },
    "v1Configuration": {
      "type": "object",
      "properties": {
        "emailConfiguration": {
          "$ref": "#/definitions/typesEmailConfiguration"
        },
        "smsConfiguration": {
          "$ref": "#/definitions/typesSmsConfiguration"
        }
      }
    },
    "v1ListDefaultNotificationConfigurationsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationConfiguration"
          }
        }
      }
    },
    "v1NotificationConfiguration": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "businessId": {
          "type": "string"
        },
        "productDefault": {
          "type": "boolean"
        },
        "configuration": {
          "$ref": "#/definitions/v1Configuration"
        }
      }
    },
    "v1ChargeItem": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string"
        },
        "consumableItems": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "durationInMinutes": {
          "type": "integer",
          "format": "int32"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot"
        }
      }
    },
    "v1ChargeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "buyerId": {
          "type": "string"
        },
        "buyerEmail": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "method": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "orderId": {
          "type": "string",
          "title": "corresponding order"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChargeItem"
          },
          "title": "corresponding order-items"
        },
        "sourceId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timezone": {
          "type": "string"
        },
        "buyerName": {
          "type": "string"
        }
      }
    },
    "v1ChargeResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "authRequired": {
          "type": "boolean",
          "title": "requires SCA"
        },
        "token": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1GetPaymentSourceTypeResponse": {
      "type": "object",
      "properties": {
        "paymentSourceType": {
          "$ref": "#/definitions/v1PaymentSourceType"
        }
      }
    },
    "v1GetPurchasableItemValuesResponse": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1GetTypeResponse": {
      "type": "object",
      "properties": {
        "method": {
          "$ref": "#/definitions/typesPaymentMethod"
        }
      }
    },
    "v1PaymentMethodValidation": {
      "type": "object",
      "properties": {
        "method": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "valid": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1PaymentSourceType": {
      "type": "string",
      "enum": [
        "PaymentSourceType_UNSPECIFIED",
        "OFFLINE",
        "ONLINE"
      ],
      "default": "PaymentSourceType_UNSPECIFIED"
    },
    "v1RefundResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        }
      }
    },
    "v1ValidatePaymentResponse": {
      "type": "object",
      "properties": {
        "validations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentMethodValidation"
          }
        }
      }
    },
    "v1GeneratePaymentRequestRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "paymentRequest": {
          "$ref": "#/definitions/v1PaymentRequest"
        },
        "sendMail": {
          "type": "boolean"
        }
      }
    },
    "v1GeneratePaymentRequestResponse": {
      "type": "object",
      "properties": {
        "paymentRequest": {
          "$ref": "#/definitions/v1PaymentRequest"
        },
        "paymentLink": {
          "type": "string"
        }
      }
    },
    "v1ListPaymentRequestResponse": {
      "type": "object",
      "properties": {
        "paymentRequest": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentRequest"
          }
        }
      }
    },
    "v1PaymentRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "buyerId": {
          "type": "string"
        },
        "paymentRequestItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentRequestItem"
          }
        },
        "totalRequestedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "paymentRequestStatus": {
          "$ref": "#/definitions/v1PaymentRequestStatus"
        },
        "validTill": {
          "type": "string",
          "format": "date-time"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "paymentLink": {
          "type": "string"
        }
      }
    },
    "v1PaymentRequestItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "requestedAmount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1PaymentRequestStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REQUESTED",
        "COMPLETED"
      ],
      "default": "UNSPECIFIED"
    },
    "v1ResendPaymentRequestRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "PaymentsManagerPayOrderBody": {
      "type": "object",
      "properties": {
        "paymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentSource"
          }
        },
        "parent": {
          "type": "string",
          "title": "location id is parent"
        },
        "buyerId": {
          "type": "string",
          "title": "customer id"
        },
        "paymentNote": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "paymentRequestId": {
          "type": "string",
          "title": "optional (needed to mark request as completed)"
        }
      }
    },
    "PaymentsManagerRefundOrderBody": {
      "type": "object",
      "properties": {
        "refundSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RefundSource"
          }
        },
        "locationId": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ActivityLogData": {
      "type": "object",
      "properties": {
        "logData": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1PayData"
          }
        }
      }
    },
    "v1GeneratePayLinkResponse": {
      "type": "object",
      "properties": {
        "link": {
          "type": "string"
        }
      }
    },
    "v1ItemInformation": {
      "type": "object",
      "properties": {
        "itemId": {
          "type": "string"
        },
        "paymentProcessed": {
          "type": "boolean"
        }
      }
    },
    "v1ListPaymentTransactionResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentTransactionNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1PayData": {
      "type": "object",
      "properties": {
        "payData": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/typesPrice"
          }
        }
      }
    },
    "v1PayOrderResponse": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "requiresSCA": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "payOrderTransactionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "itemInformation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ItemInformation"
          }
        }
      }
    },
    "v1PayRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "location id is parent"
        },
        "buyerId": {
          "type": "string",
          "title": "customer id"
        },
        "paymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentSource"
          }
        },
        "paymentNote": {
          "type": "string"
        },
        "paymentRequestId": {
          "type": "string",
          "title": "optional (needed to mark request as completed)"
        }
      }
    },
    "v1PayResponse": {
      "type": "object",
      "properties": {
        "requiresSCA": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "payTransactionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PaymentBuyerDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "does not consider this from input"
        },
        "email": {
          "type": "string",
          "title": "Unique email of the customer"
        },
        "firstName": {
          "type": "string",
          "title": "First name of the customer"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the customer"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Telephone/Mobile Numbers of the customer // Validation can be added for numbers"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "v1PaymentSource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "payAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "source": {
          "$ref": "#/definitions/v1Source"
        },
        "itemId": {
          "type": "string"
        },
        "orderId": {
          "type": "string",
          "title": "optional only needed in case of payment of multiple orders together"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1PaymentTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is location"
        },
        "paymentTransactionItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentTransactionItem"
          }
        },
        "paymentTransactionType": {
          "$ref": "#/definitions/v1PaymentTransactionType"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "paymentMethod": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "store extra details corresponding to payment-method"
        },
        "paymentSourceTransactionId": {
          "type": "string"
        },
        "paymentSourceId": {
          "type": "string"
        },
        "paymentOn": {
          "type": "string",
          "format": "date-time"
        },
        "paymentBy": {
          "type": "string"
        },
        "note": {
          "type": "string",
          "title": "in case of refund contains reason"
        },
        "refundedTransactionId": {
          "type": "string"
        },
        "paymentBuyerDetails": {
          "$ref": "#/definitions/v1PaymentBuyerDetails"
        },
        "totalRefundedAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "only for paid transactions"
        },
        "totalQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "totalRefundedQuantity": {
          "type": "integer",
          "format": "int64"
        },
        "paymentSourceCode": {
          "type": "string"
        }
      }
    },
    "v1PaymentTransactionItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "refundedAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "only for paid transactions"
        },
        "itemItemId": {
          "type": "string",
          "title": "ItemItemId will store the actual item id of order-item"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "refundedQuantity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1PaymentTransactionNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1PaymentTransaction"
        },
        "position": {
          "type": "string"
        }
      }
    },
    "v1PaymentTransactionType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "PAID",
        "FAILED",
        "REFUND"
      ],
      "default": "UNKNOWN"
    },
    "v1RefundItemTransaction": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "orderId": {
          "type": "string",
          "title": "optional"
        },
        "itemId": {
          "type": "string",
          "title": "optional"
        },
        "refund": {
          "$ref": "#/definitions/typesPrice"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1RefundOrderResponse": {
      "type": "object",
      "properties": {
        "orderId": {
          "type": "string"
        },
        "refundTransactionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activityLogData": {
          "$ref": "#/definitions/v1ActivityLogData"
        }
      }
    },
    "v1RefundPaymentTransactionRequest": {
      "type": "object",
      "properties": {
        "refundTransactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RefundItemTransaction"
          }
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1RefundPaymentTransactionResponse": {
      "type": "object",
      "properties": {
        "refundTransactionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activityLogData": {
          "$ref": "#/definitions/v1ActivityLogData"
        }
      }
    },
    "v1RefundSource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "itemId": {
          "type": "string"
        },
        "refund": {
          "$ref": "#/definitions/typesPrice"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Source": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "v1ListManualRefundResponse": {
      "type": "object",
      "properties": {
        "manualRefund": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ManualRefund"
          }
        }
      }
    },
    "v1ManualRefund": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is location"
        },
        "customerId": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "refundValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RefundValue"
          }
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "refundedOn": {
          "type": "string",
          "format": "date-time"
        },
        "refundStatus": {
          "$ref": "#/definitions/v1RefundStatus"
        }
      }
    },
    "v1RecordManualRefundRequest": {
      "type": "object",
      "properties": {
        "manualRefundId": {
          "type": "string"
        },
        "refundNote": {
          "type": "string"
        }
      }
    },
    "v1RefundStatus": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_REFUND_STATUS",
        "REFUND_REQUESTED",
        "REFUND_APPROVED"
      ],
      "default": "UNSPECIFIED_REFUND_STATUS"
    },
    "v1RefundValue": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "refundAmount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1Action": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1Card": {
      "type": "object",
      "properties": {
        "cardId": {
          "type": "string"
        },
        "cardType": {
          "type": "string"
        },
        "lastFour": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "expireOn": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "sourceType": {
          "$ref": "#/definitions/v1SourceType"
        }
      }
    },
    "v1CardsList": {
      "type": "object",
      "properties": {
        "userCards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GatewayCard"
          }
        }
      }
    },
    "v1CreateCardPrerequisiteResponse": {
      "type": "object",
      "properties": {
        "intentSecret": {
          "type": "string"
        }
      }
    },
    "v1DefaultCard": {
      "type": "object",
      "properties": {
        "card": {
          "$ref": "#/definitions/v1Card"
        },
        "levelId": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/v1DefaultCardAgainstType"
        }
      }
    },
    "v1DefaultCardAgainstType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ORDER",
        "APPOINTMENT",
        "CLASS",
        "MEMBERSHIP_PURCHASE",
        "BUSINESS",
        "LOCATION"
      ],
      "default": "UNSPECIFIED"
    },
    "v1Gateway": {
      "type": "string",
      "enum": [
        "NO_GATEWAY",
        "STRIPE_GATEWAY",
        "SQUARE_GATEWAY"
      ],
      "default": "NO_GATEWAY"
    },
    "v1GatewayCard": {
      "type": "object",
      "properties": {
        "gateway": {
          "$ref": "#/definitions/v1Gateway"
        },
        "customerId": {
          "type": "string"
        },
        "defaultCards": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DefaultCard"
          }
        }
      }
    },
    "v1SourceType": {
      "type": "string",
      "enum": [
        "STRIPE",
        "GPAY",
        "SQUARE"
      ],
      "default": "STRIPE"
    },
    "MembershipCategoryServiceUpdateMembershipCategoryBody": {
      "type": "object",
      "properties": {
        "membershipCategory": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "membershipCategoryType": {
              "$ref": "#/definitions/v1MembershipCategoryType"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetMembershipCategoryResponse": {
      "type": "object",
      "properties": {
        "membershipCategory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipCategory"
          }
        }
      }
    },
    "v1CreateMembershipCategoryRequest": {
      "type": "object",
      "properties": {
        "membershipCategory": {
          "$ref": "#/definitions/v1MembershipCategory"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1ListMembershipCategoryResponse": {
      "type": "object",
      "properties": {
        "membershipCategory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipCategory"
          }
        }
      }
    },
    "v1MembershipCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "membershipCategoryType": {
          "$ref": "#/definitions/v1MembershipCategoryType"
        }
      }
    },
    "v1MembershipCategoryType": {
      "type": "string",
      "enum": [
        "MembershipCategoryType_UNSPECIFIED",
        "MEMBERSHIP",
        "PACKAGE"
      ],
      "default": "MembershipCategoryType_UNSPECIFIED"
    },
    "FeatureNotificationsUpdateFeatureNotificationBody": {
      "type": "object",
      "properties": {
        "featureNotification": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string"
            },
            "moduleName": {
              "type": "string"
            },
            "appTypeId": {
              "type": "string"
            },
            "professionId": {
              "type": "string"
            },
            "professionName": {
              "type": "string"
            },
            "featureName": {
              "type": "string"
            },
            "read": {
              "type": "boolean"
            },
            "addedOn": {
              "type": "string",
              "format": "date-time"
            },
            "readOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetFeatureNotificationResponse": {
      "type": "object",
      "properties": {
        "featureNotification": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FeatureNotification"
          }
        }
      }
    },
    "v1FeatureNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "professionId": {
          "type": "string"
        },
        "professionName": {
          "type": "string"
        },
        "featureName": {
          "type": "string"
        },
        "read": {
          "type": "boolean"
        },
        "addedOn": {
          "type": "string",
          "format": "date-time"
        },
        "readOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1FeatureNotificationNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1FeatureNotification"
        }
      }
    },
    "v1ListFeatureNotificationResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FeatureNotificationNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "intercomv1Location": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "city": {
          "type": "string"
        }
      }
    },
    "v1Admin": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "awayModeEnabled": {
          "type": "boolean"
        },
        "awayModeReassign": {
          "type": "boolean"
        },
        "hasInboxSeat": {
          "type": "boolean"
        },
        "teamIds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "v1Canvas": {
      "type": "object",
      "properties": {
        "content": {
          "$ref": "#/definitions/v1Content"
        },
        "contentUrl": {
          "type": "string"
        },
        "storedData": {
          "$ref": "#/definitions/v1StoredData"
        }
      }
    },
    "v1Component": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        },
        "align": {
          "type": "string"
        },
        "style": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "height": {
          "type": "string",
          "format": "int64"
        },
        "width": {
          "type": "string",
          "format": "int64"
        },
        "rounded": {
          "type": "boolean"
        },
        "size": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "saveState": {
          "type": "string"
        },
        "disabled": {
          "type": "boolean"
        },
        "action": {
          "$ref": "#/definitions/v1Action"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Item"
          }
        }
      }
    },
    "v1ConfigureResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas"
        },
        "results": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1Configure_Step": {
      "type": "string",
      "enum": [
        "STEP_0",
        "STEP_1",
        "STEP_2",
        "INITIALIZED"
      ],
      "default": "STEP_0"
    },
    "v1Contact": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "workspaceId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/intercomv1Location"
        }
      }
    },
    "v1Content": {
      "type": "object",
      "properties": {
        "components": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Component"
          }
        }
      }
    },
    "v1EventComplete": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        }
      }
    },
    "v1FlowType": {
      "type": "string",
      "enum": [
        "UNDEFINED_FLOW",
        "INPUT_LINK",
        "SELF_LINK",
        "LOCATION_LINK",
        "SERVICE_LINK",
        "RECENT_LINK"
      ],
      "default": "UNDEFINED_FLOW"
    },
    "v1GetSecretResponse": {
      "type": "object",
      "properties": {
        "secret": {
          "type": "string"
        }
      }
    },
    "v1HandleInstallCallbackResponse": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string"
        }
      }
    },
    "v1InitializeResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas"
        }
      }
    },
    "v1InstallResponse": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string"
        }
      }
    },
    "v1IntercomContext": {
      "type": "object",
      "properties": {
        "conversationId": {
          "type": "string",
          "format": "int64"
        },
        "locale": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "messengerActionColor": {
          "type": "string"
        },
        "messengerBackgroundColor": {
          "type": "string"
        }
      }
    },
    "v1IntercomUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "locationData": {
          "$ref": "#/definitions/v1LocationData"
        }
      }
    },
    "v1ItemData": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "listTitle": {
          "type": "string"
        },
        "listSubTitle": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "headingText": {
          "type": "string"
        },
        "buttonText": {
          "type": "string"
        }
      }
    },
    "v1LocationData": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string"
        },
        "cityName": {
          "type": "string"
        },
        "continentCode": {
          "type": "string"
        },
        "countryCode": {
          "type": "string"
        },
        "countryName": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "regionName": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "v1ProceedResponse": {
      "type": "object",
      "properties": {
        "redirectUrl": {
          "type": "string"
        }
      }
    },
    "v1SheetValues": {
      "type": "object",
      "properties": {
        "order": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1StoredData": {
      "type": "object",
      "properties": {
        "step": {
          "$ref": "#/definitions/v1Configure_Step"
        },
        "flowType": {
          "$ref": "#/definitions/v1FlowType"
        },
        "itemData": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ItemData"
          }
        },
        "serviceId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "listTitle": {
          "type": "string"
        },
        "listSubTitle": {
          "type": "string"
        },
        "link": {
          "type": "string"
        },
        "headingText": {
          "type": "string"
        },
        "buttonText": {
          "type": "string"
        }
      }
    },
    "v1SubmitSheetResponse": {
      "type": "object",
      "properties": {
        "canvas": {
          "$ref": "#/definitions/v1Canvas"
        },
        "event": {
          "$ref": "#/definitions/v1EventComplete"
        }
      }
    },
    "ConsumerRestrictionsUpsertConsumerRestrictionBody": {
      "type": "object",
      "properties": {
        "consumerRestriction": {
          "type": "object",
          "properties": {
            "bookingType": {
              "$ref": "#/definitions/v1ConsumerBookingType",
              "title": "ConsumerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ConsumerLimitRestrictions"
              },
              "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "consumerOverridden": {
              "type": "boolean",
              "title": "consumer overridden read-only value"
            },
            "consumerRestrictionLevel": {
              "$ref": "#/definitions/v1ConsumerRestrictionLevel"
            }
          }
        },
        "updateMask": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ConsumerRestrictionsUpsertConsumerRestrictionsGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "consumerRestriction": {
          "type": "object",
          "properties": {
            "bookingType": {
              "$ref": "#/definitions/v1ConsumerBookingType",
              "title": "ConsumerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ConsumerLimitRestrictions"
              },
              "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "consumerOverridden": {
              "type": "boolean",
              "title": "consumer overridden read-only value"
            },
            "consumerRestrictionLevel": {
              "$ref": "#/definitions/v1ConsumerRestrictionLevel"
            }
          }
        }
      }
    },
    "v1BatchConsumerRestriction": {
      "type": "object",
      "properties": {
        "restriction": {
          "$ref": "#/definitions/v1ConsumerRestriction"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1BatchGetConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1BatchUpsertConsumerRestrictionRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchConsumerRestriction"
          }
        },
        "updateMask": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchUpsertConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1ConsumerBookingType": {
      "type": "string",
      "enum": [
        "Limited",
        "Unlimited",
        "Blocked"
      ],
      "default": "Limited"
    },
    "v1ConsumerLimitRestrictions": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesLimitRestrictionType",
          "title": "Type of limit to restrict the booking of a consumer"
        },
        "allowedBookingsInDuration": {
          "type": "integer",
          "format": "int32",
          "title": "No. of bookings that are allowed in a specific duration"
        },
        "frequency": {
          "$ref": "#/definitions/typesFrequency",
          "title": "Restriction will be applied for the following frequency"
        },
        "interval": {
          "$ref": "#/definitions/typesDateslot",
          "description": "optional (not present in UI)",
          "title": "Restriction will be applied b/w these days"
        },
        "frequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "Frequency Info"
        }
      },
      "title": "Services that are restricted for a consumer\nThis restriction can be override at per consumer level"
    },
    "v1ConsumerRestriction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bookingType": {
          "$ref": "#/definitions/v1ConsumerBookingType",
          "title": "ConsumerBookingType"
        },
        "limitRestrictions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerLimitRestrictions"
          },
          "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
        },
        "consumerOverridden": {
          "type": "boolean",
          "title": "consumer overridden read-only value"
        },
        "consumerRestrictionLevel": {
          "$ref": "#/definitions/v1ConsumerRestrictionLevel"
        }
      }
    },
    "v1ConsumerRestrictionLevel": {
      "type": "string",
      "enum": [
        "Consumer",
        "Service",
        "Location"
      ],
      "default": "Consumer"
    },
    "v1ListConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "consumerRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1BatchGetStudentEnrolmentResponse": {
      "type": "object",
      "properties": {
        "studentLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentEnrolmentsLink"
          }
        }
      }
    },
    "v1CreateStudentEnrolmentRequest": {
      "type": "object",
      "properties": {
        "studentEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment",
          "title": "parent will be StudentId"
        }
      }
    },
    "v1CreateStudentEnrolmentResponse": {
      "type": "object",
      "properties": {
        "studentEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment"
        }
      }
    },
    "v1DeleteStudentEnrolmentResponse": {
      "type": "object",
      "properties": {
        "deletedEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment"
        }
      }
    },
    "v1DeliveryMethod": {
      "type": "object",
      "properties": {
        "deliveryMethod": {
          "$ref": "#/definitions/v1DeliveryMethodType"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        }
      }
    },
    "v1DeliveryMethodType": {
      "type": "string",
      "enum": [
        "InCenter",
        "Home",
        "Hybrid"
      ],
      "default": "InCenter"
    },
    "v1EnrolmentBaseType": {
      "type": "string",
      "enum": [
        "Sessions_Package",
        "Private_Sessions_Package",
        "Monthly_Sessions",
        "Flexible"
      ],
      "default": "Sessions_Package"
    },
    "v1GetLinkedMathnasiumLocationsResponse": {
      "type": "object",
      "properties": {
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "students": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentAllowedLocation"
          }
        }
      }
    },
    "v1GetStudentEnrolmentResponse": {
      "type": "object",
      "properties": {
        "studentEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment"
        }
      }
    },
    "v1GetStudentsRemainingSessionsResponse": {
      "type": "object",
      "properties": {
        "enrolmentRemainingSessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemainingSessionsInEnrolment"
          }
        },
        "restrictionsRemainingSessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemainingSessionsInConsumerRestrictions"
          }
        }
      }
    },
    "v1ListStudentEnrolmentsResponse": {
      "type": "object",
      "properties": {
        "studentEnrolments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentEnrolment"
          }
        }
      }
    },
    "v1RemainingSessionsInConsumerRestrictions": {
      "type": "object",
      "properties": {
        "frequency": {
          "$ref": "#/definitions/typesFrequency",
          "title": "only daily or weekly is allowed"
        },
        "remainingSessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemainingSessionsInDuration"
          }
        }
      }
    },
    "v1RemainingSessionsInDuration": {
      "type": "object",
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "remainingSessions": {
          "type": "string",
          "format": "int64"
        },
        "isUnlimited": {
          "type": "boolean"
        }
      }
    },
    "v1RemainingSessionsInEnrolment": {
      "type": "object",
      "properties": {
        "enrolmentId": {
          "type": "string"
        },
        "enrolmentType": {
          "$ref": "#/definitions/v1EnrolmentBaseType"
        },
        "remainingSessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RemainingSessionsInDuration"
          }
        }
      }
    },
    "v1StudentAllowedLocation": {
      "type": "object",
      "properties": {
        "studentId": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1StudentEnrolment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        },
        "customStudentId": {
          "type": "string",
          "title": "IDs from Radius system"
        },
        "customEnrolmentId": {
          "type": "string"
        },
        "membershipTypeId": {
          "type": "string",
          "title": "Membership associated with this enrolment"
        },
        "gradeRangeId": {
          "type": "string",
          "title": "Grade range in which this enrolment is applicable"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "title": "Enrolment duration"
        },
        "terminationDate": {
          "type": "string",
          "format": "date-time"
        },
        "sessionLengths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Sessions Durations associated with this enrolment (in seconds)"
        },
        "maxSessions": {
          "type": "string",
          "format": "int64",
          "title": "Max sessions allowed for this enrolment"
        },
        "remainingSessions": {
          "type": "string",
          "format": "int64",
          "title": "Remaining sessions of the current enrolment cycle"
        },
        "deliveryMethods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DeliveryMethod"
          },
          "title": "Delivery method for this enrolment"
        },
        "holds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentEnrolmentHold"
          },
          "title": "Holds in the enrolment cycle"
        },
        "enrolmentBaseType": {
          "$ref": "#/definitions/v1EnrolmentBaseType",
          "title": "BaseType of the enrolments"
        }
      }
    },
    "v1StudentEnrolmentHold": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "customHoldId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time",
          "title": "Hold duration"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleteScheduledSessions": {
          "type": "boolean",
          "title": "Whether to delete the scheduled sessions or not"
        }
      }
    },
    "v1StudentEnrolmentsLink": {
      "type": "object",
      "properties": {
        "studentId": {
          "type": "string"
        },
        "enrolments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentEnrolment"
          }
        }
      }
    },
    "v1UpdateStudentEnrolmentRequest": {
      "type": "object",
      "properties": {
        "studentEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateStudentEnrolmentResponse": {
      "type": "object",
      "properties": {
        "studentEnrolment": {
          "$ref": "#/definitions/v1StudentEnrolment"
        }
      }
    },
    "v1MathnasiumFilter": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "duration": {
          "type": "string",
          "format": "int64",
          "title": "duration in seconds if provided then the slot will only returned if their duration matches"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity is the min allowed capacity for the slot"
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "LastRequestTime is used to provide an added buffer to some time based settings, check. When\nthe difference between allowed time and current time is less than 2 minutes."
        },
        "consumerId": {
          "type": "string",
          "title": "ConsumerId is used for getting the consumer restrictions and filtering the restrictions at availability level"
        },
        "existingAppointmentId": {
          "type": "string",
          "title": "ExistingAppointmentId"
        },
        "enrolmentId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumListDatesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumFilter"
          },
          "title": "Filter for ListDateRequest"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the ListDateRequest (Min Length : 1)"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        }
      }
    },
    "v1MathnasiumListDatesResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "Available contains dates as key and true/false as values, true if available"
        },
        "errorMessage": {
          "type": "string"
        },
        "datesStatus": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DatesStatus contains dates as key and type of slot(available/booked) as values"
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesNode": {
      "type": "object",
      "properties": {
        "availableIds": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "errorMessage": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesOfStudentNode": {
      "type": "object",
      "properties": {
        "availableIds": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "errorMessage": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesOfStudentRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumFilter"
          },
          "title": "Filter for ListDateRequest"
        },
        "listEmployees": {
          "type": "boolean",
          "title": "default behaviour of the endpoint is to return available services\nand if employees are required set list_employees field true"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesOfStudentResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesOfStudentNode"
          }
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumFilter"
          },
          "title": "Filter for ListDateRequest"
        },
        "listEmployees": {
          "type": "boolean",
          "title": "default behaviour of the endpoint is to return available services\nand if employees are required set list_employees field true"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        }
      }
    },
    "v1MathnasiumListServicesOrEmployeesResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumListServicesOrEmployeesNode"
          }
        }
      }
    },
    "v1MathnasiumListSlotsNode": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumSlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "errorMessage": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumListSlotsRequest": {
      "type": "object",
      "properties": {
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumFilter"
          },
          "title": "Filters for ListSlotsRequest"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumListSlotsResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumListSlotsNode"
          }
        }
      }
    },
    "v1MathnasiumOverBookingReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bookingDate": {
          "type": "string",
          "format": "date-time"
        },
        "appointmentDate": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "studentData": {
          "$ref": "#/definitions/v1OverBookingStudentData"
        },
        "sessionName": {
          "type": "string"
        },
        "sessionDuration": {
          "type": "string"
        },
        "bookedByAdmin": {
          "type": "boolean"
        },
        "enrolmentId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumOverBookingReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumOverBookingReportData"
          }
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1MathnasiumSlot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "studentId": {
          "type": "string"
        },
        "enrolmentId": {
          "type": "string"
        },
        "warningMessage": {
          "type": "string",
          "title": "WarningMessage if any"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1MathnasiumSlotType": {
      "type": "string",
      "enum": [
        "Available",
        "AvailableAppointment",
        "BookedAppointment",
        "BlockedHours",
        "NonOpenHours",
        "LeasedAppointment"
      ],
      "default": "Available",
      "title": "- NonOpenHours: not handled"
    },
    "v1MathnasiumSlotWrapper": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1MathnasiumSlotType"
        },
        "slot": {
          "$ref": "#/definitions/v1MathnasiumSlot"
        }
      }
    },
    "v1OverBookingStudentData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "guardianId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "guardianEmail": {
          "type": "string"
        },
        "guardianFirstName": {
          "type": "string"
        },
        "guardianLastName": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        }
      }
    },
    "StudentsUpdateStudentBody": {
      "type": "object",
      "properties": {
        "student": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string"
            },
            "lastName": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "telephones": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "phoneNumber": {
              "type": "string"
            },
            "dateOfBirth": {
              "type": "string",
              "format": "date-time"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "grade": {
              "type": "string"
            },
            "profileImage": {
              "$ref": "#/definitions/typesGalleryItem",
              "title": "Url of the profile Image"
            },
            "userId": {
              "type": "string"
            },
            "primaryGuardianId": {
              "type": "string",
              "title": "Guardians are the links of student => Customer ids (Guardian is an alias to Customer)"
            },
            "secondaryGuardianId": {
              "type": "string",
              "title": "optional"
            },
            "createdBy": {
              "type": "string",
              "title": "meta infos"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "activeMembership": {
              "type": "boolean"
            },
            "customStudentId": {
              "type": "string"
            },
            "virtualCenterId": {
              "type": "string"
            },
            "accountId": {
              "type": "string",
              "description": "this is sso_id of guardian",
              "title": "Radius custom account details"
            },
            "physicalCenterId": {
              "type": "string"
            },
            "mergingStatus": {
              "$ref": "#/definitions/v1MergingStatus"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetStudentLocationLinksResponse": {
      "type": "object",
      "properties": {
        "studentLocationLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetStudentLocationLinksResponse"
          }
        }
      }
    },
    "v1BatchGetStudentRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetStudentResponse": {
      "type": "object",
      "properties": {
        "student": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Student"
          }
        }
      }
    },
    "v1CreateStudentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "student": {
          "$ref": "#/definitions/v1Student"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "accountId": {
          "type": "string"
        },
        "doNotCreateDefaultBookingRestrictions": {
          "type": "boolean",
          "title": "true - if we're not explicitly creating restrictions"
        }
      }
    },
    "v1CustomerListSortBy": {
      "type": "string",
      "enum": [
        "CreatedOn",
        "LastName",
        "FirstName",
        "Email"
      ],
      "default": "CreatedOn"
    },
    "v1DeleteAllStudentsOfGuardiansResponse": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetStudentLocationLinksResponse": {
      "type": "object",
      "properties": {
        "studentId": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1IndividualSearchFilter": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "registeredAfter": {
          "type": "string",
          "format": "date-time",
          "title": "RegisteredAfter will check CreatedOn > input"
        },
        "registeredBefore": {
          "type": "string",
          "format": "date-time",
          "title": "RegisteredBefore will check CreatedOn < input"
        }
      }
    },
    "v1ListParentsUsingStudentsResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SerializedParentNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListStudentResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListStudentsByGuardiansResponse": {
      "type": "object",
      "properties": {
        "students": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Student"
          }
        }
      }
    },
    "v1MergingStatus": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "APPOINTY_ACCOUNT",
        "RADIUS_ACCOUNT",
        "MERGED_ACCOUNT"
      ],
      "default": "UNDEFINED"
    },
    "v1SerializedParentNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/typesProtobuf",
          "title": "Customer node will be added in connection"
        }
      }
    },
    "v1Student": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "grade": {
          "type": "string"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile Image"
        },
        "userId": {
          "type": "string"
        },
        "primaryGuardianId": {
          "type": "string",
          "title": "Guardians are the links of student => Customer ids (Guardian is an alias to Customer)"
        },
        "secondaryGuardianId": {
          "type": "string",
          "title": "optional"
        },
        "createdBy": {
          "type": "string",
          "title": "meta infos"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "activeMembership": {
          "type": "boolean"
        },
        "customStudentId": {
          "type": "string"
        },
        "virtualCenterId": {
          "type": "string"
        },
        "accountId": {
          "type": "string",
          "description": "this is sso_id of guardian",
          "title": "Radius custom account details"
        },
        "physicalCenterId": {
          "type": "string"
        },
        "mergingStatus": {
          "$ref": "#/definitions/v1MergingStatus"
        }
      }
    },
    "v1StudentLocationLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "studentId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "v1StudentLocationLinksResponse": {
      "type": "object",
      "properties": {
        "newLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StudentLocationLink"
          }
        },
        "names": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1StudentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Student"
        }
      }
    },
    "v1Business": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is required for chaku as prefix is not provided"
        },
        "name": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        }
      }
    },
    "v1BusinessType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "GOOGLE_BUSINESS",
        "YELP_BUSINESS",
        "ALL"
      ],
      "default": "UNDEFINED"
    },
    "v1CreateFirstLocationResponse": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "isCompanySlugSet": {
          "type": "boolean"
        },
        "isLocationSlugSet": {
          "type": "boolean"
        }
      }
    },
    "v1GetWizardPositionResponse": {
      "type": "object",
      "properties": {
        "wizardPosition": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1SearchBusinessResponse": {
      "type": "object",
      "properties": {
        "businesses": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Business"
          }
        }
      }
    },
    "v1UpdateWizardPositionResponse": {
      "type": "object",
      "properties": {
        "wizardPosition": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "typesDateTimeFields": {
      "type": "object",
      "properties": {
        "dates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "times": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "datetimes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListTemplateResponse": {
      "type": "object",
      "properties": {
        "template": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Template"
          }
        }
      }
    },
    "v1LocalisedTemplateContent": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string",
          "title": "It will be locale of lanaguge i.e en-us"
        },
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "v1MessageType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "TRANSACTIONAL",
        "PROMOTIONAL"
      ],
      "default": "UNKNOWN"
    },
    "v1RenderTemplateRequest": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "serialize using go-msgpack"
        },
        "businessId": {
          "type": "string"
        },
        "useDemoObject": {
          "type": "boolean"
        }
      }
    },
    "v1RenderTemplateResponse": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        }
      }
    },
    "v1ResetTemplateRequest": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        }
      }
    },
    "v1SendTestNotificationRequest": {
      "type": "object",
      "properties": {
        "templateId": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "recipients": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SendTestNotificationResponse": {
      "type": "object",
      "properties": {
        "subject": {
          "type": "string"
        },
        "body": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "requesterUserId": {
          "type": "string"
        }
      }
    },
    "v1Template": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "templateId": {
          "type": "string",
          "title": "template id remains same for all similar templates overridden by businesses\nEx: All User Sign-up Email templates have same template-id"
        },
        "businessId": {
          "type": "string",
          "title": "For default templates provided => global\nFor overridden templates over default => company-id"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "title": "event type of template"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalisedTemplateContent"
          }
        },
        "smartyTags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "appTypeId": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "mjml": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalisedTemplateContent"
          }
        },
        "productDefault": {
          "type": "boolean"
        },
        "canOverride": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "actions": {
          "type": "string"
        },
        "channel": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/v1TemplateLevel"
        },
        "classification": {
          "$ref": "#/definitions/v1TemplateClassification"
        },
        "messageType": {
          "$ref": "#/definitions/v1MessageType"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "demoObject": {
          "type": "string"
        },
        "smartyComponents": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "extraFields": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "hasReminder": {
          "type": "boolean"
        },
        "dateTimeFields": {
          "$ref": "#/definitions/typesDateTimeFields"
        }
      }
    },
    "v1TemplateClassification": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ADMIN_FACING",
        "CLIENT_FACING"
      ],
      "default": "UNSPECIFIED"
    },
    "v1TemplateLevel": {
      "type": "string",
      "enum": [
        "UNKNOWN_LEVEL",
        "GROUP",
        "COMPANY",
        "LOCATION"
      ],
      "default": "UNKNOWN_LEVEL"
    },
    "v1UpsertTemplateRequest": {
      "type": "object",
      "properties": {
        "template": {
          "$ref": "#/definitions/v1Template"
        },
        "updateMask": {
          "type": "string"
        },
        "skipValidation": {
          "type": "boolean"
        }
      }
    },
    "v1ValidateTemplateResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetTemplateEventResponse": {
      "type": "object",
      "properties": {
        "templateEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TemplateEvent"
          }
        }
      }
    },
    "v1ListTemplateEventResponse": {
      "type": "object",
      "properties": {
        "templateEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TemplateEvent"
          }
        }
      }
    },
    "v1TemplateEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "title": "fields"
        },
        "eventName": {
          "type": "string"
        },
        "eventDescription": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ServiceTokensUpdateServiceTokenBody": {
      "type": "object",
      "properties": {
        "serviceToken": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "tokenUserId": {
              "type": "string"
            },
            "tokenValue": {
              "type": "string"
            },
            "isActive": {
              "type": "boolean"
            },
            "expiry": {
              "type": "string",
              "format": "date-time"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "lastUsedOn": {
              "type": "string",
              "format": "date-time"
            },
            "tokenUserEmail": {
              "type": "string"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CreateServiceTokenRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "serviceToken": {
          "$ref": "#/definitions/v1ServiceToken"
        }
      }
    },
    "v1DeleteServiceTokenResponse": {
      "type": "object",
      "properties": {
        "deletedToken": {
          "$ref": "#/definitions/v1ServiceToken"
        }
      }
    },
    "v1GetGroupInfoOfServiceTokenResponse": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "groupName": {
          "type": "string"
        },
        "groupDescription": {
          "type": "string"
        }
      }
    },
    "v1ListServiceTokenResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceTokenNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ServiceToken": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "fields"
        },
        "name": {
          "type": "string"
        },
        "tokenUserId": {
          "type": "string"
        },
        "tokenValue": {
          "type": "string"
        },
        "isActive": {
          "type": "boolean"
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastUsedOn": {
          "type": "string",
          "format": "date-time"
        },
        "tokenUserEmail": {
          "type": "string"
        }
      }
    },
    "v1ServiceTokenNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1ServiceToken"
        }
      }
    },
    "v1ChangeStudentAppointmentStatusRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        },
        "newStatus": {
          "$ref": "#/definitions/v1MathnasiumAppointmentStatus"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ChangeStudentAppointmentStatusResponse": {
      "type": "object",
      "properties": {
        "error": {
          "type": "string"
        }
      }
    },
    "v1CreateCustomerAccountRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/v1WrpCustomerAccount"
        }
      }
    },
    "v1CreateCustomerAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1WrpCustomerAccount"
        }
      }
    },
    "v1CreatePhysicalCenterRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "center": {
          "$ref": "#/definitions/v1WrpPhysicalCenter"
        }
      }
    },
    "v1CreatePhysicalCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpPhysicalCenter"
        }
      }
    },
    "v1CreateStudentWithEnrolmentRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "student": {
          "$ref": "#/definitions/v1WrpStudent"
        }
      }
    },
    "v1CreateStudentWithEnrolmentResponse": {
      "type": "object",
      "properties": {
        "student": {
          "$ref": "#/definitions/v1WrpStudent"
        }
      }
    },
    "v1CreateVirtualCenterRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "center": {
          "$ref": "#/definitions/v1WrpVirtualCenter"
        }
      }
    },
    "v1CreateVirtualCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpVirtualCenter"
        }
      }
    },
    "v1GetCustomerAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1WrpCustomerAccount"
        }
      }
    },
    "v1GetPhysicalCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpPhysicalCenter"
        }
      }
    },
    "v1GetStudentWithEnrolmentResponse": {
      "type": "object",
      "properties": {
        "student": {
          "$ref": "#/definitions/v1WrpStudent"
        }
      }
    },
    "v1GetVirtualCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpVirtualCenter"
        }
      }
    },
    "v1MathnasiumAppointmentStatus": {
      "type": "string",
      "enum": [
        "Scheduled",
        "Attended",
        "NoShow",
        "NoShowEM",
        "Canceled",
        "LateCanceled",
        "LateCanceledEM"
      ],
      "default": "Scheduled"
    },
    "v1UpdateCustomerAccountRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "account": {
          "$ref": "#/definitions/v1WrpCustomerAccount"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateCustomerAccountResponse": {
      "type": "object",
      "properties": {
        "account": {
          "$ref": "#/definitions/v1WrpCustomerAccount"
        }
      }
    },
    "v1UpdatePhysicalCenterRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "center": {
          "$ref": "#/definitions/v1WrpPhysicalCenter"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdatePhysicalCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpPhysicalCenter"
        }
      }
    },
    "v1UpdateStudentWithEnrolmentRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "student": {
          "$ref": "#/definitions/v1WrpStudent"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateStudentWithEnrolmentResponse": {
      "type": "object",
      "properties": {
        "student": {
          "$ref": "#/definitions/v1WrpStudent"
        }
      }
    },
    "v1UpdateVirtualCenterRequest": {
      "type": "object",
      "properties": {
        "groupId": {
          "type": "string"
        },
        "center": {
          "$ref": "#/definitions/v1WrpVirtualCenter"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateVirtualCenterResponse": {
      "type": "object",
      "properties": {
        "center": {
          "$ref": "#/definitions/v1WrpVirtualCenter"
        }
      }
    },
    "v1WrpCenterType": {
      "type": "string",
      "enum": [
        "Normal",
        "PodTeaching",
        "TeamTeaching"
      ],
      "default": "Normal"
    },
    "v1WrpCustomerAccount": {
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "physicalCenterId": {
          "type": "string"
        },
        "guardians": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpGuardian"
          }
        },
        "physicalCenterAppointyId": {
          "type": "string"
        }
      }
    },
    "v1WrpDeliveryMethod": {
      "type": "object",
      "properties": {
        "deliveryMethodId": {
          "type": "string"
        },
        "deliveryMethod": {
          "$ref": "#/definitions/v1WrpDeliveryMethodType"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1WrpDeliveryMethodType": {
      "type": "string",
      "enum": [
        "InCenter",
        "Home",
        "Hybrid"
      ],
      "default": "InCenter"
    },
    "v1WrpEnrolment": {
      "type": "object",
      "properties": {
        "enrolmentId": {
          "type": "string"
        },
        "membershipId": {
          "type": "string"
        },
        "gradeRangeId": {
          "type": "string"
        },
        "startDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "terminationDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "sessionLengthsInSeconds": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        },
        "maxSessions": {
          "type": "string",
          "format": "int64"
        },
        "remainingSessions": {
          "type": "string",
          "format": "int64"
        },
        "deliveryMethods": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpDeliveryMethod"
          }
        },
        "holds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpEnrolmentHolds"
          }
        },
        "baseType": {
          "$ref": "#/definitions/v1WrpEnrolmentBaseType"
        },
        "appointyId": {
          "type": "string"
        }
      }
    },
    "v1WrpEnrolmentBaseType": {
      "type": "string",
      "enum": [
        "Sessions_Package",
        "Private_Sessions_Package",
        "Monthly_Sessions",
        "Flexible"
      ],
      "default": "Sessions_Package"
    },
    "v1WrpEnrolmentHolds": {
      "type": "object",
      "properties": {
        "holdId": {
          "type": "string"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "deleteScheduledSessions": {
          "type": "boolean"
        }
      }
    },
    "v1WrpGradeRange": {
      "type": "object",
      "properties": {
        "gradeRangeId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1WrpGuardian": {
      "type": "object",
      "properties": {
        "guardianId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "appointyId": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "timezone": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "v1WrpMembershipType": {
      "type": "object",
      "properties": {
        "membershipTypeId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1WrpPhysicalCenter": {
      "type": "object",
      "properties": {
        "centerType": {
          "$ref": "#/definitions/v1WrpCenterType"
        },
        "centerId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contactNumber": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "inactiveDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "membershipTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpMembershipType"
          }
        },
        "gradeRanges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpGradeRange"
          }
        },
        "appointyId": {
          "type": "string"
        }
      }
    },
    "v1WrpStudent": {
      "type": "object",
      "properties": {
        "studentId": {
          "type": "string"
        },
        "accountId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "virtualCenterId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "enrolments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpEnrolment"
          }
        },
        "appointyId": {
          "type": "string"
        },
        "virtualCenterAppointyId": {
          "type": "string"
        }
      }
    },
    "v1WrpVirtualCenter": {
      "type": "object",
      "properties": {
        "centerType": {
          "$ref": "#/definitions/v1WrpCenterType"
        },
        "centerId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "contactNumber": {
          "type": "string"
        },
        "inactiveDateTime": {
          "type": "string",
          "format": "date-time"
        },
        "membershipTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpMembershipType"
          }
        },
        "gradeRanges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WrpGradeRange"
          }
        },
        "appointyId": {
          "type": "string"
        }
      }
    },
    "v1ListRawWebNotificationResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebNotificationNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListWebNotificationResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebNotificationNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1MarkNotificationRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "status": {
          "type": "boolean"
        }
      }
    },
    "v1NotificationStatusType": {
      "type": "string",
      "enum": [
        "ALL",
        "READ",
        "UNREAD",
        "UNVIEWED"
      ],
      "default": "ALL"
    },
    "v1ViewNotificationRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "viewedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1WebNotification": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "templateId": {
          "type": "string",
          "title": "template copy data"
        },
        "businessId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocalisedTemplateContent"
          }
        },
        "smartyTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "appTypeId": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "active": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "actions": {
          "type": "string"
        },
        "templateData": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "web notification details"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "userId": {
          "type": "string",
          "title": "receiver of web-notification"
        },
        "read": {
          "type": "boolean"
        },
        "readOn": {
          "type": "string",
          "format": "date-time"
        },
        "view": {
          "type": "boolean"
        },
        "viewedOn": {
          "type": "string",
          "format": "date-time"
        },
        "eventId": {
          "type": "string"
        },
        "dateTimeFields": {
          "$ref": "#/definitions/typesDateTimeFields"
        }
      }
    },
    "v1WebNotificationNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1WebNotification"
        }
      }
    },
    "DesignationsUpdateDesignationBody": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name of the designation which will be displayed to user"
            },
            "description": {
              "type": "string",
              "title": "Description is a short note of this designation"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional metadata of the designation"
            },
            "roleIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Attached roles"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given designation object can be\nupdated.\nList of fields which can be updated are:\nName, Description"
        }
      }
    },
    "v1BatchCreateDesignationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)"
        },
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          }
        }
      }
    },
    "v1BatchCreateDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          }
        }
      }
    },
    "v1BatchGetDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          },
          "title": "Designation have name and description"
        }
      }
    },
    "v1CreateDesignationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)"
        },
        "designation": {
          "$ref": "#/definitions/v1Designation"
        }
      }
    },
    "v1Designation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id a unique identifier for designation"
        },
        "name": {
          "type": "string",
          "title": "Name of the designation which will be displayed to user"
        },
        "description": {
          "type": "string",
          "title": "Description is a short note of this designation"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the designation"
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Attached roles"
        }
      }
    },
    "v1ListDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          },
          "title": "Designation have name and description"
        }
      }
    },
    "v1Activity": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "activityType": {
          "$ref": "#/definitions/v1ActivityType"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "consumerTypeStats": {
          "$ref": "#/definitions/v1ConsumerTypeStats"
        }
      }
    },
    "v1ActivityType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_ACTIVITY_TYPE",
        "ADDED_ON",
        "LAST_BOOKED_ON",
        "LAST_APPOINTMENT_BOOKED_ON",
        "LAST_CLASS_BOOKED_ON",
        "LAST_REVIEWED_ON",
        "LAST_PURCHASED_ON",
        "LAST_ACTIVITY_ON"
      ],
      "default": "UNSPECIFIED_ACTIVITY_TYPE"
    },
    "v1Amount": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "amountType": {
          "$ref": "#/definitions/v1AmountType"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "negative": {
          "type": "boolean",
          "title": "used to subtract value"
        },
        "consumerTypeStats": {
          "$ref": "#/definitions/v1ConsumerTypeStats"
        }
      }
    },
    "v1AmountType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_AMOUNT_TYPE",
        "TOTAL_APPOINTMENT_AMOUNT",
        "TOTAL_CLASS_AMOUNT",
        "TOTAL_GIFT_CERTIFICATE_AMOUNT",
        "TOTAL_PACKAGE_AMOUNT",
        "TOTAL_MEMBERSHIP_AMOUNT",
        "LTV",
        "ARPV"
      ],
      "default": "UNSPECIFIED_AMOUNT_TYPE"
    },
    "v1ConsumerTypeStats": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "CUSTOMER"
      ],
      "default": "UNKNOWN_TYPE",
      "description": "todo Consumer stats where added in future."
    },
    "v1GetActivitiesResponse": {
      "type": "object",
      "properties": {
        "activities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Activity"
          }
        }
      }
    },
    "v1GetAmountsResponse": {
      "type": "object",
      "properties": {
        "amounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Amount"
          }
        }
      }
    },
    "v1GetNumbersResponse": {
      "type": "object",
      "properties": {
        "numbers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Number"
          }
        }
      }
    },
    "v1Number": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "number": {
          "type": "number",
          "format": "float"
        },
        "numberType": {
          "$ref": "#/definitions/v1NumberType"
        },
        "format": {
          "$ref": "#/definitions/v1NumberFormat"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "consumerTypeStats": {
          "$ref": "#/definitions/v1ConsumerTypeStats"
        }
      }
    },
    "v1NumberFormat": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_NUMBER_FORMAT",
        "INT",
        "DECIMAL"
      ],
      "default": "UNSPECIFIED_NUMBER_FORMAT"
    },
    "v1NumberType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_NUMBER_TYPE",
        "TOTAL_APPOINTMENTS",
        "TOTAL_CLASSES",
        "TOTAL_GIFT_CERTIFICATES",
        "TOTAL_PACKAGES",
        "TOTAL_MEMBERSHIPS",
        "TOTAL_VISITS"
      ],
      "default": "UNSPECIFIED_NUMBER_TYPE"
    },
    "v1File": {
      "type": "object",
      "properties": {
        "fileName": {
          "type": "string"
        },
        "fileData": {
          "type": "string",
          "format": "byte"
        }
      }
    },
    "v1SendEmailRequest": {
      "type": "object",
      "properties": {
        "replyTo": {
          "type": "string",
          "title": "ReplyTo can have multiple emails, but they need to be comma separated"
        },
        "sender": {
          "type": "string",
          "title": "this contains the email address of sender"
        },
        "senderName": {
          "type": "string",
          "title": "this contains name (for ex: location name) to be used as sender"
        },
        "receipient": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "this is an array of strings containing the receipients email addresses"
        },
        "cc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "email addresses for carbon copy"
        },
        "bcc": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "email addresses for blind carbon copy"
        },
        "htmlBody": {
          "type": "string",
          "title": "email body in html"
        },
        "textBody": {
          "type": "string",
          "title": "email body in text form , if html rendering is not supported in receiver's client"
        },
        "subject": {
          "type": "string",
          "title": "subject of the email"
        },
        "fileName": {
          "type": "string",
          "title": "file details if attachment if present in the email"
        },
        "charset": {
          "type": "string",
          "title": "character encoding for email"
        },
        "fileData": {
          "type": "string",
          "format": "byte",
          "title": "file data if attachment is available"
        },
        "customConfiguration": {
          "$ref": "#/definitions/typesEmailConfiguration",
          "title": "custom email client configuration corresponding to business"
        },
        "file": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1File"
          },
          "title": "for sending multiple files"
        }
      }
    },
    "v1ValidateEmailConfigurationResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "UserProfilesUpdateUserPhoneStatusBody": {
      "type": "object",
      "properties": {
        "phoneDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PhoneDetails"
          }
        },
        "phone": {
          "type": "string"
        },
        "isPhoneVerified": {
          "type": "boolean"
        },
        "existingUser": {
          "$ref": "#/definitions/v1UserProfile"
        }
      }
    },
    "UserProfilesUpdateUserProfileBody": {
      "type": "object",
      "properties": {
        "userProfile": {
          "type": "object",
          "properties": {
            "email": {
              "type": "string",
              "title": "Email is the unique email of the user"
            },
            "firstName": {
              "type": "string",
              "description": "FirstName is the user first name,it does not have any min length as it can\nbe empty too."
            },
            "lastName": {
              "type": "string",
              "description": "LastName is the user last Name , it does not have any min length as it can\nbe empty too."
            },
            "birthDate": {
              "type": "string",
              "format": "date-time",
              "title": "BirthDate is the user`s date of birth"
            },
            "profileImage": {
              "$ref": "#/definitions/typesGalleryItem",
              "title": "ProfileImage user profile image"
            },
            "address": {
              "$ref": "#/definitions/typesAddress",
              "title": "Address user postal address"
            },
            "gender": {
              "$ref": "#/definitions/typesGender"
            },
            "preferences": {
              "$ref": "#/definitions/v1UserPreference"
            },
            "emailVerifiedOn": {
              "type": "string",
              "format": "date-time"
            },
            "verifiedEmail": {
              "type": "string"
            },
            "invitedBy": {
              "type": "string",
              "title": "invited_by = created_by"
            },
            "isInvitedByAdmin": {
              "type": "boolean",
              "title": "is_invited_by_admin true if user is invited by admin"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "tokenValidTill": {
              "type": "string",
              "format": "date-time"
            },
            "source": {
              "type": "string",
              "title": "user-analytics"
            },
            "medium": {
              "type": "string"
            },
            "campaign": {
              "type": "string"
            },
            "forceForPass": {
              "type": "boolean"
            },
            "phoneDetails": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1PhoneDetails"
              }
            },
            "phoneNumber": {
              "type": "string"
            },
            "isPhoneVerified": {
              "type": "boolean"
            },
            "phoneVerifiedOn": {
              "type": "string",
              "format": "date-time"
            },
            "ssoId": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "title": "UserProfile contains the user personal information"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the user Profile object can be updated.\nList of fields which can be updated are  :\nFirstName , LastName , ProfileImage , Address , Telephones ,BirthDate"
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "updateEmployeeProfileImage": {
          "type": "boolean"
        },
        "updateStaffProfileImage": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetUserDetailsByIdsResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetUserDetailsByIdResponse"
          }
        }
      }
    },
    "v1BatchGetUserProfileByEmailResponse": {
      "type": "object",
      "properties": {
        "userProfile": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        }
      }
    },
    "v1BatchGetUserProfileResponse": {
      "type": "object",
      "properties": {
        "userProfile": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfile"
          }
        }
      }
    },
    "v1CreateUserWithLoginResponse": {
      "type": "object",
      "properties": {
        "profile": {
          "$ref": "#/definitions/v1UserProfile"
        },
        "newUser": {
          "type": "boolean"
        }
      }
    },
    "v1GenerateOTACForDashBoardResponse": {
      "type": "object",
      "properties": {
        "loginLink": {
          "type": "string"
        }
      }
    },
    "v1GetInvitedUsersResponse": {
      "type": "object",
      "properties": {
        "invitedUsers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedUser"
          }
        }
      }
    },
    "v1GetUserDataResponse": {
      "type": "object",
      "properties": {
        "groups": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserGroup"
          }
        }
      }
    },
    "v1GetUserDetailsByIdResponse": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "v1InvitedUser": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1ListUserForDashboardResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserProfileNode"
          },
          "title": "List of user profile"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1Otac": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "code id"
        },
        "email": {
          "type": "string",
          "title": "Email is the unique email of the user"
        }
      }
    },
    "v1Otp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "code id"
        },
        "userId": {
          "type": "string",
          "title": "Id is the unique id of the user"
        },
        "phone": {
          "type": "string",
          "title": "phone number on which otp needs to be sent"
        },
        "otpCode": {
          "type": "string",
          "title": "one time password"
        },
        "generatedOn": {
          "type": "string",
          "format": "date-time",
          "title": "otp code generated on"
        }
      }
    },
    "v1PhoneDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "phoneVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "phoneVerifiedBy": {
          "type": "string"
        },
        "isPhoneVerified": {
          "type": "boolean"
        }
      }
    },
    "v1SendPhoneOTPRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "phone": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "v1SendVerificationMailRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "side": {
          "$ref": "#/definitions/v1VerificationSide"
        },
        "companyId": {
          "type": "string",
          "title": "only added for admin rights"
        }
      }
    },
    "v1UserCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UserGroup": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "companies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserCompany"
          }
        }
      }
    },
    "v1UserPreference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Just needed for chaku, no use otherwise"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone format in INA => Ex: \"Etc/UTC\""
        },
        "language": {
          "type": "string",
          "title": "Local Format Ex: \"en-US\""
        },
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "uiInfo": {
          "type": "string",
          "title": "contains json object, used by frontend"
        },
        "startOfWeek": {
          "type": "integer",
          "format": "int32",
          "title": "0: SUNDAY, 1: MONDAY ... 6: SATURDAY, 7: SUNDAY"
        }
      }
    },
    "v1UserProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the user id which uniquely identify a user provided by user registration service"
        },
        "email": {
          "type": "string",
          "title": "Email is the unique email of the user"
        },
        "firstName": {
          "type": "string",
          "description": "FirstName is the user first name,it does not have any min length as it can\nbe empty too."
        },
        "lastName": {
          "type": "string",
          "description": "LastName is the user last Name , it does not have any min length as it can\nbe empty too."
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "title": "BirthDate is the user`s date of birth"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "ProfileImage user profile image"
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "title": "Address user postal address"
        },
        "gender": {
          "$ref": "#/definitions/typesGender"
        },
        "preferences": {
          "$ref": "#/definitions/v1UserPreference"
        },
        "emailVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "verifiedEmail": {
          "type": "string"
        },
        "invitedBy": {
          "type": "string",
          "title": "invited_by = created_by"
        },
        "isInvitedByAdmin": {
          "type": "boolean",
          "title": "is_invited_by_admin true if user is invited by admin"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "tokenValidTill": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string",
          "title": "user-analytics"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "forceForPass": {
          "type": "boolean"
        },
        "phoneDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PhoneDetails"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "isPhoneVerified": {
          "type": "boolean"
        },
        "phoneVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "ssoId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "UserProfile contains the user personal information"
    },
    "v1UserProfileNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1UserProfile",
          "title": "Node is the actual user profile object"
        }
      },
      "title": "UserProfileNode is an object with user profile its position in the list"
    },
    "v1UserProfilesUpdateEmailBody": {
      "type": "object",
      "properties": {
        "oldEmail": {
          "type": "string"
        },
        "newEmail": {
          "type": "string"
        }
      }
    },
    "v1ValidateOtacResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        },
        "otac": {
          "$ref": "#/definitions/v1Otac"
        }
      }
    },
    "v1ValidateOtpResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1VerificationSide": {
      "type": "string",
      "enum": [
        "VerificationSide_UNSPECIFIED",
        "Admin",
        "Client"
      ],
      "default": "VerificationSide_UNSPECIFIED"
    },
    "v1VerifyPhoneOTPRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "otpCode": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        }
      }
    },
    "AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "appointmentBookingFlowSetting": {
          "type": "object",
          "properties": {
            "allowBookingFromBookingPortal": {
              "type": "boolean"
            },
            "allowMultipleItemsBooking": {
              "type": "boolean"
            },
            "allowRecurringBookingAdmin": {
              "type": "boolean"
            },
            "allowRecurringBookingCustomer": {
              "type": "boolean"
            },
            "allowQuantityBooking": {
              "type": "boolean"
            },
            "maxQuantityPerBookingPerCustomer": {
              "type": "string",
              "format": "int64"
            },
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "enableTierBasedStaffPrioritization": {
              "type": "boolean"
            },
            "tierEmployeeAllocation": {
              "$ref": "#/definitions/v1EmployeeTierAllocation"
            },
            "staffPrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
            },
            "resourcePrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Criteria of selecting a resource in booking"
            },
            "strikeOutBlockTime": {
              "type": "boolean"
            },
            "strikeOutBookedTime": {
              "type": "boolean"
            },
            "strikeOutPercentage": {
              "type": "number",
              "format": "double"
            },
            "showCart": {
              "type": "boolean"
            },
            "showPolicyInline": {
              "type": "boolean"
            },
            "calendarStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "fixedOrCompactSlotsGeneration": {
              "type": "boolean",
              "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
            },
            "allCustomersInformationNeeded": {
              "type": "boolean"
            },
            "whoseInfoNeeded": {
              "$ref": "#/definitions/v1WhoseInformationNeeded"
            },
            "sendNotificationToSecondaryCustomers": {
              "type": "boolean"
            },
            "allCustomersIntakeFormNeeded": {
              "type": "boolean"
            },
            "teachingFlow": {
              "$ref": "#/definitions/v1TeachingFlow"
            },
            "doNotSendBookingNotificationToAdmin": {
              "type": "boolean"
            },
            "intakeFormMandatoryInAdminSide": {
              "type": "boolean"
            },
            "doNotAllowOverlappingBookingForCustomer": {
              "type": "boolean"
            },
            "doNotAllowAdminToBookIfResourceNotAvailable": {
              "type": "boolean"
            },
            "doNotAllowBookingIfOpenHourNotAvailable": {
              "type": "boolean",
              "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
            },
            "blockHourApprovalRequired": {
              "type": "boolean",
              "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
            },
            "preferSameStaffOnReschedule": {
              "type": "boolean",
              "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
            }
          }
        }
      }
    },
    "AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowSettingBody": {
      "type": "object",
      "properties": {
        "appointmentBookingFlowSetting": {
          "type": "object",
          "properties": {
            "allowBookingFromBookingPortal": {
              "type": "boolean"
            },
            "allowMultipleItemsBooking": {
              "type": "boolean"
            },
            "allowRecurringBookingAdmin": {
              "type": "boolean"
            },
            "allowRecurringBookingCustomer": {
              "type": "boolean"
            },
            "allowQuantityBooking": {
              "type": "boolean"
            },
            "maxQuantityPerBookingPerCustomer": {
              "type": "string",
              "format": "int64"
            },
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "enableTierBasedStaffPrioritization": {
              "type": "boolean"
            },
            "tierEmployeeAllocation": {
              "$ref": "#/definitions/v1EmployeeTierAllocation"
            },
            "staffPrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
            },
            "resourcePrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Criteria of selecting a resource in booking"
            },
            "strikeOutBlockTime": {
              "type": "boolean"
            },
            "strikeOutBookedTime": {
              "type": "boolean"
            },
            "strikeOutPercentage": {
              "type": "number",
              "format": "double"
            },
            "showCart": {
              "type": "boolean"
            },
            "showPolicyInline": {
              "type": "boolean"
            },
            "calendarStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "fixedOrCompactSlotsGeneration": {
              "type": "boolean",
              "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
            },
            "allCustomersInformationNeeded": {
              "type": "boolean"
            },
            "whoseInfoNeeded": {
              "$ref": "#/definitions/v1WhoseInformationNeeded"
            },
            "sendNotificationToSecondaryCustomers": {
              "type": "boolean"
            },
            "allCustomersIntakeFormNeeded": {
              "type": "boolean"
            },
            "teachingFlow": {
              "$ref": "#/definitions/v1TeachingFlow"
            },
            "doNotSendBookingNotificationToAdmin": {
              "type": "boolean"
            },
            "intakeFormMandatoryInAdminSide": {
              "type": "boolean"
            },
            "doNotAllowOverlappingBookingForCustomer": {
              "type": "boolean"
            },
            "doNotAllowAdminToBookIfResourceNotAvailable": {
              "type": "boolean"
            },
            "doNotAllowBookingIfOpenHourNotAvailable": {
              "type": "boolean",
              "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
            },
            "blockHourApprovalRequired": {
              "type": "boolean",
              "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
            },
            "preferSameStaffOnReschedule": {
              "type": "boolean",
              "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given appointment booking flow setting\nobject that can be updated.\nList of fields which can be updated are  :\nbooking rules, payment settings, tax setting, notification setting,\navailability interval"
        }
      },
      "title": "UpsertAppointmentBookingFlowSettingRequest contains the appointment booking flow setting object\nand the update mask\nThe update mask will be used to update a specific field in appointment booking flow setting object"
    },
    "v1AppointmentBookingFlowSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "allowBookingFromBookingPortal": {
          "type": "boolean"
        },
        "allowMultipleItemsBooking": {
          "type": "boolean"
        },
        "allowRecurringBookingAdmin": {
          "type": "boolean"
        },
        "allowRecurringBookingCustomer": {
          "type": "boolean"
        },
        "allowQuantityBooking": {
          "type": "boolean"
        },
        "maxQuantityPerBookingPerCustomer": {
          "type": "string",
          "format": "int64"
        },
        "uiSettings": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableTierBasedStaffPrioritization": {
          "type": "boolean"
        },
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1EmployeeTierAllocation"
        },
        "staffPrioritization": {
          "$ref": "#/definitions/v1Prioritization",
          "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
        },
        "resourcePrioritization": {
          "$ref": "#/definitions/v1Prioritization",
          "title": "Criteria of selecting a resource in booking"
        },
        "strikeOutBlockTime": {
          "type": "boolean"
        },
        "strikeOutBookedTime": {
          "type": "boolean"
        },
        "strikeOutPercentage": {
          "type": "number",
          "format": "double"
        },
        "showCart": {
          "type": "boolean"
        },
        "showPolicyInline": {
          "type": "boolean"
        },
        "calendarStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "fixedOrCompactSlotsGeneration": {
          "type": "boolean",
          "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
        },
        "allCustomersInformationNeeded": {
          "type": "boolean"
        },
        "whoseInfoNeeded": {
          "$ref": "#/definitions/v1WhoseInformationNeeded"
        },
        "sendNotificationToSecondaryCustomers": {
          "type": "boolean"
        },
        "allCustomersIntakeFormNeeded": {
          "type": "boolean"
        },
        "teachingFlow": {
          "$ref": "#/definitions/v1TeachingFlow"
        },
        "doNotSendBookingNotificationToAdmin": {
          "type": "boolean"
        },
        "intakeFormMandatoryInAdminSide": {
          "type": "boolean"
        },
        "doNotAllowOverlappingBookingForCustomer": {
          "type": "boolean"
        },
        "doNotAllowAdminToBookIfResourceNotAvailable": {
          "type": "boolean"
        },
        "doNotAllowBookingIfOpenHourNotAvailable": {
          "type": "boolean",
          "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
        },
        "blockHourApprovalRequired": {
          "type": "boolean",
          "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
        },
        "preferSameStaffOnReschedule": {
          "type": "boolean",
          "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
        }
      }
    },
    "v1BatchGetAppointmentBookingFlowSettingResponse": {
      "type": "object",
      "properties": {
        "appointmentBookingFlowSetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
          }
        }
      }
    },
    "v1EmployeeTierAllocation": {
      "type": "string",
      "enum": [
        "LOCATION_BASED_ALLOCATION",
        "SERVICE_BASED_ALLOCATION"
      ],
      "default": "LOCATION_BASED_ALLOCATION"
    },
    "v1Prioritization": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "MAX_OCCUPIED_TIME",
        "MAX_OCCUPIED_APPOINTMENT",
        "LEAST_OCCUPIED_TIME",
        "LEAST_OCCUPIED_APPOINTMENT",
        "DISPLAY_ORDER"
      ],
      "default": "UNSPECIFIED",
      "description": "Parameters over which a resource is selected for a particular booking, whether\nit is random or is selected to the resource that is maximum occupied or least\noccupied or has maximum or least occupied time."
    },
    "v1TeachingFlow": {
      "type": "string",
      "enum": [
        "Normal",
        "PodTeaching",
        "TeamTeaching"
      ],
      "default": "Normal"
    },
    "v1WhoseInformationNeeded": {
      "type": "string",
      "enum": [
        "AllCustomers",
        "OnlyPrimaryCustomer"
      ],
      "default": "AllCustomers"
    },
    "DepartmentsUpdateDepartmentBody": {
      "type": "object",
      "properties": {
        "department": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name is the human readable name of the department.\nShould never be considered unique for any purposes"
            },
            "description": {
              "type": "string",
              "title": "Description of the department"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Metadata of a department. Can be added as required by the client."
            }
          },
          "title": "Department that needs to be updated. (required)"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given department object can be\nupdated.\nList of fields which can be updated are  :\nName , Description"
        }
      },
      "title": "UpdateDepartmentRequest contains the department object and update_mask .\nThe update mask will be used to update a specific field in department object"
    },
    "v1BatchCreateDepartmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given department like\ngroup."
        },
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          },
          "title": "Departments that needs to be created. (required)"
        }
      },
      "title": "CreateDepartmentRequest is the request to create a new department ,"
    },
    "v1BatchCreateDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          }
        }
      }
    },
    "v1BatchGetDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          },
          "description": "Departments that are returned."
        }
      },
      "description": "BatchGetDepartmentResponse contains the list of departments given in the request object."
    },
    "v1CreateDepartmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given department like\ngroup."
        },
        "department": {
          "$ref": "#/definitions/v1Department",
          "title": "Department that needs to be created. (required)"
        }
      },
      "title": "CreateDepartmentRequest is the request to create a new department ,"
    },
    "v1Department": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the department"
        },
        "name": {
          "type": "string",
          "title": "Name is the human readable name of the department.\nShould never be considered unique for any purposes"
        },
        "description": {
          "type": "string",
          "title": "Description of the department"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata of a department. Can be added as required by the client."
        }
      }
    },
    "v1ListDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          }
        }
      },
      "title": "ListDepartmentResponse returns the list of departments"
    },
    "v1GetConflictingLeasesResponse": {
      "type": "object",
      "properties": {
        "leases": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Lease"
          }
        }
      }
    },
    "v1Lease": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier for a ticket with the specified prefix"
        },
        "details": {
          "$ref": "#/definitions/v1Details",
          "title": "object which requires to obtain lease"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          },
          "title": "resources that used by the object"
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "description": "what is the timeout of this, 5 to 15m. letting the modules to decide the timeout",
          "title": "lease expiry time period\nwill be set in code"
        }
      }
    },
    "v1LeaseList": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Lease"
          }
        }
      }
    },
    "v1ConfigAnswersResponse": {
      "type": "object",
      "properties": {
        "ticketSpecialHandling": {
          "type": "string"
        }
      }
    },
    "v1CreateServiceNowIncidentResponse": {
      "type": "object",
      "properties": {
        "incident": {
          "$ref": "#/definitions/v1Incident"
        }
      }
    },
    "v1Incident": {
      "type": "object",
      "properties": {
        "number": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "uState": {
          "type": "string"
        },
        "urgency": {
          "type": "string"
        },
        "impact": {
          "type": "string"
        },
        "cmdbCi": {
          "type": "string"
        },
        "holdReason": {
          "type": "string"
        },
        "callerId": {
          "type": "string"
        },
        "assignmentGroup": {
          "type": "string"
        },
        "contactType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "uServiceLocation": {
          "type": "string"
        },
        "correlationId": {
          "type": "string"
        },
        "workNotes": {
          "type": "string"
        },
        "assignedTo": {
          "type": "string"
        },
        "uKcsSolution": {
          "type": "string"
        }
      }
    },
    "v1IsJnJResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1ListServiceNowIncidentsResponse": {
      "type": "object",
      "properties": {
        "incidents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Incident"
          }
        }
      }
    },
    "v1BatchValidateEmailRequest": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchValidateEmailResponse": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "v1ListSuppressedEmailResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SuppressedEmailNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1SuppressedEmail": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "reason": {
          "$ref": "#/definitions/v1SuppressedReason"
        },
        "webhook": {
          "$ref": "#/definitions/v1Webhook"
        },
        "metadata": {
          "type": "string"
        }
      }
    },
    "v1SuppressedEmailNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1SuppressedEmail"
        }
      }
    },
    "v1SuppressedReason": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "BOUNCE",
        "COMPLAINT"
      ],
      "default": "UNSPECIFIED"
    },
    "v1ValidateEmailResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1Webhook": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "AWS",
        "MAILGUN"
      ],
      "default": "UNKNOWN"
    },
    "v1CreateDynamicLinkRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be location Id"
        },
        "dynamicLink": {
          "$ref": "#/definitions/v1DynamicLink"
        }
      }
    },
    "v1DynamicLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id"
        },
        "userId": {
          "type": "string",
          "title": "user id of user who creates user"
        },
        "guid": {
          "type": "string",
          "title": "guid is the dynamic id (link)"
        },
        "settings": {
          "$ref": "#/definitions/protobufAny",
          "title": "Settings is the setting of the app from which Dynamic link is called\ngenerally when we created dynamic link of staff then the staff id is compulsory\nor they can add additional filters like service id , timeslot , customer email"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time",
          "title": "Expiry date of the url\nfor single use as well as multiuse for both we have  expire date"
        },
        "appId": {
          "type": "string",
          "title": "corresponding to which app link is created"
        },
        "bookingId": {
          "type": "string",
          "title": "After booking booking id will be stored"
        },
        "isSingleUse": {
          "type": "boolean",
          "title": "There are two types of links\non is single use and other is multiple use"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "meta data will store title , note etc"
        },
        "bookingUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "title": "booking id after booking using the link"
        },
        "isExpired": {
          "type": "boolean",
          "title": "is link is used"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "title": "link created on"
        },
        "resourceId": {
          "type": "string",
          "title": "resource id"
        }
      }
    },
    "v1DynamicLinkNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1DynamicLink",
          "title": "Node is the actual dynamic object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1ListDynamicLinkResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DynamicLinkNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "v1GetSleekPlanTokenResponse": {
      "type": "object",
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "DiscountsUpdateDiscountBody": {
      "type": "object",
      "properties": {
        "discount": {
          "type": "object",
          "properties": {
            "code": {
              "type": "string",
              "title": "This is alphanumeric string which will be required to avail discount"
            },
            "title": {
              "type": "string",
              "description": "Tile of the Discount. Title of the discount cannot be empty."
            },
            "description": {
              "type": "string",
              "title": "Description is a brief statement about discount, It gives an idea about when\nand on which items discount can be applied"
            },
            "discountType": {
              "$ref": "#/definitions/v1DiscountType",
              "title": "It has two possible values 1: PERCENTAGE 2: FIXED.\nIt tells weather a percentage of amount is deducted from total amount or a\nfixed amount is deducted"
            },
            "discountValue": {
              "$ref": "#/definitions/v1DiscountValue",
              "title": "This is the value that will used to calculate the amount of discount to be\ngiven If discount_type is in percentage, we need to calculate discount\namount else discount_value will directly be deducted for specific currency"
            },
            "discountableItemIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Unique Ids of items on which this discount will work, if empty it will work\non all items\npatterns : com_id/loc_id/srv* , com_id/*, com_id/loc_id* , com_id/loc_id/srv_id (valid items)\nchecked on create using item service : verifies patterns & discount parent corresponding to item parent\nitem should be on same level or below"
            },
            "restriction": {
              "$ref": "#/definitions/v1Restriction",
              "title": "Set of restrictions that defines how and when discount will work"
            },
            "enabled": {
              "type": "boolean",
              "title": "Disabled discount code can't be consumed\nand it will be updated using update field mask"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "visibility": {
              "$ref": "#/definitions/v1Visibility"
            },
            "applyAutomatically": {
              "type": "boolean",
              "title": "applies automatically or not"
            },
            "applicableDurationStart": {
              "type": "string",
              "format": "date-time",
              "title": "discount can be applied on any item, if application date (current time) false within"
            },
            "applicableDurationEnd": {
              "type": "string",
              "format": "date-time"
            },
            "batchId": {
              "type": "string"
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "baseId": {
              "type": "string"
            },
            "color": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "consumedCount": {
              "type": "integer",
              "format": "int32"
            },
            "bookingScheduleAfter": {
              "type": "string",
              "format": "date-time",
              "title": "discount can be applied if booking scheduled time is within"
            },
            "bookingScheduleBefore": {
              "type": "string",
              "format": "date-time"
            }
          },
          "title": "Discount contains discount items"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields can be updated of the given discount"
        },
        "baseId": {
          "type": "string"
        }
      },
      "title": "Request to update discount"
    },
    "v1ApplyAutomaticallyFilter": {
      "type": "string",
      "enum": [
        "ApplyAutomaticallyFilter_UNSPECIFIED",
        "ALL",
        "TRUE",
        "FALSE"
      ],
      "default": "ApplyAutomaticallyFilter_UNSPECIFIED"
    },
    "v1BatchCreateDiscountFlockResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateDiscountResponseWrapper"
          }
        }
      }
    },
    "v1BatchCreateDiscountRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "levelDiscounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LevelDiscount"
          }
        }
      }
    },
    "v1BatchCreateDiscountResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateDiscountResponseWrapper"
          }
        }
      }
    },
    "v1BatchDeleteDiscountId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "baseId": {
          "type": "string"
        }
      }
    },
    "v1BatchDeleteDiscountRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchDeleteDiscountId"
          },
          "title": "Ids ,Unique discount identifiers"
        }
      }
    },
    "v1BatchGetDiscountRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids ,Unique discount identifiers"
        },
        "viewMask": {
          "type": "string"
        }
      },
      "title": "Request to get product(s),"
    },
    "v1BatchGetDiscountResponse": {
      "type": "object",
      "properties": {
        "discount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Discount"
          }
        }
      },
      "title": "BatchGetDiscountResponse is the convenient wrapper for a list of discounts"
    },
    "v1BatchStatusChangeDiscountId": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "baseId": {
          "type": "string"
        }
      }
    },
    "v1BatchStatusChangeDiscountRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchStatusChangeDiscountId"
          },
          "title": "Ids ,Unique discount identifiers"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "title": "Request to get product(s),"
    },
    "v1BatchStatusChangeDiscountResponse": {
      "type": "object",
      "properties": {
        "discount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Discount"
          }
        }
      },
      "title": "BatchGetDiscountResponse is the convenient wrapper for a list of discounts"
    },
    "v1BatchUpdateDiscountMetadataRequestWrapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1BatchUpdateDiscountMetadataResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchUpdateDiscountMetadataResponseWrapper"
          }
        }
      }
    },
    "v1BatchUpdateDiscountMetadataResponseWrapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1BatchValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1ConsumeRule": {
      "type": "object",
      "properties": {
        "initialOrderCount": {
          "$ref": "#/definitions/v1InitialOrderCount"
        },
        "userRestriction": {
          "$ref": "#/definitions/v1UserRestriction"
        },
        "usageRestriction": {
          "$ref": "#/definitions/v1UsageRestriction"
        },
        "minOrderCount": {
          "$ref": "#/definitions/v1MinOrderCount"
        },
        "minOrderItemCount": {
          "$ref": "#/definitions/v1MinOrderItemCount"
        }
      },
      "title": "Defines in which way and number of times discount can be used"
    },
    "v1CreateDiscountRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given discount like\nbusiness/group."
        },
        "discount": {
          "$ref": "#/definitions/v1Discount",
          "title": "The discount to create (required)"
        },
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Request to create discount"
    },
    "v1CreateDiscountResponseWrapper": {
      "type": "object",
      "properties": {
        "discount": {
          "$ref": "#/definitions/v1Discount"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1CreateDiscountWrapper": {
      "type": "object",
      "properties": {
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discount": {
          "$ref": "#/definitions/v1Discount"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1CustomerRestriction": {
      "type": "object",
      "properties": {
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "emails to be allowed for discount coupon application"
        }
      },
      "title": "This will be replaced with dynamic list later"
    },
    "v1Discount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique identifier for discount"
        },
        "code": {
          "type": "string",
          "title": "This is alphanumeric string which will be required to avail discount"
        },
        "title": {
          "type": "string",
          "description": "Tile of the Discount. Title of the discount cannot be empty."
        },
        "description": {
          "type": "string",
          "title": "Description is a brief statement about discount, It gives an idea about when\nand on which items discount can be applied"
        },
        "discountType": {
          "$ref": "#/definitions/v1DiscountType",
          "title": "It has two possible values 1: PERCENTAGE 2: FIXED.\nIt tells weather a percentage of amount is deducted from total amount or a\nfixed amount is deducted"
        },
        "discountValue": {
          "$ref": "#/definitions/v1DiscountValue",
          "title": "This is the value that will used to calculate the amount of discount to be\ngiven If discount_type is in percentage, we need to calculate discount\namount else discount_value will directly be deducted for specific currency"
        },
        "discountableItemIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Unique Ids of items on which this discount will work, if empty it will work\non all items\npatterns : com_id/loc_id/srv* , com_id/*, com_id/loc_id* , com_id/loc_id/srv_id (valid items)\nchecked on create using item service : verifies patterns & discount parent corresponding to item parent\nitem should be on same level or below"
        },
        "restriction": {
          "$ref": "#/definitions/v1Restriction",
          "title": "Set of restrictions that defines how and when discount will work"
        },
        "enabled": {
          "type": "boolean",
          "title": "Disabled discount code can't be consumed\nand it will be updated using update field mask"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "visibility": {
          "$ref": "#/definitions/v1Visibility"
        },
        "applyAutomatically": {
          "type": "boolean",
          "title": "applies automatically or not"
        },
        "applicableDurationStart": {
          "type": "string",
          "format": "date-time",
          "title": "discount can be applied on any item, if application date (current time) false within"
        },
        "applicableDurationEnd": {
          "type": "string",
          "format": "date-time"
        },
        "batchId": {
          "type": "string"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "baseId": {
          "type": "string"
        },
        "color": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "consumedCount": {
          "type": "integer",
          "format": "int32"
        },
        "bookingScheduleAfter": {
          "type": "string",
          "format": "date-time",
          "title": "discount can be applied if booking scheduled time is within"
        },
        "bookingScheduleBefore": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Discounts are reductions to a basic price of goods or services.\nFor eg. 10% discount on hair cut or 20% discount on shampoo"
    },
    "v1DiscountNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the Discount list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1Discount",
          "title": "Information about the Discount"
        }
      },
      "title": "Information about each Discount and its position"
    },
    "v1DiscountOrderByFilter": {
      "type": "string",
      "enum": [
        "DiscountOrderByFilter_UNSPECIFIED",
        "FIRST_CREATED",
        "LAST_CREATED"
      ],
      "default": "DiscountOrderByFilter_UNSPECIFIED"
    },
    "v1DiscountType": {
      "type": "string",
      "enum": [
        "DiscountType_UNSPECIFIED",
        "PERCENTAGE",
        "FIXED"
      ],
      "default": "DiscountType_UNSPECIFIED"
    },
    "v1EmployeeRestriction": {
      "type": "object",
      "properties": {
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "employee ids to be allowed for discount coupon application"
        }
      }
    },
    "v1GetDiscountLinkingResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Discount"
          }
        }
      }
    },
    "v1GetItemResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id unique identifier for item"
        }
      }
    },
    "v1InitialOrderCount": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Two cases\n1. For user first x orders, for eg. we want users to apply discount on first 5 orders only\n2. Valid for customers with less than or equal to number of bookings"
    },
    "v1LevelDiscount": {
      "type": "object",
      "properties": {
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "discount": {
          "$ref": "#/definitions/v1Discount"
        }
      }
    },
    "v1ListAutomaticApplicablePublicDiscountCodeResponse": {
      "type": "object",
      "properties": {
        "discounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Discount"
          }
        }
      }
    },
    "v1ListDiscountResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DiscountNode"
          },
          "title": "List of Discount node which contains Discount and its position in the list"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      },
      "title": "Response for ListDiscountsOfParent RPC, it contains Discount and pagination\ninformation"
    },
    "v1MinOrderCount": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Min bookings required for applying discount"
    },
    "v1MinOrderItemCount": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Restriction": {
      "type": "object",
      "properties": {
        "consumeRules": {
          "$ref": "#/definitions/v1ConsumeRule",
          "title": "Defines consume rules for discount"
        },
        "weekdayRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WeekdayRule"
          },
          "description": "WeekdayRule  this rule will add restriction on discount\nconsumption like we can only consume the items of this package on every\nMonday and Tuesday of the week between 9 am to 6 pm."
        },
        "maxDiscount": {
          "$ref": "#/definitions/typesPrice",
          "title": "Maximum amount that can be deducted from total amount\nIf amount obtained after applying discount code is more than max_discount,\nthan user will receive amount specified in max_discount"
        },
        "maxDiscountableItems": {
          "type": "integer",
          "format": "int32",
          "description": "Number to total items that can be discounted in a single order.\nfor eg. an order contains 10 items all of which are valid for getting\ndiscount but maxDiscountableItems value is 4 than any 4 out of 10 items will\nbe discounted. -1 for no limit."
        },
        "order": {
          "$ref": "#/definitions/v1SelectionOrder",
          "title": "Order in which items will be picked for discount\nOnly work when maxDiscountableItems value is specified and discountable items\nare more than this value\nIt will always order based on price"
        },
        "minOrderAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "Minimum order price required to apply discount\nIf the price of order is less than the minimum amount,\ndiscount code cannot be applied"
        },
        "customerRestrictions": {
          "$ref": "#/definitions/v1CustomerRestriction",
          "title": "Customers allowed"
        },
        "employeeRestrictions": {
          "$ref": "#/definitions/v1EmployeeRestriction",
          "title": "Employees allowed"
        }
      },
      "title": "Restriction is the set of rule which can be applied to discount"
    },
    "v1SelectionOrder": {
      "type": "string",
      "enum": [
        "SelectionOrder_UNSPECIFIED",
        "ASC",
        "DESC"
      ],
      "default": "SelectionOrder_UNSPECIFIED",
      "title": "Sets the order in which selection will be done"
    },
    "v1ShareDiscountRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "discountId": {
          "type": "string"
        },
        "baseId": {
          "type": "string"
        },
        "emails": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ShareDiscountResponse": {
      "type": "object",
      "properties": {
        "discountId": {
          "type": "string"
        },
        "discount": {
          "$ref": "#/definitions/v1Discount"
        },
        "customerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1StatusFilter": {
      "type": "string",
      "enum": [
        "StatusFilter_UNSPECIFIED",
        "ALL_STATUS",
        "ACTIVE_STATUS",
        "INACTIVE_STATUS",
        "EXPIRED_STATUS"
      ],
      "default": "StatusFilter_UNSPECIFIED"
    },
    "v1UsageRestriction": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Total number of times discount can be used irrespective of user"
    },
    "v1UserRestriction": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "For users x number of usage, for eg. we want user to use discount for 5\ntimes only"
    },
    "v1Visibility": {
      "type": "string",
      "enum": [
        "Visibility_UNSPECIFIED",
        "PRIVATE",
        "PUBLIC"
      ],
      "default": "Visibility_UNSPECIFIED"
    },
    "v1WeekdayRule": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "dayOfWeek": {
          "$ref": "#/definitions/typesDayOfWeek",
          "title": "day of week"
        }
      }
    },
    "v1Consumption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id: field is of internal chaku use"
        },
        "moduleLicenseSlug": {
          "type": "string",
          "title": "module_license_slug: license identifying slug (unique)"
        },
        "tagType": {
          "$ref": "#/definitions/typesRestrictionTypes",
          "title": "tag_type: identifies restriction type"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "start: represents consumption cycle start time"
        },
        "count": {
          "type": "string",
          "format": "int64",
          "title": "count: number of items consumed"
        },
        "cycle": {
          "type": "string",
          "format": "int64",
          "title": "cycle: represents the cycle number of the consumption (in month)"
        },
        "licenseWalletId": {
          "type": "string",
          "title": "license_wallet_id: field is of internal chaku use"
        }
      }
    },
    "v1LicenseConsumption": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id: field is of internal chaku use"
        },
        "licenseId": {
          "type": "string",
          "title": "id: field is of internal chaku use"
        },
        "licenseWalletId": {
          "type": "string",
          "title": "license_wallet_id: field is of internal chaku use"
        },
        "consumptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumption"
          },
          "title": "consumptions: all types of module license consumption details"
        }
      }
    },
    "v1Information": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1LogType": {
      "type": "string",
      "enum": [
        "Default",
        "Info",
        "Warning",
        "Error",
        "Debug"
      ],
      "default": "Default"
    },
    "messagingv1Frequency": {
      "type": "string",
      "enum": [
        "UNSET",
        "DAILY",
        "WEEKLY",
        "MONTHLY"
      ],
      "default": "UNSET"
    },
    "v1DeliverySetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "sendingTime": {
          "type": "string",
          "format": "date-time",
          "title": "sending_time only time (hours, minute and seconds) will be used"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "stopDate": {
          "type": "string",
          "format": "date-time"
        },
        "deliveryType": {
          "$ref": "#/definitions/v1DeliveryType",
          "title": "When delivery type is recurring use Frequency\nand when it is as criteria match use hourly"
        },
        "stopType": {
          "$ref": "#/definitions/v1StopType"
        },
        "limitType": {
          "$ref": "#/definitions/v1LimitType"
        },
        "limit": {
          "type": "integer",
          "format": "int32"
        },
        "frequency": {
          "$ref": "#/definitions/messagingv1Frequency"
        }
      }
    },
    "v1DeliveryType": {
      "type": "string",
      "enum": [
        "ONCE",
        "RECURRING",
        "AS_CRITERIA_MATCH"
      ],
      "default": "ONCE"
    },
    "v1LimitType": {
      "type": "string",
      "enum": [
        "NO_LIMIT",
        "MAX"
      ],
      "default": "NO_LIMIT"
    },
    "v1ListMessageCountResponse": {
      "type": "object",
      "properties": {
        "messageCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MessageCount"
          }
        }
      }
    },
    "v1ListMessageResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Message"
          }
        }
      }
    },
    "v1Message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "queryId": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "deliverySetting": {
          "$ref": "#/definitions/v1DeliverySetting"
        },
        "channel": {
          "$ref": "#/definitions/typesChannelType"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "description": "*Message:** As a company admin, I want to create a promotional message for specific users,\nso that I can send them promotional notifications.\n\nMessage service will store the messages that needs to be send to the customer. Message is\nmade of 3 things\n- Template_Id (Template that needs to be send)\n- query_Id (User who will receive this message)\n- delivery_setting (When to start and stop sending the message)\n\n```proto\nmessage Message {\nstring id = 1; // parent will be company\nstring template_id = 2;\nstring query_id = 3;\nChannel channel = 4;\nDeliverySetting delivery_setting = 5;\nstring title = 6;\nstring description = 7;\nmap<string, string> metadata = 8;\n}\n\nmessage DeliverySetting {\nDeliveryType type = 1;\ngoogle.protobuf.date_time start_date = 2;\nstring timezone = 3;\nstring time = 4; // sending_time\ngoogle.protobuf.date_time stop_date = 5;\nStopType stop_type = 6;\nLimitType limit_type = 7;\nint32 limit = 8;\nFrequency frequency = 9;\n}\n\nenum LimitType {\nUNKNOWN = 0;\nMAX = 1;\nNO_LIMIT = 2;\n}\n\nenum StopType {\nUNKNOWN = 0;\nNEVER = 1;\nSPECIFIC_DATE = 2;\n}\n\nenum DeliveryType {\nUNKNOWN = 0;\nONCE = 1;\nRECURRING = 2;\nAS_CRITERIA_MATCH = 3;\n}\n\nenum Frequency {\nUNSET = 0;\nDAILY = 1;\nWEEKLY = 2;\nMONTHLY = 3;\n}\n\n```\n\nMethods:\n- Create\n- validation of template and query_id\n- Update\n- validation of template and query_id\n- Delete\n- List\n- (parent + channel filter( channel is optional))"
    },
    "v1MessageCount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "messageId": {
          "type": "string"
        },
        "userCount": {
          "type": "string",
          "format": "int64"
        },
        "firstActivity": {
          "type": "string",
          "format": "date-time"
        },
        "lastActivity": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "*Message Count Service**: As a company admin, I want to see the users count who have received\nthe particular message, so that I can check the statics of the a particular message.\n\nThis service will store the count (no. of users who have received this message)\n\n```proto\nmessage MessageCount {\nstring id = 1; // parent will be company\nstring message_id = 2;\nint64 user_count = 3;\ngoogle.protobuf.Timestamp first_activity = 4;\ngoogle.protobuf.Timestamp last_activity = 5;\n}\n```\n\nMethods\n- IncreaseMessageCount(message_id, user_count)\n- It will add the user_count with saved count if entry already exists else will create new entry.\n- ListMessageCount(parent_id)\n- It will return all MessageCount saved against that parent."
    },
    "v1StopType": {
      "type": "string",
      "enum": [
        "NEVER",
        "SPECIFIC_DATE"
      ],
      "default": "NEVER"
    },
    "v1DataType": {
      "type": "string",
      "enum": [
        "STRING",
        "NUMBER",
        "FLOAT",
        "DATETIME",
        "TIME_INTERVAL"
      ],
      "default": "STRING"
    },
    "v1EventData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "title": "Appointment"
        },
        "data": {
          "$ref": "#/definitions/v1EventDataJson",
          "title": "JsonB of map[string]interface{}"
        },
        "userId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "*Event Data**: As a company admin, I want to select the users who are matching with criteria, so that I can send them promotional emails.\n\nThis service will insert the data into the events table. It will be called from the background events/ scheduler.\n\n```proto\nmessage EventData {\nstring id = 1; // parent = company id\nstring event_name = 2;\nstring event_data = 3; (JsonB in database)\nstring user_id = 5;\ngoogle.protobuf.Timestamp created_on = 7;\n}\n\nmessage EventDataRequest {\nproto.Message message = 1;\nstring event_name = 2;\nstring parent_id = 3;\nstring user_id = 4; // user_event_profile_id\ngoogle.protobuf.Timestamp created_on = 5;\n}\n```\nMethods:\n- InsertEvent(EventDataRequest)\n- It will take EventDataRequest object as input and then it will create its own custom object (with relevant) fields for that event\nand insert it into the db.\nWe will create those objects in the proto.\n\n- InsertEvents()\n- It will take the list of events and insert it into the database."
    },
    "v1EventDataJson": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "v1EventDataRequest": {
      "type": "object",
      "properties": {
        "message": {
          "$ref": "#/definitions/protobufAny"
        },
        "eventType": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "userEventProfileId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1InsertEventDataResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventData"
          }
        }
      }
    },
    "v1ListMessagingEventResponse": {
      "type": "object",
      "properties": {
        "messagingEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MessagingEvent"
          }
        }
      }
    },
    "v1MessagingEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "service.Name"
        },
        "displayName": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "dataType": {
          "$ref": "#/definitions/v1DataType"
        },
        "userId": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "userProperty": {
          "type": "string"
        },
        "eventType": {
          "type": "string",
          "title": "Appointment"
        }
      },
      "description": "As a company admin, I want to see the list of events, so that I can make analysis based on those events.\n\n```proto\nmessage Event {\nstring id = 1; // parent is company\nstring name = 2;\nstring display_name = 3;\nDataType data_type = 4;\nbool default = 5;\nstring type = 6; // event_type\nstring app_type_id = 7;\nstring user_property = 8;\n}\n```\n\n*rpc GetEventList()**\n- It will take the parent_id and will return all the default event list + events those are created under the parent.\n\n*rpc CreateEvent()**\n- It will create the non default events within the company and will have have check that the event name do not already exists in\n- In same company\n- In default list"
    },
    "v1UserEventProfile": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "gender": {
          "$ref": "#/definitions/typesGender"
        },
        "pushNotificationEnabled": {
          "type": "string"
        }
      },
      "description": "*User event profile**: As a product owner, I want to save the user event profile to a separate table, so that during messaging we do not need to process all the users.\n\nUser event profile store the user property (each customer) for sending . It will be used for storing the messaging information.\n\n```proto\nmessage UserEventProfile {\nstring id = 1; // parent is company\nstring user_id = 2;\nstring customer_id = 3;\nstring parent_id = 4;\nstring email = 5;\nstring phone = 6;\nstring first_name = 7;\nstring last_name = 8;\nstring push_notification_enabled = 9; // TODO: [push_notification_enabled] string type ?\n}\n```\n- When a new customer is create it will fire the event and will create the entry into the UserEventProfile table.\n- When the customer object is updated it will fire the event and will update the existing entry."
    },
    "v1GetMessageLogSentCountResponse": {
      "type": "object",
      "properties": {
        "usersCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1MessageLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "messageId": {
          "type": "string"
        },
        "queryId": {
          "type": "string"
        },
        "sentTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1JsonUploadResponse": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "filePath": {
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/protobufAny"
        },
        "buyerOrganizationId": {
          "type": "string",
          "title": "optional"
        }
      }
    },
    "v1GenerateIcalContentResponse": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string",
          "title": "content(ical) output as string"
        }
      }
    },
    "v1GetIcalFeedURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "title": "ical url with encrypted ID"
        }
      }
    },
    "v1ClientCredential": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of client Credential"
        },
        "clientName": {
          "type": "string",
          "title": "Name of the client Credential"
        },
        "clientId": {
          "type": "string",
          "title": "ID of the client Credential"
        },
        "skipConsent": {
          "type": "boolean"
        }
      }
    },
    "v1ListClientCredentialResponse": {
      "type": "object",
      "properties": {
        "clientCredential": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ClientCredential"
          }
        }
      },
      "title": "ListClientCredentialResponse: Response object for ListClientCredential rpc\ncall"
    },
    "v1GetSpamReportUrlRequest": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        }
      }
    },
    "v1GetSpamReportUrlResponse": {
      "type": "object",
      "properties": {
        "encryptedUrl": {
          "type": "string"
        }
      }
    },
    "v1HandleSpamReportUrlRequest": {
      "type": "object",
      "properties": {
        "encryptedUrl": {
          "type": "string"
        }
      }
    },
    "v1IsBlockedEmailRequest": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1IsBlockedEmailResponse": {
      "type": "object",
      "properties": {
        "isBlocked": {
          "type": "boolean"
        }
      }
    },
    "ChannelsUpdateChannelBody": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetChannelResponse": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Channel"
          }
        }
      }
    },
    "v1CreateChannelRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/v1Channel"
        }
      }
    },
    "v1ListChannelResponse": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Channel"
          }
        }
      }
    },
    "activity_logActivityLogEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "stored in database as auto-increment bigint"
        },
        "fullEventName": {
          "type": "string"
        },
        "displayEventName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        }
      }
    },
    "activity_logBatchGetActivityLogEventsResponse": {
      "type": "object",
      "properties": {
        "activityLogEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogEvent"
          }
        }
      }
    },
    "activity_logListActivityLogEventsResponse": {
      "type": "object",
      "properties": {
        "activityLogEvent": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogEvent"
          }
        }
      }
    },
    "activity_logActivityLogTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "stored in database as auto-increment bigint"
        },
        "fullEventName": {
          "type": "string"
        },
        "content": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logLocalizedActivityLogTemplateContent"
          }
        },
        "moduleName": {
          "type": "string"
        },
        "dateTimeFields": {
          "$ref": "#/definitions/typesDateTimeFields"
        }
      }
    },
    "activity_logBatchGetActivityLogTemplatesResponse": {
      "type": "object",
      "properties": {
        "activityLogTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogTemplate"
          }
        }
      }
    },
    "activity_logListActivityLogTemplatesResponse": {
      "type": "object",
      "properties": {
        "activityLogTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogTemplate"
          }
        }
      }
    },
    "activity_logLocalizedActivityLogTemplateContent": {
      "type": "object",
      "properties": {
        "locale": {
          "type": "string"
        },
        "template": {
          "type": "string"
        }
      }
    },
    "activity_logActivityLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent can be location, company or group\nstored in database as auto-increment bigint"
        },
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "ipInfo": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "activityLogEventId": {
          "type": "string",
          "title": "connection to activity-log-event"
        },
        "activityLogTemplateId": {
          "type": "string",
          "title": "connection to activity-log-template"
        },
        "activityLogData": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityLogType": {
          "$ref": "#/definitions/activity_logActivityLogType"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "activity_logActivityLogNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/activity_logActivityLog"
        }
      }
    },
    "activity_logActivityLogReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        },
        "activityLogData": {
          "type": "string"
        },
        "activityId": {
          "type": "string"
        },
        "activityLogType": {
          "$ref": "#/definitions/activity_logActivityLogType"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "activityLogEventId": {
          "type": "string"
        },
        "displayEventName": {
          "type": "string"
        },
        "fullEventName": {
          "type": "string"
        },
        "moduleName": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "activityLogTemplateId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "activity_logActivityLogReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/activity_logActivityLogReport"
        }
      }
    },
    "activity_logActivityLogType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "REPORT",
        "HISTORY"
      ],
      "default": "UNSPECIFIED"
    },
    "activity_logActivityLogsOfActivity": {
      "type": "object",
      "properties": {
        "activityId": {
          "type": "string"
        },
        "activityLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLog"
          }
        }
      }
    },
    "activity_logBatchCreateActivityLogResponse": {
      "type": "object",
      "properties": {
        "activityLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLog"
          }
        }
      }
    },
    "activity_logBatchGetActivityLogsOfActivityResponse": {
      "type": "object",
      "properties": {
        "activityLogsOfActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogsOfActivity"
          }
        }
      }
    },
    "activity_logGetLinkedIdByNameResponse": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        }
      }
    },
    "activity_logListActivityLogFilter": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "userEmail": {
          "type": "string"
        },
        "dateRange": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "ipAddress": {
          "type": "string"
        },
        "activityLogEventId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayEventName": {
          "type": "string"
        }
      }
    },
    "activity_logListActivityLogReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "totalCount": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "activity_logListActivityLogResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/activity_logActivityLogNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "totalCount": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "AreaCodesUpdateAreaCodeBody": {
      "type": "object",
      "properties": {
        "areaCode": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "title of Area Code"
            },
            "shortName": {
              "type": "string",
              "title": "abbreviation of Area Code (if any)"
            },
            "description": {
              "type": "string",
              "title": "description of Area Code"
            },
            "priority": {
              "type": "integer",
              "format": "int32",
              "title": "priority of Area Code for sorting"
            },
            "enabled": {
              "type": "boolean",
              "title": "whether the area is enabled"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional data of Area Code"
            },
            "groupId": {
              "type": "string"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AreaCode": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the Area Code"
        },
        "title": {
          "type": "string",
          "title": "title of Area Code"
        },
        "shortName": {
          "type": "string",
          "title": "abbreviation of Area Code (if any)"
        },
        "description": {
          "type": "string",
          "title": "description of Area Code"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "priority of Area Code for sorting"
        },
        "enabled": {
          "type": "boolean",
          "title": "whether the area is enabled"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data of Area Code"
        },
        "groupId": {
          "type": "string"
        }
      }
    },
    "v1BatchGetAreaCodeRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetAreaCodeResponse": {
      "type": "object",
      "properties": {
        "areaCode": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AreaCode"
          }
        }
      }
    },
    "v1CreateAreaCodeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "areaCode": {
          "$ref": "#/definitions/v1AreaCode"
        }
      }
    },
    "v1ListAreaCodeResponse": {
      "type": "object",
      "properties": {
        "areaCode": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AreaCode"
          }
        }
      }
    },
    "StarredsUpdateStarredBody": {
      "type": "object",
      "properties": {
        "starred": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "eventType": {
              "type": "string"
            },
            "platform": {
              "type": "string",
              "title": "chrome plugin, intercom, outlook plugin"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CreateStarredRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "location  is parent"
        },
        "starred": {
          "$ref": "#/definitions/v1Starred"
        }
      }
    },
    "v1ListStarredResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StarredNode"
          },
          "title": "List of Starreds"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1Starred": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent location"
        },
        "userId": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "platform": {
          "type": "string",
          "title": "chrome plugin, intercom, outlook plugin"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1StarredNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Starred",
          "title": "Node is the actual customer object"
        }
      }
    },
    "v1BatchCreateReplyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateReplyWrapper"
          }
        }
      }
    },
    "v1BatchCreateReplyResponse": {
      "type": "object",
      "properties": {
        "replies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateReplyResponseWrapper"
          }
        }
      }
    },
    "v1CreateReplyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "reply": {
          "$ref": "#/definitions/v1Reply"
        }
      }
    },
    "v1CreateReplyResponseWrapper": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/v1Reply"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1CreateReplyWrapper": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/v1Reply"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1ListReplyResponse": {
      "type": "object",
      "properties": {
        "reply": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Reply"
          }
        }
      }
    },
    "v1Reply": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "replierUserId": {
          "type": "string"
        },
        "replierName": {
          "type": "string"
        },
        "replierEmail": {
          "type": "string"
        },
        "replierGender": {
          "$ref": "#/definitions/typesGender"
        },
        "replierImage": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "description": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "description": "It will have the following methods\ncreate\nupdate\nlist",
      "title": "Reply\nid string\nreview_id string\nreplier\nid string\nname string\nemail string\nimage_url string\ngender\ndescription string\nreplied_on date_time\nupdated_on date_time"
    },
    "v1UpdateReplyRequest": {
      "type": "object",
      "properties": {
        "reply": {
          "$ref": "#/definitions/v1Reply"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "ShortUrlsUpdateShortUrlBody": {
      "type": "object",
      "properties": {
        "shortUrl": {
          "type": "object",
          "properties": {
            "shortUrlValue": {
              "type": "string",
              "title": "fields"
            },
            "urlPath": {
              "type": "string"
            },
            "shortUrlType": {
              "$ref": "#/definitions/v1ShortUrlType"
            },
            "itemId": {
              "type": "string",
              "description": "Item represents the unique-id of entity/object for which short-url belongs\nEx: Company, Location, ..."
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CheckShortUrlResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        }
      }
    },
    "v1CreateShortUrlRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "shortUrl": {
          "$ref": "#/definitions/v1ShortUrl"
        }
      }
    },
    "v1GetUrlInfoResponse": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "resourceId": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "resourceTypeId": {
          "type": "string"
        },
        "membershipId": {
          "type": "string"
        }
      }
    },
    "v1ListShortUrlResponse": {
      "type": "object",
      "properties": {
        "shortUrl": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ShortUrl"
          }
        }
      }
    },
    "v1ShortUrl": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "shortUrlValue": {
          "type": "string",
          "title": "fields"
        },
        "urlPath": {
          "type": "string"
        },
        "shortUrlType": {
          "$ref": "#/definitions/v1ShortUrlType"
        },
        "itemId": {
          "type": "string",
          "description": "Item represents the unique-id of entity/object for which short-url belongs\nEx: Company, Location, ..."
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ShortUrlType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "LOCATION",
        "COMPANY",
        "EMPLOYEE",
        "RESOURCE",
        "SERVICE",
        "RESOURCE_TYPE",
        "MEMBERSHIP"
      ],
      "default": "UNSPECIFIED"
    },
    "NotesUpdateNoteBody": {
      "type": "object",
      "properties": {
        "note": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "title of note"
            },
            "description": {
              "type": "string",
              "title": "description of note"
            },
            "tags": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "tags associated with note"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "metadata to store additional information"
            },
            "private": {
              "type": "boolean",
              "title": "for marking the note as private"
            },
            "noteType": {
              "$ref": "#/definitions/v1NoteType",
              "title": "Note type value to make note . eg: note for all except customer"
            },
            "typeId": {
              "type": "string",
              "description": "appointmentId/customerId",
              "title": "The type with with note is associated like appointment , customer"
            },
            "against": {
              "type": "string",
              "title": "Against whom the note is created"
            },
            "appTypeId": {
              "type": "string",
              "title": "The app type for which note is created"
            },
            "appTypeName": {
              "type": "string",
              "title": "The app name for which note is created"
            },
            "createdBy": {
              "type": "string",
              "title": "meta details\nNote created by id"
            },
            "updatedBy": {
              "type": "string",
              "title": "Note updated by id"
            },
            "deletedBy": {
              "type": "string",
              "title": "Note deleted by id"
            },
            "createdByName": {
              "type": "string",
              "title": "Note created by name"
            },
            "updatedByName": {
              "type": "string",
              "title": "Note updated by name"
            },
            "deletedByName": {
              "type": "string",
              "title": "Note deleted by name"
            },
            "createdByEmail": {
              "type": "string",
              "title": "Note created by email"
            },
            "updatedByEmail": {
              "type": "string",
              "title": "Note updated by email"
            },
            "deletedByEmail": {
              "type": "string",
              "title": "Note deleted by email"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time",
              "title": "Note created on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time",
              "title": "Note updated on"
            },
            "deletedOn": {
              "type": "string",
              "format": "date-time",
              "title": "Note deleted on"
            }
          },
          "title": "Note object to be updated"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateNotesRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "List of Notes to create"
        },
        "setPrivate": {
          "type": "boolean",
          "title": "for setting note as private"
        },
        "appTypeId": {
          "type": "string",
          "title": "at least one of the two are required\napp type id is the id of the app for which note is created"
        },
        "appTypeName": {
          "type": "string",
          "title": "app type name is the name of the app for which note is created"
        }
      }
    },
    "v1BatchCreateNotesResponse": {
      "type": "object",
      "properties": {
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "List of notes"
        }
      }
    },
    "v1BatchGetNoteByTypesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotesList"
          },
          "title": "List of notes"
        }
      }
    },
    "v1BatchGetNoteRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids Unique Note identifiers"
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetNoteResponse": {
      "type": "object",
      "properties": {
        "note": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "List of Note"
        }
      }
    },
    "v1CreateNoteRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent is location or company"
        },
        "note": {
          "$ref": "#/definitions/v1Note",
          "title": "The Note object"
        },
        "setPrivate": {
          "type": "boolean",
          "title": "for setting note as private"
        }
      }
    },
    "v1ListNoteResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NoteNode"
          },
          "title": "List of notes"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1Note": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "title of note"
        },
        "description": {
          "type": "string",
          "title": "description of note"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "tags associated with note"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata to store additional information"
        },
        "private": {
          "type": "boolean",
          "title": "for marking the note as private"
        },
        "noteType": {
          "$ref": "#/definitions/v1NoteType",
          "title": "Note type value to make note . eg: note for all except customer"
        },
        "typeId": {
          "type": "string",
          "description": "appointmentId/customerId",
          "title": "The type with with note is associated like appointment , customer"
        },
        "against": {
          "type": "string",
          "title": "Against whom the note is created"
        },
        "appTypeId": {
          "type": "string",
          "title": "The app type for which note is created"
        },
        "appTypeName": {
          "type": "string",
          "title": "The app name for which note is created"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details\nNote created by id"
        },
        "updatedBy": {
          "type": "string",
          "title": "Note updated by id"
        },
        "deletedBy": {
          "type": "string",
          "title": "Note deleted by id"
        },
        "createdByName": {
          "type": "string",
          "title": "Note created by name"
        },
        "updatedByName": {
          "type": "string",
          "title": "Note updated by name"
        },
        "deletedByName": {
          "type": "string",
          "title": "Note deleted by name"
        },
        "createdByEmail": {
          "type": "string",
          "title": "Note created by email"
        },
        "updatedByEmail": {
          "type": "string",
          "title": "Note updated by email"
        },
        "deletedByEmail": {
          "type": "string",
          "title": "Note deleted by email"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "title": "Note created on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time",
          "title": "Note updated on"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time",
          "title": "Note deleted on"
        }
      }
    },
    "v1NoteNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Note",
          "title": "Node is the actual customer object"
        }
      }
    },
    "v1NoteType": {
      "type": "string",
      "enum": [
        "ALL",
        "ALL_EXCEPT_CUSTOMER"
      ],
      "default": "ALL"
    },
    "v1NotesList": {
      "type": "object",
      "properties": {
        "typeId": {
          "type": "string",
          "title": "Type id of note"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Note"
          },
          "title": "List of notes"
        }
      }
    },
    "CustomerSettingsUpsertCustomerGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "customerSetting": {
          "type": "object",
          "properties": {
            "domainRestrictions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Domains that are to be restricted from booking.\nFor example, google.com will only allow customers with email xyz@google.com to be booked."
            },
            "allowedCountryCode": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "AllowedCountryCodes indicate all the countries booking are allowed from.\nFor example, 'US', 'IN', 'CA'"
            },
            "geographicalRestrictions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "geographical restrictions"
            },
            "bookingType": {
              "$ref": "#/definitions/v1CustomerBookingType",
              "title": "CustomerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1LimitRestrictions"
              },
              "title": "Customers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "customerOverridden": {
              "type": "boolean",
              "title": "customer overridden read-only value"
            },
            "customizations": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Customization"
              }
            }
          }
        }
      }
    },
    "CustomerSettingsUpsertCustomerSettingBody": {
      "type": "object",
      "properties": {
        "customerSetting": {
          "type": "object",
          "properties": {
            "domainRestrictions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Domains that are to be restricted from booking.\nFor example, google.com will only allow customers with email xyz@google.com to be booked."
            },
            "allowedCountryCode": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "AllowedCountryCodes indicate all the countries booking are allowed from.\nFor example, 'US', 'IN', 'CA'"
            },
            "geographicalRestrictions": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "geographical restrictions"
            },
            "bookingType": {
              "$ref": "#/definitions/v1CustomerBookingType",
              "title": "CustomerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1LimitRestrictions"
              },
              "title": "Customers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "customerOverridden": {
              "type": "boolean",
              "title": "customer overridden read-only value"
            },
            "customizations": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Customization"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1BatchCustomerSetting": {
      "type": "object",
      "properties": {
        "customerSetting": {
          "$ref": "#/definitions/v1CustomerSetting"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1BatchGetCustomerSettingResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerSetting"
          }
        }
      }
    },
    "v1BatchUpsertCustomerSettingRequest": {
      "type": "object",
      "properties": {
        "batchCustomerSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchCustomerSetting"
          }
        },
        "updateMask": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchUpsertCustomerSettingResponse": {
      "type": "object",
      "properties": {
        "customerSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerSetting"
          }
        }
      }
    },
    "v1CustomerBookingType": {
      "type": "string",
      "enum": [
        "Limited",
        "Unlimited",
        "Blocked"
      ],
      "default": "Limited"
    },
    "v1CustomerSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "domainRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Domains that are to be restricted from booking.\nFor example, google.com will only allow customers with email xyz@google.com to be booked."
        },
        "allowedCountryCode": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AllowedCountryCodes indicate all the countries booking are allowed from.\nFor example, 'US', 'IN', 'CA'"
        },
        "geographicalRestrictions": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "geographical restrictions"
        },
        "bookingType": {
          "$ref": "#/definitions/v1CustomerBookingType",
          "title": "CustomerBookingType"
        },
        "limitRestrictions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LimitRestrictions"
          },
          "title": "Customers who are restricted from performing this service\nonly apply if booking_type is Limited"
        },
        "customerOverridden": {
          "type": "boolean",
          "title": "customer overridden read-only value"
        },
        "customizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Customization"
          }
        }
      }
    },
    "v1Customization": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        }
      }
    },
    "v1LimitRestrictions": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesLimitRestrictionType",
          "title": "Type of limit to restrict the booking of a customer"
        },
        "allowedBookingsInDuration": {
          "type": "integer",
          "format": "int32",
          "title": "No. of bookings that are allowed in a specific duration"
        },
        "frequency": {
          "$ref": "#/definitions/typesFrequency",
          "title": "Restriction will be applied for the following frequency"
        },
        "interval": {
          "$ref": "#/definitions/typesDateslot",
          "description": "optional (not present in UI)",
          "title": "Restriction will be applied b/w these days"
        },
        "frequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "Frequency Info"
        }
      },
      "title": "Services that are restricted for a customer\nThis setting can be override at per customer level"
    },
    "ExtendedFieldsUpdateExtendedFieldBody": {
      "type": "object",
      "properties": {
        "extendedField": {
          "type": "object",
          "properties": {
            "moduleName": {
              "type": "string",
              "title": "fields"
            },
            "formFields": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1FormField"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetExtendedFieldResponse": {
      "type": "object",
      "properties": {
        "extendedField": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedField"
          }
        }
      }
    },
    "v1CreateExtendedFieldRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "extendedField": {
          "$ref": "#/definitions/v1ExtendedField"
        }
      }
    },
    "v1ExtendedField": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "moduleName": {
          "type": "string",
          "title": "fields"
        },
        "formFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormField"
          }
        }
      }
    },
    "v1FormField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "formFieldType": {
          "$ref": "#/definitions/v1FormFieldType"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormFieldOption"
          }
        },
        "multiple": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1FormFieldOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1FormFieldType": {
      "type": "string",
      "enum": [
        "FormFieldType_UNDEFINED",
        "INPUT",
        "CHECKBOX",
        "SELECT",
        "ADDRESS"
      ],
      "default": "FormFieldType_UNDEFINED"
    },
    "v1ListExtendedFieldResponse": {
      "type": "object",
      "properties": {
        "extendedField": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedField"
          }
        }
      }
    },
    "v1ValidateExtendedFieldParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1Acceptance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the acceptance."
        },
        "policyId": {
          "type": "string",
          "title": "PolicyId is the id of the policy being accepted. (required)"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Version is the version of the policy that was accepted. (required)"
        },
        "signerData": {
          "$ref": "#/definitions/v1SignerData",
          "title": "SignerData holds data of the person accepting this policy. (required)"
        },
        "acceptedDate": {
          "type": "string",
          "format": "date-time",
          "description": "AcceptedDate indicates the time at which the user accepted the policy."
        },
        "issuerName": {
          "type": "string",
          "description": "IssuerName indicates the name of the entity/person that issued the policy."
        },
        "place": {
          "type": "string",
          "description": "Place represents the place at which this policy was signed."
        },
        "sourceId": {
          "type": "string",
          "title": "source for which policy is applied"
        },
        "itemId": {
          "type": "string",
          "title": "source item id for which policy is applied and source is utilised"
        }
      },
      "title": "Acceptance represents the action of an individual accepting a policy"
    },
    "v1AcceptanceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Acceptance"
        }
      }
    },
    "v1AcceptancePolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "contentUrl": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "oneTimeAcceptance": {
          "type": "boolean"
        },
        "policyType": {
          "type": "string"
        }
      }
    },
    "v1AcceptanceRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateAcceptanceResponse": {
      "type": "object",
      "properties": {
        "acceptances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Acceptance"
          }
        }
      }
    },
    "v1CreateAcceptanceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent: company_id"
        },
        "acceptance": {
          "$ref": "#/definitions/v1Acceptance",
          "title": "acceptance to be added"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "v1ListAcceptanceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptanceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "PageInfo contains the information about of the current page."
        }
      }
    },
    "v1ListUnacceptedPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptancePolicy"
          }
        }
      }
    },
    "v1SignerData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique id of the signer"
        },
        "firstName": {
          "type": "string",
          "title": "Name of the signer"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "title": "Email of the signer"
        }
      },
      "description": "SignerData holds information about the person/entity accepting the contract."
    },
    "v1BulkGetAllLinksOfResourceRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Id is the Unique Id of resource"
        },
        "idsAreOfFirst": {
          "type": "boolean",
          "title": "ids are of first resource types"
        },
        "linkType": {
          "type": "string",
          "title": "Type of link - optional"
        }
      }
    },
    "v1Link": {
      "type": "object",
      "properties": {
        "firstResourceId": {
          "type": "string",
          "title": "First Resource ID is a unique identifier for first resource (Min Length : 1)"
        },
        "secondResourceId": {
          "type": "string",
          "title": "Second Resource ID is a unique identifier for second resource (Min Length : 1)"
        },
        "linkType": {
          "type": "string",
          "title": "Type of link"
        },
        "id": {
          "type": "string",
          "title": "id of the generated link"
        }
      }
    },
    "v1LinkLists": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Link"
          },
          "title": "List of Links of resource (at least one)"
        }
      }
    },
    "v1SingleLinkRequest": {
      "type": "object",
      "properties": {
        "wrtResource": {
          "type": "string"
        },
        "linkType": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Link"
          },
          "title": "List of Links of resource"
        }
      }
    },
    "v1UpsertResourceLinksRequest": {
      "type": "object",
      "properties": {
        "request": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SingleLinkRequest"
          }
        },
        "removeServiceLinking": {
          "type": "boolean"
        },
        "removedLinkIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ValidateLink": {
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/v1Link"
        },
        "isValid": {
          "type": "boolean"
        }
      }
    },
    "v1ValidateLinksResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ValidateLink"
          }
        }
      }
    },
    "v1BatchGetModuleLicenseResponse": {
      "type": "object",
      "properties": {
        "moduleLicense": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ModuleLicense"
          }
        }
      }
    },
    "v1ListModuleLicenseResponse": {
      "type": "object",
      "properties": {
        "moduleLicense": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ModuleLicense"
          }
        },
        "moduleLicenseMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ModuleLicense"
          },
          "title": "ModuleLicenseMap maps module license slug with its corresponding ModuleLicense object"
        }
      }
    },
    "BuyerOrganizationsUpdateBuyerOrganizationBody": {
      "type": "object",
      "properties": {
        "buyerOrganization": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/typesAddress"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "createdBy": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AcceptCustomerInviteToBuyerOrganizationRequest": {
      "type": "object",
      "properties": {
        "buyerOrganizationId": {
          "type": "string"
        },
        "customerEmail": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1BuyerOrganizationRole"
        },
        "dataCode": {
          "type": "string",
          "title": "data code is a mandatory field"
        }
      }
    },
    "v1BuyerOrganization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1BuyerOrganizationCustomerEntity": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "customerId": {
          "type": "string",
          "title": "customer_id won't we required in the input, it will be filled within the endpoint"
        }
      }
    },
    "v1BuyerOrganizationOfCustomer": {
      "type": "object",
      "properties": {
        "buyerOrganization": {
          "$ref": "#/definitions/v1BuyerOrganization"
        },
        "role": {
          "$ref": "#/definitions/v1BuyerOrganizationRole"
        }
      }
    },
    "v1BuyerOrganizationRole": {
      "type": "string",
      "enum": [
        "Organization_Buyer_Employee",
        "Organization_Owner",
        "Organization_CoOwner"
      ],
      "default": "Organization_Buyer_Employee"
    },
    "v1BuyerOrganizationSortBy": {
      "type": "string",
      "enum": [
        "CreatedOn",
        "Name"
      ],
      "default": "CreatedOn"
    },
    "v1BuyerOrganizationWithAccountOwner": {
      "type": "object",
      "properties": {
        "buyerOrganization": {
          "$ref": "#/definitions/v1BuyerOrganization"
        },
        "accountOwnerDetails": {
          "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
        },
        "lastInvitedAccountOwnerDetails": {
          "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
        },
        "isLastInviteExpired": {
          "type": "boolean"
        }
      }
    },
    "v1CreateBuyerOrganizationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "buyerOrganization": {
          "$ref": "#/definitions/v1BuyerOrganization"
        },
        "accountOwnerDetails": {
          "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
        },
        "newCustomerCreated": {
          "type": "boolean"
        }
      }
    },
    "v1CustomerOwnedBuyerOrganization": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "buyerOrganizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BuyerOrganization"
          }
        }
      }
    },
    "v1InviteCustomerToBuyerOrganizationRequest": {
      "type": "object",
      "properties": {
        "buyerOrganizationId": {
          "type": "string"
        },
        "customerInformation": {
          "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
        },
        "role": {
          "$ref": "#/definitions/v1BuyerOrganizationRole"
        },
        "newCustomerCreated": {
          "type": "boolean"
        }
      }
    },
    "v1ListBuyerOrganizationAdminsResponse": {
      "type": "object",
      "properties": {
        "buyerOrganizationOwner": {
          "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
        },
        "buyerOrganizationCoOwners": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BuyerOrganizationCustomerEntity"
          }
        }
      }
    },
    "v1ListBuyerOrganizationsFilters": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1ListBuyerOrganizationsOfCustomerResponse": {
      "type": "object",
      "properties": {
        "buyerOrganizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BuyerOrganizationOfCustomer"
          }
        }
      }
    },
    "v1ListBuyerOrganizationsResponse": {
      "type": "object",
      "properties": {
        "buyerOrganizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BuyerOrganizationWithAccountOwner"
          }
        }
      }
    },
    "v1ListCustomersOwnedBuyerOrganizationsResponse": {
      "type": "object",
      "properties": {
        "customerOwnedBuyerOrganizations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerOwnedBuyerOrganization"
          }
        }
      }
    },
    "TemplateSettingsUpsertTemplateGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "templateSetting": {
          "type": "object",
          "properties": {
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "title": "Template settings"
        }
      }
    },
    "TemplateSettingsUpsertTemplateSettingBody": {
      "type": "object",
      "properties": {
        "setting": {
          "type": "object",
          "properties": {
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "title": "Template settings"
        }
      }
    },
    "v1BatchGetTemplateSettingResponse": {
      "type": "object",
      "properties": {
        "templateSetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TemplateSetting"
          }
        }
      }
    },
    "v1TemplateSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "uiSettings": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "Template settings"
    },
    "v1GenerateCodeResponse": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "v1GetDataFromCodeResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "used": {
          "type": "boolean"
        },
        "viewed": {
          "type": "boolean"
        }
      }
    },
    "v1RevokeCodeData": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "dataCodeType": {
          "type": "string"
        }
      }
    },
    "v1BusinessInfo": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string",
          "title": "company id"
        },
        "businessName": {
          "type": "string"
        }
      }
    },
    "v1CustomerInfo": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1NotificationLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is a unique identifier for log"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType",
          "title": "email/sms types of notification"
        },
        "eventType": {
          "type": "string",
          "title": "type of event"
        },
        "templateId": {
          "type": "string",
          "title": "template id"
        },
        "recipientType": {
          "$ref": "#/definitions/v1RecipientType"
        },
        "customer": {
          "$ref": "#/definitions/v1CustomerInfo",
          "title": "business & customer(sent to) info"
        },
        "business": {
          "$ref": "#/definitions/v1BusinessInfo"
        },
        "notificationAddress": {
          "type": "string",
          "title": "(phone, email, calendarId)"
        },
        "sentOn": {
          "type": "string",
          "format": "date-time"
        },
        "eventId": {
          "type": "string",
          "title": "id of event"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "read": {
          "type": "boolean"
        },
        "readOn": {
          "type": "string",
          "format": "date-time"
        },
        "externalTransactionId": {
          "type": "string",
          "title": "for sms"
        },
        "actualEventId": {
          "type": "string",
          "description": "ActualEventId: appointmentId, classId, packageId, orderId, employeeId etc."
        },
        "actualEventTitle": {
          "type": "string",
          "title": "EventTitle Service Name/ Class Name etc"
        }
      }
    },
    "v1NotificationLogNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1NotificationReportObject"
        }
      }
    },
    "v1NotificationReportObject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "sentFor": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "actualEventId": {
          "type": "string"
        },
        "sentOn": {
          "type": "string",
          "format": "date-time"
        },
        "sentTo": {
          "$ref": "#/definitions/v1CustomerInfo"
        },
        "notificationAddress": {
          "type": "string"
        },
        "recipientType": {
          "$ref": "#/definitions/v1RecipientType"
        }
      }
    },
    "v1NotificationReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationLogNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1RecipientType": {
      "type": "string",
      "enum": [
        "Unknown",
        "Admin",
        "Client",
        "User"
      ],
      "default": "Unknown"
    },
    "v1AverageRating": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "distributedRatings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DistributedRating"
          }
        },
        "starRatings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1StarRating"
          }
        },
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "totalCount": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "StarRating: Start Rating is overallRating\nWe have to store the information of total user corresponding to star rating (OverallRating)\nWhile distribute=ion rating is different from star Rating: easiness , Cleaniness these are all distribution rating"
    },
    "v1BatchCreateReviewRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateReviewWrapper"
          },
          "title": "List of review requested"
        }
      }
    },
    "v1BatchCreateReviewResponse": {
      "type": "object",
      "properties": {
        "reviews": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateReviewResponseWrapper"
          }
        }
      }
    },
    "v1ChangeReviewStarredStatusRequest": {
      "type": "object",
      "properties": {
        "reviewId": {
          "type": "string"
        },
        "markStar": {
          "type": "boolean"
        }
      }
    },
    "v1CreateReviewRequest": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/v1Review"
        }
      }
    },
    "v1CreateReviewResponseWrapper": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/v1Review"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1CreateReviewWrapper": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/v1Review"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1DistributedRating": {
      "type": "object",
      "properties": {
        "ratingName": {
          "type": "string"
        },
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "totalUsers": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Total User of Distributed rating"
    },
    "v1ListReviewHelpfulResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReviewHelpfulNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListReviewResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReviewNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListReviewsByUserResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReviewNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1Operator": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "GREATER",
        "LESS",
        "EQUAL",
        "GREATER_EQUAL",
        "LESS_EQUAL"
      ],
      "default": "UNKNOWN"
    },
    "v1Review": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "distributionRating": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          }
        },
        "overallRating": {
          "type": "string",
          "format": "int64",
          "title": "overall rating is the average of all the distribution rating"
        },
        "scale": {
          "type": "string",
          "format": "int64"
        },
        "likes": {
          "type": "string",
          "format": "int64",
          "title": "number of likes and dislikes of the review"
        },
        "dislikes": {
          "type": "string",
          "format": "int64"
        },
        "reviewerUserId": {
          "type": "string",
          "title": "Reviewer is the one who has given review e.g. customer"
        },
        "reviewerCustomerId": {
          "type": "string"
        },
        "reviewerName": {
          "type": "string"
        },
        "reviewerEmail": {
          "type": "string"
        },
        "reviewerImage": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "reviewerGender": {
          "$ref": "#/definitions/typesGender"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "appId": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        },
        "appEventId": {
          "type": "string"
        },
        "source": {
          "type": "string"
        },
        "sourceUrl": {
          "type": "string"
        },
        "anonymous": {
          "type": "boolean"
        },
        "dataCodeId": {
          "type": "string",
          "title": "data code will be stored against each review\ndata code is used to get information in client side from data code id"
        },
        "starred": {
          "type": "boolean"
        },
        "primaryFilterId": {
          "type": "string",
          "title": "TODO we will replace these filters with Json object as soon as we add option for json search in chaku"
        },
        "primaryFilterType": {
          "type": "string"
        },
        "secondaryFilterId": {
          "type": "string"
        },
        "secondaryFilterType": {
          "type": "string"
        },
        "imported": {
          "type": "boolean",
          "title": "review is imported or not"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "reviewUpdated": {
          "type": "boolean"
        }
      },
      "description": "Review Object\nid - string\ntitle - string = from ui\ndescription - string = from ui\ndistribution_rating - map<string, int> = from ui\noverall_rating - int = calculate-->Average rating of all the distributed rating\nscale - int = from dataCode\nlikes - int64 = 0\ndislike - int64 = 0\nreviewer = id from dataCode & rest from user-service according to setting\nuser_id - string\nname - string\nemail - string\nimage\ngender\nreviewed_on - date_time\nupdated_on - date_time\napp_id - string = from dataCode\napp_name - string = from dataCode\napp_event_id - string = from dataCode\nsource - enum = from dataCode\nanonymous - bool = from setting and request\ndata-code_id - string\nstar = How many star given by the end user.\n\n- create\nIt will simply create the review with following checks\n- It will fetch the Review_Distribution_rating setting of business and will match the names else throw the error\n- If anonymous is true then it will not store the user information. It will only store the user_id and other fields will be blank.\n- If anonymous is true in review request then it will also not store the reviewee information.\n\n- It will take the data code Id\n- update\nCustomer will be able to update the old given review.\n\n- It will take the data code Id\n\n- review-status\n- This endpoint will take the data-code and will return the status of the review (review given)\n- It will also return the source where review should be given. (yelp, google, saastack). It will fetch the setting from review page setting\n\nlist\n- same as previous\n\nsend manual email\n- same as previous"
    },
    "v1ReviewFilter": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "appIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customerId": {
          "type": "string"
        },
        "query": {
          "type": "string",
          "title": "reviewer name or email matching"
        },
        "starred": {
          "type": "boolean"
        },
        "primaryFilterId": {
          "type": "string",
          "title": "TODO will replace it later with json"
        },
        "primaryFilterType": {
          "type": "string"
        },
        "secondaryFilterId": {
          "type": "string"
        },
        "secondaryFilterType": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "operator": {
          "$ref": "#/definitions/v1Operator"
        },
        "overallRating": {
          "type": "string"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot"
        }
      }
    },
    "v1ReviewHelpful": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "wasHelpful": {
          "type": "boolean"
        }
      }
    },
    "v1ReviewHelpfulFilter": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reviewIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ReviewHelpfulNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1ReviewHelpful"
        }
      }
    },
    "v1ReviewManageAlgo": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "SAASTACK_ONLY",
        "OTHER"
      ],
      "default": "UNDEFINED"
    },
    "v1ReviewNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Review"
        }
      }
    },
    "v1ReviewPageSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "enable": {
          "type": "boolean"
        },
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReviewPageUrl"
          }
        },
        "algo": {
          "$ref": "#/definitions/v1ReviewManageAlgo"
        }
      },
      "description": "ReviewPageSetting..."
    },
    "v1ReviewPageUrl": {
      "type": "object",
      "properties": {
        "source": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1ReviewSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "distributionRatingNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "distributionScale": {
          "type": "string",
          "format": "int64"
        },
        "anonymous": {
          "type": "boolean"
        },
        "allowDistribution": {
          "type": "boolean"
        },
        "hideCustomer": {
          "type": "boolean"
        }
      },
      "description": "As a company admin, I want to manage the default distribution rating name,\nso that my customers can  see the relevant information for my business.\n\n- As a company admin, I want to list default distribution rating name,\nso that I can manage them.\n- It will have upsert logic. If location setting is not saved then it\nwill fetch the profession and fetch the default distribution rating\nname and return it else it will return the saved setting.\n- As a location admin, I want to upsert the distribution rating name,\nso that I can change them as per new need.",
      "title": "Review_setting\n- id string (company is parent)\n- distribution_rating_names []string\n- distribution_scale int (0-10)\n- anonymous bool"
    },
    "v1ReviewStatusResponse": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/v1Review"
        },
        "source": {
          "$ref": "#/definitions/v1ReviewPageUrl"
        }
      }
    },
    "v1SendReviewMailRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "appEventId": {
          "type": "string"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "message": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "subtitle": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "eventTime": {
          "type": "string"
        },
        "reviewId": {
          "type": "string"
        },
        "activity": {
          "type": "string"
        }
      },
      "title": "review id and title is useful in client side\ntitle and subtitle is event details ex: Appointment details"
    },
    "v1SortOrders": {
      "type": "string",
      "enum": [
        "DEFAULT",
        "HIGHEST_RATING",
        "LOWEST_RATING",
        "NEWEST"
      ],
      "default": "DEFAULT"
    },
    "v1StarRating": {
      "type": "object",
      "properties": {
        "averageRating": {
          "type": "number",
          "format": "double"
        },
        "totalUsers": {
          "type": "string",
          "format": "int64"
        },
        "ratingType": {
          "type": "string",
          "format": "int64"
        }
      },
      "title": "Star value should not be more than 5"
    },
    "v1UpsertReviewPageSettingRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "reviewPageSetting": {
          "$ref": "#/definitions/v1ReviewPageSetting"
        },
        "upsertMask": {
          "type": "string"
        }
      }
    },
    "v1UpsertReviewRequest": {
      "type": "object",
      "properties": {
        "review": {
          "$ref": "#/definitions/v1Review"
        },
        "upsertMask": {
          "type": "string"
        }
      }
    },
    "v1UpsertReviewSettingRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "reviewSetting": {
          "$ref": "#/definitions/v1ReviewSetting"
        },
        "upsertMask": {
          "type": "string"
        }
      },
      "title": "parent will be company id"
    },
    "v1GetTrackingURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "v1GetWebHookURLResponse": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string"
        }
      }
    },
    "BookingPortalSettingsUpsertBookingPortalGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "bookingPortalSetting": {
          "type": "object",
          "properties": {
            "enableBookingPortal": {
              "type": "boolean",
              "title": "Whether to enable booking portal for clients on location"
            },
            "removeBranding": {
              "type": "boolean",
              "title": "Whether to remove branding for a service or not"
            },
            "enabledLogins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Platforms through which login is enabled"
            },
            "uiSettings": {
              "type": "string",
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
            },
            "customerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "mandatoryCustomerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "enableGuestLogin": {
              "type": "boolean",
              "title": "Whether to enable guest login"
            },
            "menuOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultTab": {
              "type": "string"
            },
            "customCss": {
              "type": "string"
            },
            "template": {
              "type": "string"
            },
            "backgroundImage": {
              "type": "string"
            },
            "availableLanguages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "social": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "changeMask": {
              "type": "string"
            },
            "childrenSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
              },
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
            },
            "logoUrl": {
              "type": "string"
            },
            "showHomeMenu": {
              "type": "boolean"
            },
            "showAppointmentTab": {
              "type": "boolean"
            },
            "disableSignup": {
              "type": "boolean",
              "title": "This option will disable the create account option"
            },
            "protectedRoutes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Routes on which login is required on booking portal"
            },
            "announcementSetting": {
              "$ref": "#/definitions/v1AnnouncementSetting"
            }
          }
        }
      }
    },
    "BookingPortalSettingsUpsertBookingPortalSettingBody": {
      "type": "object",
      "properties": {
        "bookingPortalSetting": {
          "type": "object",
          "properties": {
            "enableBookingPortal": {
              "type": "boolean",
              "title": "Whether to enable booking portal for clients on location"
            },
            "removeBranding": {
              "type": "boolean",
              "title": "Whether to remove branding for a service or not"
            },
            "enabledLogins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Platforms through which login is enabled"
            },
            "uiSettings": {
              "type": "string",
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
            },
            "customerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "mandatoryCustomerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "enableGuestLogin": {
              "type": "boolean",
              "title": "Whether to enable guest login"
            },
            "menuOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultTab": {
              "type": "string"
            },
            "customCss": {
              "type": "string"
            },
            "template": {
              "type": "string"
            },
            "backgroundImage": {
              "type": "string"
            },
            "availableLanguages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "social": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "changeMask": {
              "type": "string"
            },
            "childrenSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
              },
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
            },
            "logoUrl": {
              "type": "string"
            },
            "showHomeMenu": {
              "type": "boolean"
            },
            "showAppointmentTab": {
              "type": "boolean"
            },
            "disableSignup": {
              "type": "boolean",
              "title": "This option will disable the create account option"
            },
            "protectedRoutes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Routes on which login is required on booking portal"
            },
            "announcementSetting": {
              "$ref": "#/definitions/v1AnnouncementSetting"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      },
      "title": "UpsertBookingPortalSettingRequest contains the booking-portal-setting object\nand the update mask\nThe update mask will be used to update a specific field in booking-portal-setting object"
    },
    "v1AnnouncementSetting": {
      "type": "object",
      "properties": {
        "bannerFormat": {
          "type": "string"
        }
      }
    },
    "v1BatchUpsertBookingPortalSettingRequest": {
      "type": "object",
      "properties": {
        "bookingPortalSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UpsertBookingPortalSettingRequest"
          }
        }
      }
    },
    "v1BatchUpsertBookingPortalSettingResponse": {
      "type": "object",
      "properties": {
        "bookingPortalSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BookingPortalSetting"
          }
        }
      }
    },
    "v1BookingPortalSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "settings are on company/location level"
        },
        "enableBookingPortal": {
          "type": "boolean",
          "title": "Whether to enable booking portal for clients on location"
        },
        "removeBranding": {
          "type": "boolean",
          "title": "Whether to remove branding for a service or not"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Platforms through which login is enabled"
        },
        "uiSettings": {
          "type": "string",
          "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
        },
        "customerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "mandatoryCustomerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "enableGuestLogin": {
          "type": "boolean",
          "title": "Whether to enable guest login"
        },
        "menuOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTab": {
          "type": "string"
        },
        "customCss": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "availableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "changeMask": {
          "type": "string"
        },
        "childrenSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
          },
          "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
        },
        "logoUrl": {
          "type": "string"
        },
        "showHomeMenu": {
          "type": "boolean"
        },
        "showAppointmentTab": {
          "type": "boolean"
        },
        "disableSignup": {
          "type": "boolean",
          "title": "This option will disable the create account option"
        },
        "protectedRoutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Routes on which login is required on booking portal"
        },
        "announcementSetting": {
          "$ref": "#/definitions/v1AnnouncementSetting"
        }
      }
    },
    "v1ChildrenBookingPortalSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "settings are on company/location level"
        },
        "enableBookingPortal": {
          "type": "boolean",
          "title": "Whether to enable booking portal for clients on location"
        },
        "removeBranding": {
          "type": "boolean",
          "title": "Whether to remove branding for a service or not"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Platforms through which login is enabled"
        },
        "uiSettings": {
          "type": "string",
          "title": "All UI related settings will be stored here as json"
        },
        "customerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "enableGuestLogin": {
          "type": "boolean",
          "title": "Whether to enable guest login"
        }
      }
    },
    "v1CustomerInformation": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_INFO",
        "FIRST_NAME",
        "LAST_NAME",
        "EMAIL",
        "ADDRESS",
        "ZIP",
        "CITY_STATE",
        "MOBILE_NUMBER"
      ],
      "default": "UNSPECIFIED_INFO",
      "title": "Information about the customer"
    },
    "v1ListBookingPortalSettingOfLocationsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BookingPortalSetting"
          }
        }
      }
    },
    "v1UpsertBookingPortalSettingRequest": {
      "type": "object",
      "properties": {
        "bookingPortalSetting": {
          "$ref": "#/definitions/v1BookingPortalSetting"
        },
        "updateMask": {
          "type": "string"
        }
      },
      "title": "UpsertBookingPortalSettingRequest contains the booking-portal-setting object\nand the update mask\nThe update mask will be used to update a specific field in booking-portal-setting object"
    },
    "CartServiceCartApplyDiscountBody": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        },
        "cartId": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        }
      }
    },
    "CartServiceCartRemoveDiscountBody": {
      "type": "object",
      "properties": {
        "cartId": {
          "type": "string"
        }
      }
    },
    "CartServiceValidatePublicDiscountBody": {
      "type": "object",
      "properties": {
        "cartId": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        }
      }
    },
    "v1AddCartPaymentSourcesRequest": {
      "type": "object",
      "properties": {
        "cartId": {
          "type": "string"
        },
        "cartPaymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartPaymentSource"
          }
        },
        "consumerPasscode": {
          "type": "string",
          "title": "ConsumerPasscode is the internal wallet passcode which will be applied in cart"
        },
        "consumerId": {
          "type": "string",
          "title": "ConsumerId is the id of the consumer for which passcode is attached"
        }
      }
    },
    "v1Cart": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent of cart is location"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartItem"
          }
        },
        "buyerId": {
          "type": "string",
          "title": "customer_id(empty in case of guest login)"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice",
          "title": "final price after adding tax and discount without saved payment-sources"
        },
        "tax": {
          "$ref": "#/definitions/typesPrice"
        },
        "cartType": {
          "$ref": "#/definitions/v1CartType"
        },
        "guest": {
          "type": "boolean",
          "title": "represent if cart is created using guest user or not"
        },
        "discountCode": {
          "type": "string",
          "title": "optional, discount applied on cart"
        },
        "discountedAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "cartPaymentSources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartPaymentSource"
          },
          "title": "just to hold payment-sources-info corresponding to cart"
        },
        "actualPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "buyerDetails": {
          "type": "string",
          "title": "contains buyer details(cart-customer object) to hold data for guest login case"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "to store additional data"
        },
        "policyData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartPolicyData"
          },
          "title": "to store policy data for order"
        },
        "timezone": {
          "type": "string"
        }
      }
    },
    "v1CartCustomer": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string",
          "title": "Unique email of the customer"
        },
        "firstName": {
          "type": "string",
          "title": "First name of the customer"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the customer"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date of Birth of the customer"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile Image"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Telephone/Mobile Numbers of the customer // Validation can be added for numbers"
        },
        "phoneNumber": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "title": "Address of the customer"
        },
        "gender": {
          "$ref": "#/definitions/typesGender",
          "title": "Gender of Customer"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Tags saved against by a customer"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the customer"
        },
        "preferredLanguage": {
          "type": "string",
          "title": "Preferred Languages of a customer"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the customer"
        }
      },
      "title": "fields of customer (copied)"
    },
    "v1CartDiscountType": {
      "type": "string",
      "enum": [
        "CartDiscountType_UNSPECIFIED",
        "PERCENTAGE",
        "FIXED"
      ],
      "default": "CartDiscountType_UNSPECIFIED"
    },
    "v1CartItemPaymentInfo": {
      "type": "object",
      "properties": {
        "cartItemId": {
          "type": "string"
        },
        "payLater": {
          "type": "boolean"
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1CartPaymentSource": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "sourceIdentifier": {
          "type": "string"
        },
        "itemId": {
          "type": "string"
        },
        "quantity": {
          "type": "integer",
          "format": "int64"
        },
        "consumptionType": {
          "$ref": "#/definitions/v1PaymentSourceConsumptionType"
        }
      },
      "title": "Payment sources just to hold payment-sources-info corresponding to cart\nwill be used while placing and paying for order"
    },
    "v1CartPolicyData": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string",
          "title": "cannot be repeated as different source-ids can be accepted at different times"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time",
          "description": "UI: Always check before placing order if latest versions are accepted or not."
        }
      }
    },
    "v1CartType": {
      "type": "string",
      "enum": [
        "CartType_UNSPECIFIED",
        "CLIENT_SIDE",
        "ADMIN_SIDE"
      ],
      "default": "CartType_UNSPECIFIED",
      "title": "CartType represents who has created: business-admins or end-customer"
    },
    "v1GetCartPaymentInfoResponse": {
      "type": "object",
      "properties": {
        "payLater": {
          "type": "boolean"
        },
        "minAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "cartItemPaymentInfos": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartItemPaymentInfo"
          }
        }
      }
    },
    "v1ListCartResponse": {
      "type": "object",
      "properties": {
        "cart": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Cart"
          }
        }
      }
    },
    "v1PaymentSourceConsumptionType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "QUANTITY",
        "AMOUNT"
      ],
      "default": "UNSPECIFIED"
    },
    "v1RemoveCartPaymentSourcesRequest": {
      "type": "object",
      "properties": {
        "cartId": {
          "type": "string"
        },
        "sourceIdentifier": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1UpsertCartRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent is location id"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartItem"
          },
          "title": "cart-items to be add/updated to cart"
        },
        "customerId": {
          "type": "string",
          "title": "validate against business"
        },
        "customer": {
          "$ref": "#/definitions/v1CartCustomer",
          "title": "create/get customer against business"
        },
        "cartType": {
          "$ref": "#/definitions/v1CartType",
          "title": "cart belongs to admin/client side"
        },
        "override": {
          "type": "boolean",
          "title": "to delete and override over old cart items, or to append to them"
        },
        "discountCode": {
          "type": "string",
          "title": "can be empty"
        },
        "timezone": {
          "type": "string",
          "title": "timezone to restrict discount (optional)"
        },
        "policyData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CartPolicyData"
          },
          "title": "to store policy data for order"
        },
        "applyPaymentMethods": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesPaymentMethod"
          }
        }
      }
    },
    "v1BatchCreateGiftCertificateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "levelGiftCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LevelGiftCertificate"
          }
        }
      }
    },
    "v1BatchCreateGiftCertificateResponse": {
      "type": "object",
      "properties": {
        "giftCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateGiftCertificateResponseWrapper"
          }
        }
      }
    },
    "v1BatchGetGiftCertificateRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetGiftCertificateResponse": {
      "type": "object",
      "properties": {
        "giftCertificate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GiftCertificate"
          }
        }
      }
    },
    "v1CreateGiftCertificateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given gift-certificate\nlike business/group."
        },
        "giftCertificate": {
          "$ref": "#/definitions/v1GiftCertificate"
        },
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateGiftCertificateResponseWrapper": {
      "type": "object",
      "properties": {
        "giftCertificate": {
          "$ref": "#/definitions/v1GiftCertificate"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1GetGiftCertificateLinkingResponse": {
      "type": "object",
      "properties": {
        "giftCertificates": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GiftCertificate"
          }
        }
      }
    },
    "v1GiftCertificate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "Title of the gift certificate"
        },
        "description": {
          "type": "string",
          "title": "description of the gift certificate"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery",
          "title": "Images in gift certificate"
        },
        "variants": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Variant"
          },
          "title": "Different priced variants"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata for storing additional information like : color"
        },
        "settings": {
          "$ref": "#/definitions/v1GiftCertificateSettings",
          "title": "different gift certificate settings"
        },
        "enableForSale": {
          "type": "boolean",
          "title": "Is the gift certificate allowed for purchase from client side"
        },
        "eventType": {
          "type": "string",
          "title": "Used to group gift certificates by an event : eg: halloween"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "title": "time at which the gift certificate was created"
        },
        "batchId": {
          "type": "string",
          "title": "used to group the gift certificate when created by a batch request"
        },
        "baseId": {
          "type": "string",
          "title": "used in linking gift certificates at different levels"
        },
        "consumedCount": {
          "type": "integer",
          "format": "int32",
          "title": "specifies the consumed count"
        }
      }
    },
    "v1GiftCertificateNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the GiftCertificate list\neg :row number"
        },
        "node": {
          "$ref": "#/definitions/v1GiftCertificate",
          "title": "Node contains the actual GiftCertificate object"
        }
      }
    },
    "v1GiftCertificateSettings": {
      "type": "object",
      "properties": {
        "numberForSale": {
          "type": "integer",
          "format": "int32",
          "title": "How many gift cards to be sold on client side"
        },
        "variantMinAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "How much amount can be of variant maximum amount"
        },
        "variantMaxAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "How much amount can be of variant minimum amount"
        },
        "expireDuration": {
          "type": "string",
          "title": "Till how much time, the gift certificate can be used after purchase in days"
        },
        "purchaseWindowStart": {
          "type": "string",
          "format": "date-time",
          "title": "From which date, the gift certificate can be purchased"
        },
        "purchaseWindowEnd": {
          "type": "string",
          "format": "date-time",
          "title": "Till which date, the gift certificate can be purchased"
        },
        "allowClientImage": {
          "type": "boolean",
          "title": "Allow client to modify the image"
        }
      }
    },
    "v1LevelGiftCertificate": {
      "type": "object",
      "properties": {
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "giftCertificate": {
          "$ref": "#/definitions/v1GiftCertificate"
        }
      }
    },
    "v1ListGiftCertificateResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GiftCertificateNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of GiftCertificate with their rowNumber"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      }
    },
    "v1Variant": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "purchasingPrice": {
          "$ref": "#/definitions/typesPrice",
          "title": "purchasing price is the price at which the consumer consumes the GC"
        }
      },
      "title": "Variants are different price types of Gift certificates"
    },
    "v1BatchGetTopUpResponse": {
      "type": "object",
      "properties": {
        "topUp": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TopUp"
          }
        }
      }
    },
    "v1ConfirmTopUpResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice",
          "title": "amount that has to be refunded for the gift-certificate wallet"
        },
        "walletId": {
          "type": "string"
        }
      }
    },
    "v1CreateTopUpRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent is wallet_id"
        },
        "topUp": {
          "$ref": "#/definitions/v1TopUp"
        },
        "purchasedAt": {
          "type": "string"
        }
      }
    },
    "v1RefundTopUpResponse": {
      "type": "object",
      "properties": {
        "transactionId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice",
          "title": "amount that has to be refunded for the gift-certificate wallet"
        },
        "walletId": {
          "type": "string"
        }
      }
    },
    "v1TopUp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "walletId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ValidateTopUpParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "ResourceTypesUpdateResourceTypeBody": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "name of the resources type"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "$ref": "#/definitions/typesGalleryItem"
            },
            "capacity": {
              "type": "string",
              "format": "int64",
              "title": "only resource type of non-identifiable type can have capacity"
            },
            "resourceTypesType": {
              "$ref": "#/definitions/v1ResourceTypesType"
            },
            "active": {
              "type": "boolean"
            },
            "internal": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "hasOpenHours": {
              "type": "boolean"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "templateId": {
              "type": "string",
              "title": "for company-level resource-type template-id will be empty\nfor location-level resource-type template-id is compulsory"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the user Profile object can be updated.\nList of fields which can be updated are  :\nName, Description, Metadata"
        }
      }
    },
    "ResourceTypesUpdateResourceTypeDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "title": "for internal use"
        },
        "oldOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchCreateResourceTypeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1BatchCreateResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1BatchGetResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1CreateResourceTypeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/v1ResourceType"
        }
      }
    },
    "v1GetResourceTypeCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1ResourceTypeFilterInput": {
      "type": "object",
      "properties": {
        "resourceTypesType": {
          "$ref": "#/definitions/v1ResourceTypesType"
        }
      }
    },
    "v1ResourceTypesType": {
      "type": "string",
      "enum": [
        "IDENTIFIABLE",
        "NON_IDENTIFIABLE"
      ],
      "default": "IDENTIFIABLE"
    },
    "AddonsUpdateAddonBody": {
      "type": "object",
      "properties": {
        "addon": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "addonType": {
              "type": "string",
              "title": "This field will be used by the UI for display purpose.\nIt can be List, checkbox or other input type"
            },
            "items": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1AddonItem"
              },
              "title": "items contains actual information about the addons"
            },
            "priority": {
              "type": "integer",
              "format": "int32",
              "title": "priority decide the actual display order in UI"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "mandatory": {
              "type": "boolean"
            },
            "hideFromCustomer": {
              "type": "boolean"
            }
          }
        },
        "linkedIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1Addon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "addonType": {
          "type": "string",
          "title": "This field will be used by the UI for display purpose.\nIt can be List, checkbox or other input type"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AddonItem"
          },
          "title": "items contains actual information about the addons"
        },
        "priority": {
          "type": "integer",
          "format": "int32",
          "title": "priority decide the actual display order in UI"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "mandatory": {
          "type": "boolean"
        },
        "hideFromCustomer": {
          "type": "boolean"
        }
      }
    },
    "v1AddonItem": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "hasInventory": {
          "type": "boolean"
        },
        "productSkewId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchGetAddonRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetAddonResponse": {
      "type": "object",
      "properties": {
        "addon": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Addon"
          }
        }
      }
    },
    "v1CreateAddonRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "linkedIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "addon": {
          "$ref": "#/definitions/v1Addon"
        }
      }
    },
    "v1ListAddonResponse": {
      "type": "object",
      "properties": {
        "addon": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Addon"
          }
        }
      }
    },
    "v1ListUserSessionResponse": {
      "type": "object",
      "properties": {
        "sessions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserSession"
          }
        }
      }
    },
    "v1UserSession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "UserAgent": {
          "type": "string"
        },
        "IP": {
          "type": "string"
        },
        "loginAt": {
          "type": "string",
          "format": "date-time"
        },
        "location": {
          "$ref": "#/definitions/typesAddress"
        }
      }
    },
    "NotificationEventSettingsServiceUpsertNotificationEventSettingByEventBody": {
      "type": "object",
      "properties": {
        "eventSettings": {
          "$ref": "#/definitions/v1EventSettings",
          "title": "all fields will be overridden"
        }
      }
    },
    "NotificationEventSettingsServiceUpsertNotificationEventSettingsBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventSetting"
          }
        }
      }
    },
    "NotificationReceiversUpsertNotificationReceiverBody": {
      "type": "object",
      "properties": {
        "receiver": {
          "type": "object",
          "properties": {
            "templateId": {
              "type": "string"
            },
            "businessId": {
              "type": "string"
            },
            "productMandatory": {
              "type": "boolean",
              "title": "if product_mandatory == true, template is mandatory (i.e. template's can_override = false)\nand can not be skipped in product"
            },
            "businessMandatory": {
              "type": "boolean",
              "title": "business_mandatory field is set by business and defines whether the template\n can be opt out by their users (only for template for which product_mandatory = false)"
            },
            "businessEnabled": {
              "type": "boolean",
              "title": "business_enabled field is set by business and defines whether the template type\n is enabled to be send (only for template for which product_mandatory = false)"
            },
            "channelType": {
              "$ref": "#/definitions/typesChannelType",
              "title": "channel_type like Email, Sms, etc"
            },
            "eventType": {
              "type": "string",
              "title": "event_type like Appointment_Created, etc"
            },
            "roleIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Send notifications to (Roles, List of emails, Roles that are involved in event)\n     1. []Role Ids\n     2. List of emails\n     3. Involved users in event"
            },
            "emailLists": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "involved": {
              "type": "boolean"
            },
            "allowedRoleIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "AllowedRoleIds for RoleIds"
            },
            "allowAllCustomRoles": {
              "type": "boolean",
              "title": "AllowCustomRoleIds"
            },
            "replyToRoleId": {
              "type": "string",
              "description": "ReplyToRoleId will find all users of the role and add them to the reply to or contact\nto list of the notification.\nAnd if the CompanyCustomization.ReplyTo value is set, that will be used, not this role id."
            },
            "includeInvolvedInReplyTo": {
              "type": "boolean"
            }
          }
        },
        "upsertMask": {
          "type": "string",
          "title": "upsert_mask is only used when the receiver provided is found in store"
        }
      }
    },
    "NotificationSettingServiceUpsertNotificationSettingsBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "enabled": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesChannelType"
          }
        },
        "skipIcs": {
          "type": "boolean",
          "title": "deprecated"
        },
        "skipIcsAdmin": {
          "type": "boolean"
        },
        "skipIcsClient": {
          "type": "boolean"
        }
      }
    },
    "v1AdminClientSideNotification": {
      "type": "string",
      "enum": [
        "None",
        "ClientSide",
        "AdminSide"
      ],
      "default": "None"
    },
    "v1AllEventSettingsWithPaginationResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationEventSettings"
          }
        },
        "info": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1BatchGetNotificationReceiverByTemplateResponse": {
      "type": "object",
      "properties": {
        "notificationReceiver": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationReceiver"
          }
        }
      },
      "title": "BatchGetNotificationReceiverByTemplateResponse contains the list of NotificationReceivers given in the request object"
    },
    "v1BatchUpsertNotificationReceiverRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "receivers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationReceiver"
          }
        },
        "upsertMask": {
          "type": "string"
        }
      }
    },
    "v1BatchUpsertNotificationReceiverResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationReceiverWrapper"
          }
        }
      }
    },
    "v1EventSetting": {
      "type": "object",
      "properties": {
        "adminOrClient": {
          "$ref": "#/definitions/v1AdminClientSideNotification"
        },
        "eventType": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "enabled": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesChannelType"
          }
        },
        "sendReminderBeforeSeconds": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "int64"
          },
          "title": "channel_type -> seconds before reminder is required\ndefault is 30*60 seconds"
        }
      }
    },
    "v1EventSettings": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventSetting"
          }
        }
      }
    },
    "v1ListNotificationReceiverResponse": {
      "type": "object",
      "properties": {
        "notificationReceiver": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationReceiver"
          }
        }
      },
      "title": "ListNotificationReceiverResponse contains the list of notification receivers"
    },
    "v1NotificationEventSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EventSetting"
          }
        }
      }
    },
    "v1NotificationReceiver": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "productMandatory": {
          "type": "boolean",
          "title": "if product_mandatory == true, template is mandatory (i.e. template's can_override = false)\nand can not be skipped in product"
        },
        "businessMandatory": {
          "type": "boolean",
          "title": "business_mandatory field is set by business and defines whether the template\n can be opt out by their users (only for template for which product_mandatory = false)"
        },
        "businessEnabled": {
          "type": "boolean",
          "title": "business_enabled field is set by business and defines whether the template type\n is enabled to be send (only for template for which product_mandatory = false)"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType",
          "title": "channel_type like Email, Sms, etc"
        },
        "eventType": {
          "type": "string",
          "title": "event_type like Appointment_Created, etc"
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Send notifications to (Roles, List of emails, Roles that are involved in event)\n     1. []Role Ids\n     2. List of emails\n     3. Involved users in event"
        },
        "emailLists": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "involved": {
          "type": "boolean"
        },
        "allowedRoleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "AllowedRoleIds for RoleIds"
        },
        "allowAllCustomRoles": {
          "type": "boolean",
          "title": "AllowCustomRoleIds"
        },
        "replyToRoleId": {
          "type": "string",
          "description": "ReplyToRoleId will find all users of the role and add them to the reply to or contact\nto list of the notification.\nAnd if the CompanyCustomization.ReplyTo value is set, that will be used, not this role id."
        },
        "includeInvolvedInReplyTo": {
          "type": "boolean"
        }
      }
    },
    "v1NotificationReceiverWrapper": {
      "type": "object",
      "properties": {
        "receiver": {
          "$ref": "#/definitions/v1NotificationReceiver"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1NotificationSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "enabled": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/typesChannelType"
          }
        },
        "skipIcs": {
          "type": "boolean",
          "title": "deprecated"
        },
        "skipIcsAdmin": {
          "type": "boolean"
        },
        "skipIcsClient": {
          "type": "boolean"
        }
      }
    },
    "CompanyMastersUpdateCompanyMasterBody": {
      "type": "object",
      "properties": {
        "companyMaster": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetCompanyMasterByParentsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ListCompanyMasterResponse"
          }
        }
      }
    },
    "v1BatchGetCompanyMasterResponse": {
      "type": "object",
      "properties": {
        "companyMaster": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyMaster"
          }
        }
      }
    },
    "v1CompanyMaster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateCompanyMasterRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "companyMaster": {
          "$ref": "#/definitions/v1CompanyMaster"
        }
      }
    },
    "v1ListCompanyMasterResponse": {
      "type": "object",
      "properties": {
        "companyMaster": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyMaster"
          }
        }
      }
    },
    "MatchingRulesUpdateMatchingRuleBody": {
      "type": "object",
      "properties": {
        "matchingRule": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "v1CreateMatchingRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "matchingRule": {
          "$ref": "#/definitions/v1MatchingRule"
        }
      }
    },
    "v1ListMatchingRuleResponse": {
      "type": "object",
      "properties": {
        "matchingRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MatchingRule"
          }
        }
      }
    },
    "v1MatchingRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CalendarEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        },
        "externalEventId": {
          "type": "string"
        },
        "externalCalendarId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Calendar Event service\n        - As a Product owner, I want to make a separate service for the external calendar events so that same implementation can be used for the different meetings/ calendar integrations.\n        DOD:\n        * Calendar Event will have the following fields\n            - Id\n            - BusinessId\n            - AppointmentId\n            - ExternalEventId\n            - ExternalCalendarId\n            - UserId\n            - IntegrationType\n            - Data (map<string, string>)\n            - All 7 Meta fields (is deleted, delete_on etc)\n        * This calendar service will be used by all the Calendar and Meeting integration\n        * It will have only 3 methods\n            - GetByAppointmentIds (appointment_ids, business_id, integration_type)\n                * will take multiple appointment ids and return the list of calendar events within one business\n            - GetByExternalIds(external_events_ids, business_id, integration_type)\n                * will take multiple external event ids and return the list of calendar events within one business\n            - Insert ([]CalendarEvents)\n                * It will insert the value into the database\n            - Delete ([]CalendarEvents)\n                * It will mark entry as deleted into the database"
    },
    "v1ListByAppointmentIds": {
      "type": "object",
      "properties": {
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListByExternalIds": {
      "type": "object",
      "properties": {
        "externalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListCalendarEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarEvent"
          }
        }
      }
    },
    "v1MeetingEvent": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "externalMeetingId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "accessToken": {
          "type": "string"
        },
        "externalCalendarId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "joinUrl": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1MeetingIntegrationTypeResponse": {
      "type": "object",
      "properties": {
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1ListZoomCalendarEmployeeLinkingResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomCalendarEmployeeLink"
          }
        }
      }
    },
    "v1ListZoomUsersResponse": {
      "type": "object",
      "properties": {
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomUser"
          }
        }
      }
    },
    "v1UpdateZoomCalendarEmployeeLinkingRequest": {
      "type": "object",
      "properties": {
        "businessId": {
          "type": "string"
        },
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomCalendarEmployeeLink"
          }
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "employeeNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "businessName": {
          "type": "string"
        }
      }
    },
    "v1UpdateZoomCalendarEmployeeLinkingResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ZoomCalendarEmployeeLink"
          }
        }
      }
    },
    "v1ZoomApprovalTypeSetting": {
      "type": "string",
      "enum": [
        "AutomaticallyApprove",
        "ManuallyApprove",
        "NoRegistrationRequired"
      ],
      "default": "AutomaticallyApprove"
    },
    "v1ZoomCalendarEmployeeLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "externalCalendarId": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "integrationId": {
          "type": "string"
        },
        "level": {
          "$ref": "#/definitions/v1ZoomIntegrationLevel"
        }
      }
    },
    "v1ZoomInformation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "setting": {
          "$ref": "#/definitions/v1ZoomSetting"
        },
        "allowedServices": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ZoomIntegrationLevel": {
      "type": "string",
      "enum": [
        "Location",
        "Employee"
      ],
      "default": "Location"
    },
    "v1ZoomRegistrationTypeSetting": {
      "type": "string",
      "enum": [
        "UnusedSetting",
        "RegisteredOnceAndCanAttendAny",
        "NeedToRegister",
        "RegisteredOnceAndCanChooseOneOrMore"
      ],
      "default": "UnusedSetting"
    },
    "v1ZoomSetting": {
      "type": "object",
      "properties": {
        "hostVideo": {
          "type": "boolean"
        },
        "participantVideo": {
          "type": "boolean"
        },
        "cnMeeting": {
          "type": "boolean"
        },
        "inMeeting": {
          "type": "boolean"
        },
        "joinBeforeHost": {
          "type": "boolean"
        },
        "muteUponEntry": {
          "type": "boolean"
        },
        "watermark": {
          "type": "boolean"
        },
        "usePmi": {
          "type": "boolean"
        },
        "approvalType": {
          "$ref": "#/definitions/v1ZoomApprovalTypeSetting",
          "title": "approval_type default value is NoRegistrationRequired"
        },
        "registrationType": {
          "$ref": "#/definitions/v1ZoomRegistrationTypeSetting",
          "title": "registration_type default value is RegisteredOnceAndCanAttendAny"
        },
        "audio": {
          "type": "string"
        },
        "autoRecording": {
          "type": "string"
        },
        "enforceLogin": {
          "type": "boolean"
        },
        "enforceLoginDomains": {
          "type": "string"
        },
        "alternativeHosts": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "use alternative_hosts as single field multiple values separated by commas"
        },
        "closeRegistration": {
          "type": "boolean"
        },
        "waitingRoom": {
          "type": "boolean"
        },
        "globalDialInCountries": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "contactName": {
          "type": "string"
        },
        "contactEmail": {
          "type": "string"
        },
        "registrantsEmailNotification": {
          "type": "boolean"
        },
        "meetingAuthentication": {
          "type": "boolean"
        }
      }
    },
    "v1ZoomUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "pmi": {
          "type": "string",
          "format": "int64"
        },
        "timezone": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "format": "int64"
        },
        "verified": {
          "type": "string",
          "format": "int64"
        },
        "lastLoginTime": {
          "type": "string",
          "format": "date-time"
        },
        "picUrl": {
          "type": "string"
        },
        "dept": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ListSupportLinkResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SupportLink"
          }
        }
      }
    },
    "v1SupportLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "data": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CalendarSyncStatusOfEmployee": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "oneWaySync": {
          "type": "boolean"
        },
        "twoWaySync": {
          "type": "boolean"
        }
      }
    },
    "v1EmployeeSyncedCalendar": {
      "type": "object",
      "properties": {
        "calendarName": {
          "type": "string"
        },
        "integratedAccountName": {
          "type": "string"
        },
        "oneWaySync": {
          "type": "boolean"
        },
        "twoWaySync": {
          "type": "boolean"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1FetchCalendarSyncStatusOfEmployeesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarSyncStatusOfEmployee"
          }
        }
      }
    },
    "v1FetchEmployeeSyncedCalendarsResponse": {
      "type": "object",
      "properties": {
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeSyncedCalendar"
          }
        }
      }
    },
    "v1CreateUserLoginImportResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier of the user"
        },
        "externalLogins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExternalLogin"
          },
          "title": "External_logins contain list of external logins"
        }
      }
    },
    "v1CreateUserLoginResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier of the user"
        },
        "externalLogins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExternalLogin"
          },
          "title": "External_logins contain list of external logins"
        }
      }
    },
    "v1ExternalLogin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "done for chaku, no other significance"
        },
        "externalId": {
          "type": "string",
          "title": "ExternalId is the unique external id provided by the third party login"
        },
        "provider": {
          "type": "string",
          "title": "Provider is the unique id of the third party login provider like facebook\n,Google"
        }
      }
    },
    "v1ListUserExternalLoginsResponse": {
      "type": "object",
      "properties": {
        "externalLogins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExternalLogin"
          },
          "title": "List of external logins"
        }
      }
    },
    "v1User": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is required for chaku as prefix is not provided"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        }
      }
    },
    "v1UserLogin": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier of the user i.e its profile id"
        },
        "password": {
          "type": "string",
          "title": "password of the user, this will be saved as hashed in our system\nShould be at least 8 character and maximums 72 characters long with numeric\nand alphabet"
        },
        "passwordChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "externalLogins": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExternalLogin"
          },
          "title": "ExternalLogins detail e.g. Google login or facebook login"
        }
      }
    },
    "v1ValidateProviderResponse": {
      "type": "object",
      "properties": {
        "provider": {
          "type": "string"
        }
      }
    },
    "v1ValidateUserLoginResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the user Unique identifier"
        }
      }
    },
    "ServicesUpdateServiceBody": {
      "type": "object",
      "properties": {
        "service": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "Title of the service"
            },
            "description": {
              "type": "string",
              "title": "Description of service"
            },
            "durations": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Duration in minutes for which the service will be performed."
            },
            "categoryId": {
              "type": "string",
              "description": "Category to which a service belongs(optional)."
            },
            "active": {
              "type": "boolean",
              "description": "Status represents the type of service: external/internal/link-only",
              "title": "Is the service currently active and can it be booked or not"
            },
            "status": {
              "$ref": "#/definitions/servicev1Status"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "policyId": {
              "type": "string"
            },
            "capacity": {
              "type": "string",
              "format": "int64"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "templateId": {
              "type": "string"
            },
            "internal": {
              "type": "boolean"
            },
            "preBufferTime": {
              "type": "integer",
              "format": "int32",
              "title": "Pre service buffer time in seconds"
            },
            "postBufferTime": {
              "type": "integer",
              "format": "int32",
              "title": "Post service buffer time in seconds"
            },
            "serviceType": {
              "$ref": "#/definitions/v1ServiceType",
              "title": "service type"
            },
            "changedSettings": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "changed settings fields"
            }
          },
          "title": "NOTE: The new fields are to be added in graphql"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the given Service object that can be updated."
        }
      }
    },
    "ServicesUpdateServiceDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "categoryId": {
          "type": "string"
        },
        "title": {
          "type": "string",
          "title": "for internal use"
        },
        "oldOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "servicev1Status": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "INTERNAL",
        "EXTERNAL",
        "LINK_ONLY"
      ],
      "default": "UNSPECIFIED",
      "description": " - UNSPECIFIED: Service status unspecified.\n - INTERNAL: Service can only be booked through the administrator portal,\ni.e., by service providers, managers, admins, etc.\n - EXTERNAL: Service can be booked from both the client booking portal and the administrator portal,\ni.e., by employees and customers.\n - LINK_ONLY: Service can only be booked by those having the unique link generated corresponding to the service."
    },
    "v1BatchCreateServiceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/ group."
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        },
        "copyTemplateSettings": {
          "type": "boolean"
        }
      }
    },
    "v1BatchCreateServiceResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FailedService"
          }
        }
      }
    },
    "v1BatchGetServiceByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "serviceByIdLocale": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceByIdLocale"
          }
        }
      }
    },
    "v1BatchGetServiceByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocale"
          }
        }
      }
    },
    "v1BatchGetServiceByParentLocaleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchGetServiceByParentLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocale"
          }
        }
      }
    },
    "v1BatchGetServiceByParentsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServicesList"
          }
        }
      }
    },
    "v1BatchGetServiceResponse": {
      "type": "object",
      "properties": {
        "service": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        }
      }
    },
    "v1BatchServiceLocaleUpsertRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "override": {
          "type": "boolean"
        },
        "serviceLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocale"
          }
        }
      }
    },
    "v1BatchServiceLocaleUpsertResponse": {
      "type": "object",
      "properties": {
        "serviceLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocale"
          }
        }
      }
    },
    "v1BatchUpdateServicesRequest": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "reference": {
          "$ref": "#/definitions/v1Service"
        },
        "updateMask": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categoryTitle": {
          "type": "string"
        }
      }
    },
    "v1BulkCreateServiceFromTemplateRequest": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "templateIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "copyTemplateSettings": {
          "type": "boolean"
        }
      }
    },
    "v1BulkCreateServiceFromTemplateResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BulkCreateServiceFromTemplateResponseWrapper"
          }
        }
      }
    },
    "v1BulkCreateServiceFromTemplateResponseWrapper": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "response": {
          "$ref": "#/definitions/v1BatchCreateServiceResponse"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ChangeServiceSetting": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "changedSettings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CopyServiceByParentRequest": {
      "type": "object",
      "properties": {
        "sourceParent": {
          "type": "string"
        },
        "destinationParent": {
          "type": "string"
        }
      }
    },
    "v1CopyServiceByParentResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FailedService"
          }
        }
      }
    },
    "v1CreateServiceFromTemplateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/ group."
        },
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "copyTemplateSettings": {
          "type": "boolean"
        }
      }
    },
    "v1CreateServiceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/ group."
        },
        "service": {
          "$ref": "#/definitions/v1Service"
        }
      }
    },
    "v1FailedService": {
      "type": "object",
      "properties": {
        "service": {
          "$ref": "#/definitions/v1Service"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1GetEmployeesOfServiceCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetPolicyTriggersResponse": {
      "type": "object",
      "properties": {
        "triggers": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServicePolicyTrigger"
          }
        }
      }
    },
    "v1GetServiceByIdLocaleRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locales": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1GetServiceByIdLocaleResponse": {
      "type": "object",
      "properties": {
        "serviceLocales": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocale"
          }
        }
      }
    },
    "v1GetServiceCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListAllServicesResponse": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        }
      }
    },
    "v1ListServiceFilters": {
      "type": "object",
      "properties": {
        "active": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "internal": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "categoryIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/servicev1Status"
          }
        },
        "types": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1ServiceType"
          }
        },
        "changedSetting": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "availability": {
          "$ref": "#/definitions/typesBooleanFilter"
        }
      }
    },
    "v1ListServiceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceNode"
          },
          "title": "List of Service nodes which contains Service and its position in the list"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        },
        "count": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "active": {
          "type": "boolean",
          "title": "default inactive in create"
        },
        "isDefault": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "oneTimeAcceptance": {
          "type": "boolean",
          "title": "one_time_acceptance: if true specifies that the policy is accepted only\nonce or only when a new version is published.\nAnd when it is false, the policy will be accepted every time the source\nis invoked or used"
        },
        "trigger": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyVersion"
          }
        },
        "policyType": {
          "$ref": "#/definitions/v1PolicyType"
        }
      },
      "description": "Policy object contains the meta-information of Policy\nIt contains multiple PolicyVersions only latest will be active."
    },
    "v1PolicySourceLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1PolicyType": {
      "type": "string",
      "enum": [
        "Policy_UNKNOWN",
        "Display",
        "Acceptance",
        "Signature",
        "Announcement"
      ],
      "default": "Policy_UNKNOWN"
    },
    "v1PolicyVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "versionCreatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "published": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "PolicyVersion contains the content of policy.\nMultiple versions can be saved for a policy but only one can be active"
    },
    "v1PolicyWrapper": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        },
        "sourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ServiceAttachDetachPolicyRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        },
        "link": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicySourceLink"
          }
        }
      }
    },
    "v1ServiceAttachPolicyRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "sourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ServiceByIdLocale": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locale": {
          "type": "string"
        }
      }
    },
    "v1ServiceDetachPolicyRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "sourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ServiceListPoliciesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyWrapper"
          }
        }
      }
    },
    "v1ServiceLocale": {
      "type": "object",
      "properties": {
        "serviceLocalesData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceLocaleData"
          }
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1ServiceLocaleData": {
      "type": "object",
      "properties": {
        "serviceLocaleValue": {
          "$ref": "#/definitions/v1ServiceLocaleValue"
        },
        "locale": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        }
      }
    },
    "v1ServiceLocaleValue": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1ServiceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "It is the current position of the cursor in the Service list eg: row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1Service",
          "title": "Information about the service node"
        }
      }
    },
    "v1ServicePolicyTrigger": {
      "type": "string",
      "enum": [
        "Undefined",
        "BeforeAppointment",
        "AfterAppointment",
        "InEmail"
      ],
      "default": "Undefined"
    },
    "v1ServiceType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "IN_STORE",
        "VIRTUAL",
        "AT_HOME"
      ],
      "default": "UNKNOWN"
    },
    "v1ServicesList": {
      "type": "object",
      "properties": {
        "parentId": {
          "type": "string"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Service"
          }
        }
      }
    },
    "v1ServicesListSortBy": {
      "type": "string",
      "enum": [
        "ServiceId",
        "ServiceTitle"
      ],
      "default": "ServiceId"
    },
    "v1UpdateServiceChangedSettingsRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChangeServiceSetting"
          }
        }
      }
    },
    "v1MailSetting": {
      "type": "object",
      "properties": {
        "sendAutomatic": {
          "type": "boolean"
        },
        "enableReview": {
          "type": "boolean"
        },
        "appName": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        }
      }
    },
    "v1ReviewMailSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "mailSetting": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1MailSetting"
          }
        }
      },
      "title": "Parent will be company id"
    },
    "v1UpsertReviewMailSettingRequest": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "reviewMailSetting": {
          "$ref": "#/definitions/v1ReviewMailSetting"
        },
        "appNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ResourcesUpdateResourceBody": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "Title of Resource"
            },
            "description": {
              "type": "string",
              "title": "Description of Resource"
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery",
              "title": "image of resource"
            },
            "resourceTypeId": {
              "type": "string",
              "title": "types of resource eg: room, service"
            },
            "quantity": {
              "type": "integer",
              "format": "int64",
              "title": "deprecated"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "capacity": {
              "type": "string",
              "format": "int64",
              "title": "deprecated"
            },
            "active": {
              "type": "boolean"
            },
            "internal": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "createdBy": {
              "type": "string",
              "title": "meta details\nCreated by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "ResourcesUpdateResourceDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "for internal use"
        },
        "oldOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchCreateResourceRequest": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateResourceRequest"
          }
        }
      }
    },
    "v1BatchCreateResourceResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "v1BatchGetResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "v1CreateResourceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1Resource"
        }
      }
    },
    "v1GetResourceCountResponse": {
      "type": "object",
      "properties": {
        "resourceCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourcesCount"
          }
        }
      }
    },
    "v1ListResourceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ResourceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Resource"
        }
      }
    },
    "v1ResourcesCount": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchCreateSurveyLogResponse": {
      "type": "object",
      "properties": {
        "surveyLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyLog"
          }
        }
      }
    },
    "v1BatchGetSurveyIntakeFormLinkResponse": {
      "type": "object",
      "properties": {
        "surveyIntakeFormLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyIntakeFormLink"
          }
        }
      }
    },
    "v1BatchGetSurveyLogByTimeResponse": {
      "type": "object",
      "properties": {
        "surveyLogs": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyLog"
          }
        }
      }
    },
    "v1CreateSurveySubmissionByDataCodeRequest": {
      "type": "object",
      "properties": {
        "dataCode": {
          "type": "string"
        },
        "formSubmissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        }
      }
    },
    "v1CreateSurveySubmissionByDataCodeResponse": {
      "type": "object",
      "properties": {
        "surveyDataCode": {
          "$ref": "#/definitions/v1SurveyDataCode"
        },
        "submittedByName": {
          "type": "string"
        }
      }
    },
    "v1ListSurveyIntakeFormLinkResponse": {
      "type": "object",
      "properties": {
        "surveyIntakeFormLink": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyIntakeFormLink"
          }
        }
      }
    },
    "v1RetryOptions": {
      "type": "object",
      "properties": {
        "maxLimit": {
          "type": "integer",
          "format": "int32"
        },
        "sentCount": {
          "type": "integer",
          "format": "int32"
        },
        "nextSendOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SurveyDataCode": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "intakeFormIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "submittedById": {
          "type": "string"
        }
      }
    },
    "v1SurveyIntakeFormLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locationId": {
          "type": "string",
          "title": "fields"
        },
        "intakeFormId": {
          "type": "string"
        },
        "surveyType": {
          "$ref": "#/definitions/v1SurveyType"
        },
        "sendEmail": {
          "type": "boolean"
        }
      },
      "title": "SurveyIntakeFormLink works on location level, initially it was designed to work on company level"
    },
    "v1SurveyLog": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        },
        "sentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sent": {
          "type": "boolean"
        },
        "appointmentEndTime": {
          "type": "string",
          "format": "date-time"
        },
        "retryOption": {
          "$ref": "#/definitions/v1RetryOptions"
        }
      }
    },
    "v1SurveyType": {
      "type": "string",
      "enum": [
        "ADMIN_FACING",
        "CLIENT_FACING"
      ],
      "default": "ADMIN_FACING"
    },
    "v1UpsertSurveyIntakeFormLinkRequest": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "surveyIntakeFormLink": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyIntakeFormLink"
          }
        }
      }
    },
    "v1UpsertSurveyIntakeFormLinkResponse": {
      "type": "object",
      "properties": {
        "surveyIntakeFormLink": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SurveyIntakeFormLink"
          }
        },
        "locationName": {
          "type": "string",
          "title": "only for activity_logs"
        }
      }
    },
    "v1BatchGetProfessionByNameResponse": {
      "type": "object",
      "properties": {
        "profession": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Profession"
          }
        }
      }
    },
    "v1DataFill": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DataSuggestion": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DefaultAlias": {
      "type": "object",
      "properties": {
        "singular": {
          "type": "string"
        },
        "plural": {
          "type": "string"
        }
      }
    },
    "v1Feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1ListProfessionResponse": {
      "type": "object",
      "properties": {
        "profession": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Profession"
          }
        }
      }
    },
    "v1Profession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "setupData": {
          "$ref": "#/definitions/v1SetupData",
          "title": "This will be stored into db at the time of wizard"
        },
        "dataSuggestion": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataSuggestion"
          },
          "title": "below fields are used in UI only"
        },
        "dataFill": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataFill"
          }
        },
        "navMenus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "not used till now"
        },
        "wizardSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "professionCategoryId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "distributionRatingNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionDesignation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultRoleSlugs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionResourceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isIdentifiable": {
          "type": "boolean"
        }
      }
    },
    "v1ServiceSuggestion": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1SetupData": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionResourceType"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "designations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionDesignation"
          }
        },
        "setupRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetupRole"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1App"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          }
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1DefaultAlias"
          }
        }
      },
      "title": "These will be auto inserted into db"
    },
    "v1SetupModuleRole": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SetupRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string"
        },
        "moduleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetupModuleRole"
          }
        }
      }
    },
    "v1ReviewRequest": {
      "type": "object",
      "properties": {
        "reviewerId": {
          "type": "string"
        },
        "revieweeId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "EmployeesEnableDisableEmployeeLoginBody": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "disableLogin": {
          "type": "boolean"
        },
        "userRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "location_ids: if present then, the employee will be linked to the corresponding locations"
        },
        "update": {
          "type": "boolean",
          "title": "update: when true new roles will be updated else will append with old roles"
        }
      }
    },
    "EmployeesUpdateEmployeeAssignedRolesBody": {
      "type": "object",
      "properties": {
        "assignRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserEmployeeRoleRole"
          }
        },
        "removeRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserEmployeeRoleRole"
          }
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "EmployeesUpdateEmployeeBody": {
      "type": "object",
      "properties": {
        "employee": {
          "type": "object",
          "properties": {
            "firstName": {
              "type": "string",
              "title": "First Name of the employee"
            },
            "lastName": {
              "type": "string",
              "title": "Last Name of the employee"
            },
            "email": {
              "type": "string",
              "title": "Unique Email of the employee"
            },
            "profileImage": {
              "$ref": "#/definitions/typesGalleryItem",
              "title": "Url of the profile image"
            },
            "gender": {
              "$ref": "#/definitions/employeev1Gender",
              "title": "Gender of the employee"
            },
            "employeeNumber": {
              "type": "string",
              "title": "employee Number of the employee"
            },
            "phoneNumber": {
              "type": "string",
              "title": "phone Number of the employee"
            },
            "isPhoneVerified": {
              "type": "boolean"
            },
            "phoneVerifiedOn": {
              "type": "string",
              "format": "date-time"
            },
            "departmentId": {
              "type": "string",
              "title": "department of employee – these is the primary department"
            },
            "designationId": {
              "type": "string",
              "title": "designation of the employee – these is the primary designation"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional data of employee"
            },
            "hireDate": {
              "type": "string",
              "format": "date-time",
              "title": "Date on which employee was hired"
            },
            "userId": {
              "type": "string",
              "title": "corresponds to user in system"
            },
            "isInvitationAccepted": {
              "type": "boolean",
              "title": "is_invitation_accepted: if employee is invited and has accepted the invitation,\nthen the field is set to true, else in all other cases, it is false"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "profileIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "profile_ids: staff profiles"
            },
            "timeZone": {
              "type": "string",
              "title": "timezone: IANA string"
            },
            "hasExtendedProfiles": {
              "type": "boolean"
            },
            "active": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "disableLogin": {
              "type": "boolean"
            },
            "changedSettings": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "changed settings fields"
            },
            "secondaryDepartmentIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "department of employee – these is the primary department"
            },
            "secondaryDesignationIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "designation of the employee – these is the primary designation"
            }
          }
        },
        "updateMask": {
          "type": "string"
        },
        "updateRole": {
          "type": "boolean"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "location_ids: if present then, the employee will be linked to the corresponding locations"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "EmployeesUpdateEmployeeDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "employeev1Gender": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "MALE",
        "FEMALE",
        "OTHER",
        "PREFER_NOT_TO_SAY"
      ],
      "default": "UNSPECIFIED"
    },
    "v1BatchCreateEmployeeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeWrapper"
          }
        },
        "userRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        },
        "language": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "location_ids: if present then, the employee will be linked to the corresponding locations"
        },
        "update": {
          "type": "boolean",
          "title": "update: when true new roles will be updated else will append with old roles"
        }
      }
    },
    "v1BatchCreateEmployeeResponse": {
      "type": "object",
      "properties": {
        "successfulEmployee": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FailedEmployee"
          }
        }
      }
    },
    "v1BatchGetEmployeeByUserIdsResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        }
      }
    },
    "v1BatchGetEmployeeResponse": {
      "type": "object",
      "properties": {
        "employee": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        }
      }
    },
    "v1BatchSendWelcomeMailToEmployeesRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchUpdateEmployeeStatusRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "active": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "disableLoginOnInactive": {
          "type": "boolean"
        }
      }
    },
    "v1ChangeEmployeeSetting": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "changedSettings": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CopyEmployeeByParentRequest": {
      "type": "object",
      "properties": {
        "sourceParent": {
          "type": "string"
        },
        "destinationParent": {
          "type": "string"
        }
      }
    },
    "v1EmployeeCount": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64"
        },
        "activeCount": {
          "type": "string",
          "format": "int64"
        },
        "inactiveCount": {
          "type": "string",
          "format": "int64"
        },
        "canLoginCount": {
          "type": "string",
          "format": "int64"
        },
        "disableLoginCount": {
          "type": "string",
          "format": "int64"
        },
        "customCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1EmployeeFilter": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "active": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "designation": {
          "type": "string"
        },
        "department": {
          "type": "string"
        },
        "hasExtendedProfiles": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "changedSetting": {
          "type": "string"
        },
        "disabledLogin": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "query": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1EmployeeListSortBy": {
      "type": "string",
      "enum": [
        "CreatedOn",
        "LastName",
        "FirstName",
        "Email"
      ],
      "default": "CreatedOn"
    },
    "v1EmployeeLoginReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        },
        "role": {
          "type": "string"
        }
      }
    },
    "v1EmployeeLoginReportFilter": {
      "type": "object",
      "properties": {
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        }
      }
    },
    "v1EmployeeLoginReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1EmployeeLoginReportData"
        }
      }
    },
    "v1EmployeeNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Employee"
        }
      }
    },
    "v1EmployeePasswordResetRequest": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        }
      }
    },
    "v1EmployeeSendNotification": {
      "type": "object",
      "properties": {
        "email": {
          "type": "boolean"
        },
        "sms": {
          "type": "boolean"
        }
      }
    },
    "v1EmployeeWrapper": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/v1Employee"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "v1FailedEmployee": {
      "type": "object",
      "properties": {
        "employee": {
          "$ref": "#/definitions/v1Employee"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1GetEmployeeLoginReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeLoginReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1InviteEmployeeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        },
        "userRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        },
        "language": {
          "type": "string"
        },
        "timeZone": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "location_ids: if present then, the employee will be linked to the corresponding locations"
        },
        "update": {
          "type": "boolean",
          "title": "update: when true new roles will be updated else will append with old roles"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1EmployeeSendNotification"
        },
        "skipEmployeeRole": {
          "type": "boolean"
        }
      }
    },
    "v1InviteEmployeeResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        }
      }
    },
    "v1IsEmployeesEmailVerifiedResponse": {
      "type": "object",
      "properties": {
        "isVerified": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        }
      }
    },
    "v1ListAllEmployeesResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        }
      }
    },
    "v1ListEmployeeResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        },
        "count": {
          "$ref": "#/definitions/v1EmployeeCount"
        }
      }
    },
    "v1ListEmployeesByUserIdResponse": {
      "type": "object",
      "properties": {
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Employee"
          }
        }
      }
    },
    "v1ReInviteEmployeeRequest": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "userRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        },
        "update": {
          "type": "boolean",
          "title": "update: when true new roles will be updated else will append with old roles"
        }
      }
    },
    "v1RevokeInvitationRequest": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        }
      }
    },
    "v1SendPhoneVerificationSmsRequest": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        }
      }
    },
    "v1SendPhoneVerificationSmsResponse": {
      "type": "object",
      "properties": {
        "phoneNumberVerified": {
          "type": "boolean"
        },
        "verificationInProgress": {
          "type": "boolean"
        }
      }
    },
    "v1ToggleInvitationStatusRequest": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "isInvitationAccepted": {
          "type": "boolean"
        }
      }
    },
    "v1UpdateEmployeeChangedSettingsRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChangeEmployeeSetting"
          }
        }
      }
    },
    "v1UserEmployeeRoleRole": {
      "type": "object",
      "properties": {
        "roleId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1VerifyPhoneFromDataCodeRequest": {
      "type": "object",
      "properties": {
        "dataCode": {
          "type": "string"
        },
        "employeeId": {
          "type": "string",
          "title": "internal"
        }
      }
    },
    "v1DeleteMathnasiumMasterResponse": {
      "type": "object",
      "properties": {
        "deletedMaster": {
          "$ref": "#/definitions/v1MathnasiumMaster"
        }
      }
    },
    "v1GetMathnasiumMasterResponse": {
      "type": "object",
      "properties": {
        "master": {
          "$ref": "#/definitions/v1MathnasiumMaster"
        }
      }
    },
    "v1ListMathnasiumServiceLinksResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumServiceLinkWrapper"
          }
        }
      }
    },
    "v1MathnasiumAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "lastModifiedBy": {
          "$ref": "#/definitions/v1MathnasiumUser"
        },
        "lastModifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "title": "Appointment details"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "status": {
          "type": "string"
        },
        "appointyStatus": {
          "type": "string"
        },
        "student": {
          "$ref": "#/definitions/v1MathnasiumUser",
          "title": "Guardian and Student details"
        },
        "guardian": {
          "$ref": "#/definitions/v1MathnasiumUser"
        },
        "enrolmentId": {
          "type": "string",
          "title": "Enrolment & Center details"
        },
        "centerId": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumGradeRange": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumMaster": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent will be location id"
        },
        "locationId": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string",
          "title": "IDs from Radius system"
        },
        "memberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumMembership"
          },
          "title": "Memberships from Radius system"
        },
        "grades": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumGradeRange"
          },
          "title": "Grade ranges from Radius system"
        }
      }
    },
    "v1MathnasiumMembership": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1MathnasiumServiceLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent will be service_id"
        },
        "serviceId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        },
        "memberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumMembership"
          },
          "title": "Memberships from Radius system"
        },
        "grades": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumGradeRange"
          },
          "title": "Grade ranges from Radius system"
        }
      }
    },
    "v1MathnasiumServiceLinkWrapper": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceLink": {
          "$ref": "#/definitions/v1MathnasiumServiceLink"
        }
      }
    },
    "v1MathnasiumUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "radiusId": {
          "type": "string"
        }
      }
    },
    "v1SyncMathnasiumAppointmentsRequest": {
      "type": "object",
      "properties": {
        "after": {
          "type": "string",
          "format": "date-time"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1SyncMathnasiumAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MathnasiumAppointment"
          }
        },
        "lastSyncTime": {
          "type": "string",
          "format": "date-time"
        },
        "waitTill": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1UpsertMathnasiumMasterRequest": {
      "type": "object",
      "properties": {
        "master": {
          "$ref": "#/definitions/v1MathnasiumMaster"
        }
      }
    },
    "v1UpsertMathnasiumMasterResponse": {
      "type": "object",
      "properties": {
        "master": {
          "$ref": "#/definitions/v1MathnasiumMaster"
        }
      }
    },
    "v1UpsertMathnasiumServiceLinkRequest": {
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/v1MathnasiumServiceLink"
        }
      }
    },
    "v1UpsertMathnasiumServiceLinkResponse": {
      "type": "object",
      "properties": {
        "link": {
          "$ref": "#/definitions/v1MathnasiumServiceLink"
        }
      }
    },
    "ResourceTiersUpdateResourceTierBody": {
      "type": "object",
      "properties": {
        "resourceTier": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "resourceTierType": {
              "$ref": "#/definitions/v1ResourceTierType"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the resource tier object can be updated."
        }
      }
    },
    "ResourceTiersUpsertResourceTierPrioritiesBody": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        },
        "logInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceTiersUpsertResourceTierSettingsBody": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1ResourceTierSetting"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CreateResourceTierRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceTier": {
          "$ref": "#/definitions/v1ResourceTier"
        }
      }
    },
    "v1FetchFilteredTiersByLocationsResponse": {
      "type": "object",
      "properties": {
        "filteredTiers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ListResourceTierResponse"
          }
        }
      }
    },
    "v1FilteredTiersByLocationsFilter": {
      "type": "object",
      "properties": {
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1TierEmployeeAllocation"
        }
      }
    },
    "v1ListResourceTierPrioritiesResponse": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        }
      }
    },
    "v1ListResourceTierResponse": {
      "type": "object",
      "properties": {
        "resourceTier": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTier"
          }
        }
      }
    },
    "v1ResourceTier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceTierType": {
          "$ref": "#/definitions/v1ResourceTierType"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ResourceTierFilterInput": {
      "type": "object",
      "properties": {
        "resourceTierType": {
          "$ref": "#/definitions/v1ResourceTierType"
        }
      }
    },
    "v1ResourceTierPriority": {
      "type": "object",
      "properties": {
        "tierId": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ResourceTierSetting": {
      "type": "object",
      "properties": {
        "enableTierBasedStaffPrioritization": {
          "type": "boolean"
        },
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1TierEmployeeAllocation"
        }
      }
    },
    "v1ResourceTierType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IDENTIFIABLE_RESOURCE",
        "EMPLOYEE"
      ],
      "default": "UNSPECIFIED"
    },
    "v1TierEmployeeAllocation": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Location_Based",
        "Service_Based"
      ],
      "default": "Unspecified"
    },
    "v1UpsertResourceTierPrioritiesResponse": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        }
      }
    },
    "v1UpsertResourceTierSettingsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "setting": {
          "$ref": "#/definitions/v1ResourceTierSetting"
        }
      }
    },
    "v1Ticket": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the unique identifier for a ticket with the specified prefix"
        },
        "details": {
          "$ref": "#/definitions/v1Details",
          "description": "Details are information that the client may require to store and can be retrieved later with the ticket id."
        },
        "resourceId": {
          "type": "string",
          "title": "ResourceID is the unique resource whose ticket is being booked/"
        },
        "capacity": {
          "type": "integer",
          "format": "int64",
          "description": "Capacity is the maximum amount of seats available."
        },
        "booked": {
          "type": "integer",
          "format": "int64",
          "description": "Booked is the amount of seats already booked."
        },
        "book": {
          "type": "integer",
          "format": "int64",
          "description": "Book is the amount of seats to be booked."
        },
        "expiry": {
          "type": "string",
          "format": "date-time",
          "title": "Expiry is the time when this ticket auto expires"
        }
      }
    },
    "v1CustomerStaffLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent company_id"
        },
        "staffId": {
          "type": "string",
          "title": "employee_id"
        },
        "customerId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CustomerStaffLinkNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CustomerStaffLink"
        }
      }
    },
    "v1ListCustomerStaffLinkResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerStaffLinkNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1UpsertCustomerStaffLinksRequest": {
      "type": "object",
      "properties": {
        "againstId": {
          "type": "string",
          "title": "customer / staff"
        },
        "newLinks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerStaffLink"
          }
        }
      }
    },
    "v1UpsertCustomerStaffLinksResponse": {
      "type": "object",
      "properties": {
        "links": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerStaffLink"
          }
        },
        "names": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "id, name"
        }
      }
    },
    "v1ListProfessionCategoryResponse": {
      "type": "object",
      "properties": {
        "professionCategory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategory"
          }
        }
      }
    },
    "v1ProfessionCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Name of Industry"
        },
        "description": {
          "type": "string",
          "title": "Description about Industry"
        },
        "setupData": {
          "$ref": "#/definitions/v1ProfessionCategorySetupData",
          "title": "Setup-Data for businesses for optimization and start operations"
        },
        "dataSuggestion": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDataSuggestion"
          }
        },
        "dataFill": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDataFill"
          }
        },
        "navMenus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Nav-bar Menu-Items for business admin-side view"
        },
        "wizardSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "distributionRatingNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Profession-Category represents an Industry to which businesses belongs\nEx: Salon Industry"
    },
    "v1ProfessionCategoryApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "title": "installed"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryDataFill": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryDataSuggestion": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryDefaultAlias": {
      "type": "object",
      "properties": {
        "singular": {
          "type": "string"
        },
        "plural": {
          "type": "string"
        }
      }
    },
    "v1ProfessionCategoryDesignation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultRoleSlugs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryFeature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryResourceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isIdentifiable": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryServiceSuggestion": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ProfessionCategorySetupData": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryResourceType"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "designations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDesignation"
          }
        },
        "setupRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategorySetupRole"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryApp"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryFeature"
          }
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ProfessionCategoryDefaultAlias"
          }
        }
      }
    },
    "v1ProfessionCategorySetupModuleRole": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategorySetupRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string"
        },
        "moduleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategorySetupModuleRole"
          }
        }
      }
    },
    "WebhookPreferencesUpdateWebhookPreferenceBody": {
      "type": "object",
      "properties": {
        "webhookPreference": {
          "type": "object",
          "properties": {
            "eventId": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "fields"
            },
            "key": {
              "type": "string"
            },
            "url": {
              "type": "string"
            },
            "enabled": {
              "type": "boolean"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetWebhookPreferenceResponse": {
      "type": "object",
      "properties": {
        "webhookPreference": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookPreference"
          }
        }
      }
    },
    "v1CreateWebhookPreferenceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "webhookPreference": {
          "$ref": "#/definitions/v1WebhookPreference"
        }
      }
    },
    "v1EventFilters": {
      "type": "object",
      "properties": {
        "eventId": {
          "type": "string"
        }
      }
    },
    "v1ListWebhookPreferenceResponse": {
      "type": "object",
      "properties": {
        "webhookPreference": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WebhookPreference"
          }
        }
      }
    },
    "v1WebhookPreference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "eventId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "fields"
        },
        "key": {
          "type": "string"
        },
        "url": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetIdMapResponse": {
      "type": "object",
      "properties": {
        "idMaps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IdMap"
          }
        }
      }
    },
    "v1BatchUpsertIdMapResponse": {
      "type": "object",
      "properties": {
        "idMaps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IdMap"
          }
        }
      }
    },
    "v1IdMap": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "oldId": {
          "type": "string",
          "format": "int64"
        },
        "newId": {
          "type": "string"
        },
        "idType": {
          "type": "string"
        },
        "oldParent": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ListIdMapResponse": {
      "type": "object",
      "properties": {
        "idMap": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1IdMap"
          }
        }
      }
    },
    "v1ListSitbackAppointmentsResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackAppointmentNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListSitbackCustomersResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackCustomerNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListSitbackEmployeesResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackEmployeeNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1SitbackAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "All appointment fields\nalong with fields from https://docs.google.com/document/d/1hW3C67YfM8g4ezdBbA9ttUXHsvHI7lZD/edit"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackResource"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackResourceType"
          }
        },
        "service": {
          "$ref": "#/definitions/v1SitbackService"
        },
        "employee": {
          "$ref": "#/definitions/v1SitbackAppointmentEmployee"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SitbackConsumer"
          }
        },
        "company": {
          "$ref": "#/definitions/v1SitbackCompany"
        },
        "location": {
          "$ref": "#/definitions/v1SitbackLocation"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "bookingId": {
          "type": "string"
        },
        "recurringId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1SitbackAppointmentStatus"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1SitbackAppointmentPaymentStatus"
        },
        "createdByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "rescheduleAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "cancellationAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "meetingData": {
          "$ref": "#/definitions/v1SitbackMeetingData"
        },
        "isBookedByAdmin": {
          "type": "boolean"
        },
        "reason": {
          "type": "string"
        },
        "lastRescheduledOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastStatusUpdatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attributes": {
          "$ref": "#/definitions/v1SitbackAppointmentExtendedFields"
        }
      }
    },
    "v1SitbackAppointmentEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileId": {
          "type": "string"
        },
        "smsRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "emailRemindOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SitbackAppointmentExtendedFields": {
      "type": "object",
      "properties": {
        "returningClient": {
          "type": "boolean"
        },
        "sessionType": {
          "type": "string"
        },
        "aboriginalSupportRequirements": {
          "type": "boolean"
        },
        "meetingLocation": {
          "type": "string"
        },
        "languageSupportRequirement": {
          "type": "string"
        },
        "relationship": {
          "type": "string"
        }
      }
    },
    "v1SitbackAppointmentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1SitbackAppointment"
        }
      }
    },
    "v1SitbackAppointmentPaymentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_PAYMENT_UNKNOWN",
        "APPOINTMENT_PAYMENT_FAILED",
        "APPOINTMENT_PAYMENT_PAID",
        "APPOINTMENT_PAYMENT_UNPAID",
        "APPOINTMENT_PAYMENT_REFUND",
        "APPOINTMENT_PAYMENT_PARTIAL"
      ],
      "default": "APPOINTMENT_PAYMENT_UNKNOWN"
    },
    "v1SitbackAppointmentSortBy": {
      "type": "string",
      "enum": [
        "AppointmentStartTime",
        "AppointmentCreatedOn"
      ],
      "default": "AppointmentStartTime"
    },
    "v1SitbackAppointmentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_STATUS_UNSPECIFIED",
        "APPOINTMENT_CONFIRMED",
        "APPOINTMENT_CANCELLED",
        "APPOINTMENT_WAITING_FOR_APPROVAL",
        "APPOINTMENT_BOOKING_IN_PROCESS",
        "APPOINTMENT_FAILED"
      ],
      "default": "APPOINTMENT_STATUS_UNSPECIFIED"
    },
    "v1SitbackAppointmentStatusFilter": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SitbackAppointmentStatus"
          },
          "title": "status filter"
        },
        "paymentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1SitbackAppointmentPaymentStatus"
          },
          "title": "payment status filter"
        },
        "customStatus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer custom status"
        }
      }
    },
    "v1SitbackCompany": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1SitbackConsumer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "consumerData": {
          "$ref": "#/definitions/v1SitbackConsumerData"
        },
        "status": {
          "$ref": "#/definitions/v1SitbackConsumerStatus"
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/v1SitbackCustomStatus"
        },
        "isBookedByAdmin": {
          "type": "boolean"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "phoneNumber": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "smsRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "emailRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "attributes": {
          "$ref": "#/definitions/v1SitbackConsumerExtendedFields"
        }
      }
    },
    "v1SitbackConsumerData": {
      "type": "object",
      "properties": {
        "customerData": {
          "$ref": "#/definitions/v1SitbackCustomerInfo"
        }
      }
    },
    "v1SitbackConsumerExtendedFields": {
      "type": "object",
      "properties": {
        "providerClientId": {
          "type": "string"
        },
        "intakeStatus": {
          "type": "boolean"
        },
        "preferredContactMethod": {
          "type": "string"
        },
        "aboriginalSupportRequirements": {
          "type": "string"
        },
        "languageSupportRequirements": {
          "type": "string"
        }
      }
    },
    "v1SitbackConsumerStatus": {
      "type": "string",
      "enum": [
        "CONSUMER_STATUS_UNSPECIFIED",
        "CONFIRMED",
        "CANCELLED"
      ],
      "default": "CONSUMER_STATUS_UNSPECIFIED"
    },
    "v1SitbackCustomStatus": {
      "type": "object",
      "properties": {
        "customStatusId": {
          "type": "string"
        },
        "customStatusName": {
          "type": "string"
        }
      }
    },
    "v1SitbackCustomer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "All Customer fields\nalong with its extended fields"
        },
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "phoneNumber": {
          "type": "string"
        },
        "isPhoneVerified": {
          "type": "boolean"
        },
        "phoneVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "gender": {
          "$ref": "#/definitions/typesGender"
        },
        "tag": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "timezone": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "customerLevel": {
          "type": "string"
        },
        "isInvitedByAdmin": {
          "type": "boolean"
        },
        "createdByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "company": {
          "type": "string"
        },
        "ssoId": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/v1SitbackCustomerAttributes"
        }
      }
    },
    "v1SitbackCustomerAttributes": {
      "type": "object",
      "properties": {
        "providerClientId": {
          "type": "string"
        },
        "preferredContactMethod": {
          "type": "string"
        },
        "languageSupportRequirements": {
          "type": "string"
        },
        "aboriginalSupportRequirements": {
          "type": "string"
        },
        "intakeStatus": {
          "type": "boolean"
        }
      }
    },
    "v1SitbackCustomerInfo": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        }
      }
    },
    "v1SitbackCustomerNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1SitbackCustomer"
        }
      }
    },
    "v1SitbackEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "All Employee fields\nalong with the extended fields of employee and staff profile (if any)"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "gender": {
          "$ref": "#/definitions/typesGender"
        },
        "employeeNumber": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "isPhoneVerified": {
          "type": "boolean"
        },
        "phoneVerifiedOn": {
          "type": "string",
          "format": "date-time"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time"
        },
        "isInvitationAccepted": {
          "type": "boolean"
        },
        "timeZone": {
          "type": "string"
        },
        "active": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "userId": {
          "type": "string"
        },
        "attributes": {
          "$ref": "#/definitions/v1SitbackUserAttributes"
        },
        "createdByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedByUser": {
          "$ref": "#/definitions/v1SitbackUser"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SitbackEmployeeNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1SitbackEmployee"
        }
      }
    },
    "v1SitbackLocation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1SitbackMeetingData": {
      "type": "object",
      "properties": {
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "externalMeetingId": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "joinUrl": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      }
    },
    "v1SitbackResource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1SitbackResourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1SitbackService": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1SitbackSortBy": {
      "type": "string",
      "enum": [
        "CreatedOn",
        "LastName",
        "FirstName",
        "Email"
      ],
      "default": "CreatedOn"
    },
    "v1SitbackUser": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SitbackUserAttributes": {
      "type": "object",
      "properties": {
        "supportedLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "aboriginalSpecialist": {
          "type": "string"
        },
        "about": {
          "type": "string"
        }
      }
    },
    "modulev1ModuleRole": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "name: Module role name will be unique throughout the project"
        },
        "pattern": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayName": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "uniqueForModule": {
          "type": "boolean"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        },
        "serviceName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "external": {
          "type": "boolean"
        },
        "appName": {
          "type": "string"
        }
      }
    },
    "v1BatchGetModuleRoleLevelsResponse": {
      "type": "object",
      "properties": {
        "moduleRoleLevels": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1RepeatedString"
          }
        }
      }
    },
    "v1BatchGetModuleRoleResponse": {
      "type": "object",
      "properties": {
        "moduleRole": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modulev1ModuleRole"
          }
        }
      }
    },
    "v1ListDisplayModuleRoleResponse": {
      "type": "object",
      "properties": {
        "displayModuleRole": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DisplayModuleRole"
          }
        },
        "displayModuleRoleMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1DisplayModuleRole"
          },
          "title": "ModuleRoleMap maps module role name with its corresponding ModuleRole object"
        }
      }
    },
    "v1ListModuleRoleResponse": {
      "type": "object",
      "properties": {
        "moduleRole": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/modulev1ModuleRole"
          }
        },
        "moduleRoleMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/modulev1ModuleRole"
          },
          "title": "ModuleRoleMap maps module role name with its corresponding ModuleRole object"
        }
      }
    },
    "v1RepeatedString": {
      "type": "object",
      "properties": {
        "levels": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PublicKeysUpdatePublicKeyBody": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "object",
          "properties": {
            "levelId": {
              "type": "string"
            },
            "publicKey": {
              "type": "string"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetPublicKeyRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetPublicKeyResponse": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PublicKey"
          }
        }
      }
    },
    "v1CreatePublicKeyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "publicKey": {
          "$ref": "#/definitions/v1PublicKey"
        }
      }
    },
    "v1ListPublicKeyResponse": {
      "type": "object",
      "properties": {
        "publicKey": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PublicKey"
          }
        }
      }
    },
    "v1PublicKey": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        },
        "publicKey": {
          "type": "string"
        }
      }
    },
    "NotificationPreferencesOptForNotificationPreferenceBody": {
      "type": "object",
      "properties": {
        "preference": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "templateId": {
              "type": "string"
            },
            "companyId": {
              "type": "string"
            },
            "optIn": {
              "type": "boolean"
            },
            "channelType": {
              "$ref": "#/definitions/typesChannelType"
            },
            "eventType": {
              "type": "string"
            },
            "parentId": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1BatchGetUserNotificationPreferenceResponse": {
      "type": "object",
      "properties": {
        "notificationPreference": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationPreference"
          }
        }
      }
    },
    "v1BatchOptForNotificationPreferenceRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "preferences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationPreference"
          }
        }
      }
    },
    "v1BatchOptForNotificationPreferenceResponse": {
      "type": "object",
      "properties": {
        "preferences": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationPreference"
          }
        },
        "failed": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FailedNotificationPreference"
          }
        }
      }
    },
    "v1FailedNotificationPreference": {
      "type": "object",
      "properties": {
        "preference": {
          "$ref": "#/definitions/v1NotificationPreference"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ListNotificationPreferenceResponse": {
      "type": "object",
      "properties": {
        "notificationPreference": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1NotificationPreference"
          }
        }
      }
    },
    "v1NotificationPreference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "templateId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "optIn": {
          "type": "boolean"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        },
        "eventType": {
          "type": "string"
        },
        "parentId": {
          "type": "string"
        }
      }
    },
    "v1BatchGetCouponResponse": {
      "type": "object",
      "properties": {
        "Coupon": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Coupon"
          },
          "title": "Coupons contains the list of Coupon"
        }
      },
      "description": "BatchGetCouponsResponse contains the list of Coupons given in the request object."
    },
    "v1Coupon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        },
        "restrictedPlanIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "couponType": {
          "$ref": "#/definitions/v1CouponType"
        },
        "valueType": {
          "$ref": "#/definitions/v1ValueType"
        },
        "value": {
          "type": "number",
          "format": "float"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CouponType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_COUPON",
        "ONE_TIME",
        "RECURRING",
        "FOREVER"
      ],
      "default": "UNSPECIFIED_COUPON"
    },
    "v1ListCouponResponse": {
      "type": "object",
      "properties": {
        "coupon": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Coupon"
          }
        }
      }
    },
    "v1ValueType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "PERCENTAGE",
        "FIXED_VALUE"
      ],
      "default": "UNDEFINED"
    },
    "v1BatchGetBillingMembershipResponse": {
      "type": "object",
      "properties": {
        "billingMembership": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingMembership"
          }
        }
      }
    },
    "v1BillingMembership": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "licenseId": {
          "type": "string"
        },
        "product": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "showToUI": {
          "type": "boolean",
          "title": "to be shown in UI or not"
        }
      },
      "description": "BillingMembership groups the plans of a license."
    },
    "v1ListBillingMembershipResponse": {
      "type": "object",
      "properties": {
        "billingMembership": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingMembership"
          }
        }
      }
    },
    "typesBillingPaymentGateway": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_BILLING_PAYMENT_GATEWAY",
        "STRIPE_GATEWAY",
        "BRAINTREE_GATEWAY",
        "SQUARE_GATEWAY",
        "PAYPAL_GATEWAY",
        "RADIUS_GATEWAY",
        "RAZORPAY_GATEWAY"
      ],
      "default": "UNSPECIFIED_BILLING_PAYMENT_GATEWAY"
    },
    "v1BatchGetPaymentGatewaySettingByParentRequest": {
      "type": "object",
      "properties": {
        "parents": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "filter": {
          "$ref": "#/definitions/v1BatchGetPaymentGatewaySettingFilter"
        }
      }
    },
    "v1BatchGetPaymentGatewaySettingByParentResponse": {
      "type": "object",
      "properties": {
        "paymentGatewaySettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentGatewaySetting"
          }
        }
      }
    },
    "v1BatchGetPaymentGatewaySettingFilter": {
      "type": "object",
      "properties": {
        "storeCardSupport": {
          "type": "boolean"
        },
        "subscriptionSupport": {
          "type": "boolean"
        },
        "requireTokenForCard": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "clientSide": {
          "type": "boolean"
        },
        "planCreationSupport": {
          "type": "boolean"
        }
      }
    },
    "v1ListPaymentGatewayLocationsResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentGatewayLocation"
          }
        }
      }
    },
    "v1ListPaymentGatewaySettingResponse": {
      "type": "object",
      "properties": {
        "paymentGatewaySetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PaymentGatewaySetting"
          }
        }
      }
    },
    "v1PaymentGatewayLocation": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "businessName": {
          "type": "string"
        },
        "businessEmail": {
          "type": "string"
        },
        "capabilities": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string"
        },
        "logoUrl": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "websiteUrl": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "timezone": {
          "type": "string"
        },
        "paymentGatewayLocationStatus": {
          "$ref": "#/definitions/v1PaymentGatewayLocationStatus"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "merchantId": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "languageCode": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "paymentGatewayLocationType": {
          "$ref": "#/definitions/v1PaymentGatewayLocationType"
        },
        "mcc": {
          "type": "string"
        }
      }
    },
    "v1PaymentGatewayLocationStatus": {
      "type": "string",
      "enum": [
        "LOCATION_ACTIVE",
        "LOCATION_INACTIVE"
      ],
      "default": "LOCATION_ACTIVE"
    },
    "v1PaymentGatewayLocationType": {
      "type": "string",
      "enum": [
        "PHYSICAL",
        "MOBILE"
      ],
      "default": "PHYSICAL"
    },
    "v1PaymentGatewaySetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Parent is location"
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "storeCardSupport": {
          "type": "boolean"
        },
        "subscriptionSupport": {
          "type": "boolean"
        },
        "requireTokenForCard": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        },
        "clientSide": {
          "type": "boolean"
        },
        "planCreationSupport": {
          "type": "boolean"
        },
        "publicKey": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "paymentMethod": {
          "$ref": "#/definitions/typesPaymentMethod"
        }
      }
    },
    "v1UpdatePaymentGatewayLocationRequest": {
      "type": "object",
      "properties": {
        "integrationId": {
          "type": "string"
        },
        "locationId": {
          "type": "string"
        }
      }
    },
    "v1UpdatePaymentGatewaySettingRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "paymentGatewaySetting": {
          "$ref": "#/definitions/v1PaymentGatewaySetting"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AddBalanceToWalletRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be company Id or user Id"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1DeductBalanceFromWalletRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be company Id or user Id"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ListTransactionsResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TransactionNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1TransactionDetails": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "reason": {
          "type": "string"
        },
        "addedOn": {
          "type": "string",
          "format": "date-time",
          "title": "handled by code // not handle by chaku as not root object"
        },
        "addedBy": {
          "type": "string"
        },
        "transactionType": {
          "$ref": "#/definitions/v1TransactionType"
        }
      }
    },
    "v1TransactionNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1TransactionDetails"
        }
      }
    },
    "v1TransactionType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "CREDIT",
        "DEBIT"
      ],
      "default": "UNKNOWN"
    },
    "v1Wallet": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Parent will be company Id or user Id"
        },
        "balance": {
          "$ref": "#/definitions/typesPrice",
          "title": "in USD"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "title": "handled by chaku"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "transactionDetails": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1TransactionDetails"
          }
        }
      },
      "title": "custom wallet for new feature and trial\nwill be given from dashboard\ndebit -> subscription renew"
    },
    "v1BatchDeleteGatewayMembershipPlanResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1BatchUpdateGatewayMembershipPlanResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1CreateGatewayMembershipPlanResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1DeleteGatewayMembershipPlanRequest": {
      "type": "object",
      "properties": {
        "planId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        },
        "skipNotFound": {
          "type": "boolean"
        }
      }
    },
    "v1DeleteGatewayMembershipPlanResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1UpdateGatewayMembershipPlanRequest": {
      "type": "object",
      "properties": {
        "productName": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "planName": {
          "type": "string"
        },
        "planId": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "validity": {
          "$ref": "#/definitions/typesInterval"
        },
        "levelId": {
          "type": "string",
          "title": "location-id to get connected gateway credentials"
        },
        "skipNotFound": {
          "type": "boolean",
          "title": "true -> get -> successful -> update\n              -> not-found -> do nothing\n              -> fails -> error\n false -> get -> successful -> update\n             -> fails -> error"
        }
      }
    },
    "v1UpdateGatewayMembershipPlanResponse": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1BatchGetBillingPlanResponse": {
      "type": "object",
      "properties": {
        "billingPlan": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingPlan"
          }
        }
      }
    },
    "v1BillingAddon": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "defaultValue": {
          "type": "integer",
          "format": "int32"
        },
        "purchasedValue": {
          "type": "integer",
          "format": "int32"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "moduleLicenseName": {
          "type": "string"
        },
        "moduleLicenseSlug": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "displayPrice": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1BillingPlan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "displayPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "validityInDays": {
          "type": "string",
          "format": "int64",
          "title": "Validity defines the tenure of the plan, in number of days when plan is valid"
        },
        "addons": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingAddon"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "showToUI": {
          "type": "boolean",
          "title": "to be shown in UI or not"
        },
        "planType": {
          "$ref": "#/definitions/v1PlanType"
        }
      },
      "title": "BillingPlan represents the different plans of licenses.\nEach plan belongs to a license and has a price and validity (AKA frequency of renewal)\nBilling plan has Billing membership as its parent"
    },
    "v1ListBillingPlanResponse": {
      "type": "object",
      "properties": {
        "billingPlan": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingPlan"
          }
        }
      }
    },
    "v1PlanType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_PLAN",
        "TRIAL",
        "FREEBIE"
      ],
      "default": "UNSPECIFIED_PLAN"
    },
    "v1ValidateResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "PaymentMethodsUpdatePaymentMethodBody": {
      "type": "object",
      "properties": {
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "paymentMethodToken": {
          "type": "string"
        },
        "verificationToken": {
          "type": "string",
          "title": "in case of square"
        }
      }
    },
    "billingv1PaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is company / location / user"
        },
        "name": {
          "type": "string"
        },
        "cardId": {
          "type": "string"
        },
        "lastFour": {
          "type": "string"
        },
        "cardType": {
          "type": "string",
          "title": "Visa, Mastercard"
        },
        "expiry": {
          "type": "string"
        },
        "fingerprint": {
          "type": "string"
        },
        "bankId": {
          "type": "string"
        },
        "bankName": {
          "type": "string"
        },
        "paypalEmail": {
          "type": "string"
        },
        "externalCustomerId": {
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "paymentMethodType": {
          "$ref": "#/definitions/v1PaymentMethodType"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isDefault": {
          "type": "boolean",
          "title": "to specify default card of user"
        },
        "secondaryParentId": {
          "type": "string",
          "title": "if parent: user => company/location; else => empty;"
        }
      }
    },
    "v1BatchGetPaymentMethodResponse": {
      "type": "object",
      "properties": {
        "paymentMethod": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/billingv1PaymentMethod"
          }
        }
      }
    },
    "v1CreatePaymentMethodRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "paymentMethodToken": {
          "type": "string"
        },
        "billingAccountId": {
          "type": "string",
          "title": "to be linked with which billing account for company/location"
        },
        "secondaryParentId": {
          "type": "string",
          "title": "to be linked with which company/location for user"
        },
        "useDefault": {
          "type": "boolean",
          "title": "in case default billing account or global account needs to be used"
        },
        "verificationToken": {
          "type": "string",
          "title": "in case of square"
        }
      }
    },
    "v1GetPaymentMethodIntentResponse": {
      "type": "object",
      "properties": {
        "intent": {
          "type": "string"
        }
      }
    },
    "v1ListPaymentMethodResponse": {
      "type": "object",
      "properties": {
        "paymentMethod": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/billingv1PaymentMethod"
          }
        }
      }
    },
    "v1NoOfPaymentMethodsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1PaymentMethodType": {
      "type": "string",
      "enum": [
        "CARD",
        "IDEAL",
        "FPX",
        "BECS_DIRECT",
        "SEPA",
        "PAYPAL"
      ],
      "default": "CARD"
    },
    "v1Addition": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1CancelSubscriptionRecordResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "v1CreateSubscriptionRecordResponse": {
      "type": "object",
      "properties": {
        "subscriptionPeriod": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "subscriptionStatus": {
          "type": "string"
        },
        "transactionId": {
          "type": "string"
        },
        "authRequired": {
          "type": "boolean",
          "title": "requires SCA"
        },
        "token": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1SubscriptionRecord": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string",
          "title": "location-id connected with stripe account // empty for admin side"
        },
        "planId": {
          "type": "string"
        },
        "walletId": {
          "type": "string"
        },
        "externalSubscriptionId": {
          "type": "string"
        },
        "activationPeriod": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "billingAccountId": {
          "type": "string"
        },
        "paymentMethodId": {
          "type": "string"
        },
        "subscriptionType": {
          "$ref": "#/definitions/v1SubscriptionType"
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "externalCustomerId": {
          "type": "string"
        },
        "externalCardId": {
          "type": "string"
        },
        "trialActive": {
          "type": "boolean"
        },
        "active": {
          "type": "boolean"
        }
      }
    },
    "v1SubscriptionType": {
      "type": "string",
      "enum": [
        "SubscriptionType_UNSPECIFIED",
        "ADMIN",
        "CLIENT"
      ],
      "default": "SubscriptionType_UNSPECIFIED"
    },
    "v1SuspendSubscriptionRecordResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        }
      }
    },
    "BillingAccountsSetDefaultBillingAccountBody": {
      "type": "object"
    },
    "BillingAccountsUpdateBillingAccountBody": {
      "type": "object",
      "properties": {
        "billingAccount": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "email": {
              "type": "string"
            },
            "address": {
              "$ref": "#/definitions/typesAddress"
            },
            "paymentMethodIds": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultPaymentMethodId": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "externalCustomerId": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "gateway:external-customer-id"
            },
            "isDefault": {
              "type": "boolean"
            },
            "secondaryParentId": {
              "type": "string",
              "title": "if parent: user => company/location; else => empty;"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetBillingAccountResponse": {
      "type": "object",
      "properties": {
        "billingAccount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingAccount"
          }
        }
      }
    },
    "v1BillingAccount": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent can be company or location or user"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "paymentMethodIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultPaymentMethodId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "externalCustomerId": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "gateway:external-customer-id"
        },
        "isDefault": {
          "type": "boolean"
        },
        "secondaryParentId": {
          "type": "string",
          "title": "if parent: user => company/location; else => empty;"
        }
      }
    },
    "v1ListBillingAccountResponse": {
      "type": "object",
      "properties": {
        "billingAccount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BillingAccount"
          }
        }
      }
    },
    "v1BatchCreateExtendedFieldSubmissionResponse": {
      "type": "object",
      "properties": {
        "extendedFieldSubmissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedFieldSubmission"
          }
        }
      }
    },
    "v1BatchGetExtendedFieldSubmissionByParentsResponse": {
      "type": "object",
      "properties": {
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedFieldSubmission"
          }
        }
      }
    },
    "v1BatchGetExtendedFieldSubmissionResponse": {
      "type": "object",
      "properties": {
        "extendedFieldSubmission": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedFieldSubmission"
          }
        }
      }
    },
    "v1ExtendedFieldSubmission": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "entityId": {
          "type": "string",
          "title": "fields"
        },
        "extendedFieldPrefix": {
          "type": "string"
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      }
    },
    "v1ListExtendedFieldSubmissionResponse": {
      "type": "object",
      "properties": {
        "extendedFieldSubmission": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ExtendedFieldSubmission"
          }
        }
      }
    },
    "PoliciesChangePolicyAcceptanceCriteriaBody": {
      "type": "object",
      "properties": {
        "oneTimeAcceptance": {
          "type": "boolean"
        }
      }
    },
    "PoliciesChangePolicyStatusBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetPolicyResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetPolicyResponse"
          }
        }
      }
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1CreatePolicyVersionRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersion": {
          "$ref": "#/definitions/v1PolicyVersion"
        }
      }
    },
    "v1DeleteDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        },
        "sourceId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListAnnouncementsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyWrapper"
          }
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyWrapper"
          }
        }
      }
    },
    "v1PublishDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        }
      }
    },
    "v1UpdateDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersion": {
          "$ref": "#/definitions/v1PolicyVersion"
        }
      }
    },
    "MembershipsUpdateMembershipBody": {
      "type": "object",
      "properties": {
        "membership": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "description": "Title of the Membership. Tile of the Membership cannot be empty."
            },
            "description": {
              "type": "string",
              "description": "Description , A short description of the Membership."
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery",
              "title": "Gallery are various images of the Membership"
            },
            "freeAccess": {
              "$ref": "#/definitions/v1BenefitBag",
              "title": "free access to benefits"
            },
            "privilegeAccess": {
              "$ref": "#/definitions/v1BenefitBag",
              "title": "privilege access to benefits"
            },
            "discountedAccess": {
              "$ref": "#/definitions/v1BenefitBag",
              "title": "discounted access to benefits"
            },
            "activation": {
              "$ref": "#/definitions/v1Activation",
              "title": "whole activation type of membership /package"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "batchId": {
              "type": "string"
            },
            "enableForPurchase": {
              "type": "boolean",
              "title": "allow the purchase of membership"
            },
            "baseId": {
              "type": "string"
            },
            "purchaseWindow": {
              "$ref": "#/definitions/typesTimeslot"
            },
            "plans": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Plan"
              }
            },
            "blackoutDays": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1BlackOutDay"
              },
              "title": "days not allowed for consumption"
            },
            "membershipType": {
              "$ref": "#/definitions/v1MembershipType",
              "title": "For differentiating package and membership"
            },
            "oneTimeConsumption": {
              "type": "boolean",
              "title": "For single day package"
            },
            "totalConsumptionAllowed": {
              "$ref": "#/definitions/v1MembershipFrequency",
              "title": "total number of quantity, amount duration , allowed for consumption"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "metadata to store additional data eg: color based info if any"
            },
            "consumedCount": {
              "type": "integer",
              "format": "int32",
              "title": "specifies the consumed count"
            },
            "categoryId": {
              "type": "string",
              "title": "CategoryId is the id of membership-category (required in case of package)"
            },
            "membershipSettings": {
              "$ref": "#/definitions/v1MembershipSettings"
            },
            "allowedCustomerEmails": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Todo: remove this after APX-840 is done from frontend"
            },
            "isPrivate": {
              "type": "boolean"
            }
          },
          "title": "membership collection of"
        },
        "updateMask": {
          "type": "string"
        },
        "baseId": {
          "type": "string"
        }
      }
    },
    "MembershipsUpdateMembershipPlanBody": {
      "type": "object",
      "properties": {
        "plan": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name plan title or name"
            },
            "description": {
              "type": "string"
            },
            "setupCost": {
              "$ref": "#/definitions/typesPrice",
              "title": "SetupCost will be the one time initial cost"
            },
            "price": {
              "$ref": "#/definitions/typesPrice",
              "title": "Price ,plan pricing with currency ,if the plan can be subscribed then this\nwill be the recurring cost of the plan"
            },
            "validity": {
              "$ref": "#/definitions/typesInterval",
              "title": "Validity defines the tenure of the membership, is interval when plan is valid"
            },
            "renewCount": {
              "type": "integer",
              "format": "int32",
              "title": "The number of times the membership/package plan can be auto renewed\nRenewed in lock_in\nrenew count zero specifies unlimited renewal and needs manual cancellation only for auto renew\nthis count includes current cycle i.e. first cycle also\nFor auto renew : renew count zero for manual cancellation\nFor auto renew : renew count specified for fixed cycles of subscription\nFor lock in : renew count specified for fixed cycles of subscription\nFor one time: renew count zero as there is no repeat for package"
            },
            "purchaseAllowedPerCustomer": {
              "type": "integer",
              "format": "int32",
              "title": "The maximum number of times the membership/package plan can be purchased by the customer"
            },
            "lockInPolicyId": {
              "type": "string"
            },
            "isTrial": {
              "type": "boolean"
            },
            "renewPolicy": {
              "$ref": "#/definitions/v1RenewPolicy"
            },
            "customerPaymentValidate": {
              "type": "boolean",
              "title": "validate customer has setup payment info eg: cards"
            },
            "isLockIn": {
              "type": "boolean"
            },
            "lockInCount": {
              "type": "integer",
              "format": "int32"
            },
            "allowedDaysForCancellationBeforeRenewal": {
              "type": "integer",
              "format": "int32"
            },
            "neverExpires": {
              "type": "boolean",
              "title": "TODO: check this setting at the time of activation time calculation & override in create wallet\npackage that never expires"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "metadata to store additional data eg: star"
            }
          },
          "title": "plan of membership"
        },
        "updateMask": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "MembershipsUpdateMembershipStatusBody": {
      "type": "object",
      "properties": {
        "enableForPurchase": {
          "type": "boolean"
        }
      }
    },
    "v1Activation": {
      "type": "object",
      "properties": {
        "activationType": {
          "$ref": "#/definitions/v1ActivationType"
        },
        "activationMinDaysAfterPurchase": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ActivationType": {
      "type": "string",
      "enum": [
        "ActivationType_UNSPECIFIED",
        "ON_PURCHASE",
        "ON_FIRST_USAGE_OR_MIN_DAYS_AFTER_PURCHASE"
      ],
      "default": "ActivationType_UNSPECIFIED"
    },
    "v1BatchCreateMembershipRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "levelMemberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LevelMembership"
          }
        }
      }
    },
    "v1BatchCreateMembershipResponse": {
      "type": "object",
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateMembershipResponseWrapper"
          }
        }
      }
    },
    "v1BatchGetMembershipRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids Unique Membership identifiers"
        },
        "viewMask": {
          "type": "string"
        }
      }
    },
    "v1BatchGetMembershipResponse": {
      "type": "object",
      "properties": {
        "membership": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Membership"
          },
          "title": "List of Membership"
        }
      }
    },
    "v1Benefit": {
      "type": "object",
      "properties": {
        "benefitId": {
          "type": "string",
          "title": "Item Membership item id which can be consumed with this Membership"
        },
        "name": {
          "type": "string"
        },
        "restrictions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipFrequency"
          },
          "title": "The restrictions for individual benefit items\nFrequency is the duration with in which a item quantity can be\nrenewed.\nFor example, item A can be consumed only 3 times in 7 days and will be renewed after\n7 days,so its Frequency.Days = 7\nwe can't take week, month, year wise renew frequency because\nadmin can lose many item quantity\nlike if we take monthly renewal frequency and if client purchase membership 25 date\nof month then they take benefit of current month\nalso next month.\nif member take 1 month membership of 25 date of month\nkoyki month start hota he month ki first date se to use 1 se 30 tak quantity mil gai or 25 date + 1 month\nthen date next month me bhi chali gai to next month me bhi renewal quantity reset ho\nkar mil gai\nThis can exist at global level for the membership benefit items in each bag.\nThis can exist at benefit item level also in benefits"
        },
        "discountPercent": {
          "type": "number",
          "format": "float",
          "title": "This can exist at global level for the membership benefit items in each bag.\nThis can exist at benefit item level also in benefits\nConsidered only in case of discounted bag"
        },
        "benefitDuration": {
          "$ref": "#/definitions/typesInterval",
          "title": "for benefits with multiple durations for which duration this benefit will be applied"
        },
        "unlimited": {
          "type": "boolean"
        },
        "totalConsumableQuantity": {
          "type": "integer",
          "format": "int32"
        },
        "totalConsumableDuration": {
          "$ref": "#/definitions/typesInterval"
        },
        "totalConsumablePrice": {
          "$ref": "#/definitions/typesPrice"
        }
      },
      "description": "Membership benefits are the list of items , Every item in the membership\nbenefit is validated and a separate service does the\nvalidation of item before adding it to the membership."
    },
    "v1BenefitBag": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "benefit bag id"
        },
        "benefits": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Benefit"
          },
          "title": "services and classes that are allowed to be purchased from membership\nThis also contains the benefit restrictions that can be overridden"
        },
        "allowedDays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1WeekdayRule"
          },
          "title": "AllowedDay restrict customer day with time.\nlike allow day monday 10am to 2pm, friday 4pm to 8pm only.\nThis can exist at global level for the membership benefit items in each bag.\nThis can exist at benefit item level also in benefits"
        },
        "discountPercent": {
          "type": "number",
          "format": "float",
          "title": "This can exist at global level for the membership benefit items in each bag.\nThis can exist at benefit item level also in benefits\nConsidered only in case of discounted bag"
        }
      },
      "description": "BenefitBag contains items and their offers which can be consumed\nby the members of the membership i.e. list of benefit, restriction\nBenefitBag restriction are RenewalFrequency and AllowedDay days\nRenewalFrequency is the interval in which a member can consume membership items\nlike in 7 days 10 quantity of items can be consumed\nin this example if a member consumes a quantity of 5 items in one day then for the next 6 days,\nonly the left out 5 items quantity can be consumed\nAllowedDay is a restriction by which the admin can restrict members in day times like sun, mon 9am to\n2pm only the members can consume membership items."
    },
    "v1BlackOutDay": {
      "type": "object",
      "properties": {
        "blackoutDay": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "v1ConsumptionType": {
      "type": "string",
      "enum": [
        "ConsumptionType_UNPECIFIED",
        "TYPE_QUANTITY",
        "TYPE_AMOUNT",
        "TYPE_DURATION",
        "TYPE_UNLIMITED"
      ],
      "default": "ConsumptionType_UNPECIFIED"
    },
    "v1CreateMembershipPlanRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Membership Id/ Package Id"
        },
        "plan": {
          "$ref": "#/definitions/v1Plan"
        }
      }
    },
    "v1CreateMembershipRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent contains the hierarchical information of the given Membership like\nbusiness/group"
        },
        "membership": {
          "$ref": "#/definitions/v1Membership",
          "title": "Membership contains the set of  Benefits and Privileges"
        },
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "categoryDescription": {
          "type": "string"
        }
      }
    },
    "v1CreateMembershipResponseWrapper": {
      "type": "object",
      "properties": {
        "membership": {
          "$ref": "#/definitions/v1Membership"
        },
        "error": {
          "type": "boolean"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1GetMembershipByDataCodeResponse": {
      "type": "object",
      "properties": {
        "membership": {
          "$ref": "#/definitions/v1Membership"
        }
      }
    },
    "v1GetMembershipLinkingResponse": {
      "type": "object",
      "properties": {
        "memberships": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Membership"
          }
        }
      }
    },
    "v1LevelMembership": {
      "type": "object",
      "properties": {
        "levelIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "membership": {
          "$ref": "#/definitions/v1Membership"
        },
        "categoryDescription": {
          "type": "string"
        }
      }
    },
    "v1ListMembershipResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MembershipNode"
          },
          "title": "MembershipNode contains the list of Membership with their row number"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1Membership": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id a Unique Identifier for the Membership"
        },
        "title": {
          "type": "string",
          "description": "Title of the Membership. Tile of the Membership cannot be empty."
        },
        "description": {
          "type": "string",
          "description": "Description , A short description of the Membership."
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery",
          "title": "Gallery are various images of the Membership"
        },
        "freeAccess": {
          "$ref": "#/definitions/v1BenefitBag",
          "title": "free access to benefits"
        },
        "privilegeAccess": {
          "$ref": "#/definitions/v1BenefitBag",
          "title": "privilege access to benefits"
        },
        "discountedAccess": {
          "$ref": "#/definitions/v1BenefitBag",
          "title": "discounted access to benefits"
        },
        "activation": {
          "$ref": "#/definitions/v1Activation",
          "title": "whole activation type of membership /package"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "batchId": {
          "type": "string"
        },
        "enableForPurchase": {
          "type": "boolean",
          "title": "allow the purchase of membership"
        },
        "baseId": {
          "type": "string"
        },
        "purchaseWindow": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "plans": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Plan"
          }
        },
        "blackoutDays": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlackOutDay"
          },
          "title": "days not allowed for consumption"
        },
        "membershipType": {
          "$ref": "#/definitions/v1MembershipType",
          "title": "For differentiating package and membership"
        },
        "oneTimeConsumption": {
          "type": "boolean",
          "title": "For single day package"
        },
        "totalConsumptionAllowed": {
          "$ref": "#/definitions/v1MembershipFrequency",
          "title": "total number of quantity, amount duration , allowed for consumption"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata to store additional data eg: color based info if any"
        },
        "consumedCount": {
          "type": "integer",
          "format": "int32",
          "title": "specifies the consumed count"
        },
        "categoryId": {
          "type": "string",
          "title": "CategoryId is the id of membership-category (required in case of package)"
        },
        "membershipSettings": {
          "$ref": "#/definitions/v1MembershipSettings"
        },
        "allowedCustomerEmails": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Todo: remove this after APX-840 is done from frontend"
        },
        "isPrivate": {
          "type": "boolean"
        }
      },
      "description": "Membership contains the set of  Benefits and Privileges which a user can\navail by purchasing membership plan.\nMembership contains the different plan where each plan tells about the time\nperiod of membership.\n\nMembership benefits are the list of items , Every item in the membership\nbenefit is validated and a separate service does the\nvalidation of item before adding it to the membership.\n\nMembership Privileges are the set of special rights for eg, early access to\nthe offers , free shipping , no cancellation charges etc\n\nMembership Setup Cost is the one time charges which user have to pay for\nfirst time while purchasing membership plan, once the setup cost is paid then\nuser dont have to pay the setup cost again for renewing its membership\n\nMembership plans has its own purchase rule which define set of rules for\npurchasing it,purchase rule are saved separately.If a plan does not have a\npurchase rule this means that the plan will not be available for sell.\nRefer PurchaseRule proto for more information\n\nMembership  have its own restrictions which applies on all the items of the\nmembership benefits.\n\nRecurring rule , this rule will add restriction on membership benefits item\nconsumption\nlike we can only consume the items of this membership on every Monday and\nTuesday of the week between 9 am to 6 pm.\n\nSame Restriction rule can also be applied at the item level and we can also\nconfigure which rule to be applied i.e. Membership level rule or item level\nrule at the time of item consumption"
    },
    "v1MembershipFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "enableForPurchase": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "isPrivate": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "type": {
          "$ref": "#/definitions/v1MembershipType"
        },
        "categoryId": {
          "type": "string"
        },
        "canBePurchasedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1MembershipFrequency": {
      "type": "object",
      "properties": {
        "consumptionType": {
          "$ref": "#/definitions/v1ConsumptionType",
          "title": "Renewal type defines the type of renewal i.e. quantity, amount or duration"
        },
        "quantity": {
          "$ref": "#/definitions/v1RenewQuantity",
          "description": "1. quantity of item which will be renewed on the basis of interval\n   e.g quantity=4 i.e in 10 days we can only consume 4 items."
        },
        "amount": {
          "$ref": "#/definitions/v1RenewPrice",
          "description": "2. amount of item which will be renewed on the basis of interval\n   e.g. amount=100 i.e in 10 days we can only consume 100 currency specific amount."
        },
        "duration": {
          "$ref": "#/definitions/v1RenewDuration",
          "description": "3. duration i.e. min/hour/year(time based consumption) of item which will be renewed on the basis of interval\n   e.g. min=100 i.e in 10 days we can only consume 100 min of specific item."
        }
      }
    },
    "v1MembershipNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the Membership list eg\n:row number"
        },
        "node": {
          "$ref": "#/definitions/v1Membership",
          "title": "Node contains the actual Membership object"
        }
      }
    },
    "v1MembershipSettings": {
      "type": "object",
      "properties": {
        "autoRefund": {
          "type": "boolean",
          "title": "AutoRefund if true will refund the items booked with package if cancelled and will not marked as consumed"
        },
        "sendReminderBeforeSeconds": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1MembershipType": {
      "type": "string",
      "enum": [
        "MembershipType_UNSPECIFIED",
        "MEMBERSHIP",
        "PACKAGE"
      ],
      "default": "MembershipType_UNSPECIFIED"
    },
    "v1Plan": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id unique identifier for plan"
        },
        "name": {
          "type": "string",
          "title": "Name plan title or name"
        },
        "description": {
          "type": "string"
        },
        "setupCost": {
          "$ref": "#/definitions/typesPrice",
          "title": "SetupCost will be the one time initial cost"
        },
        "price": {
          "$ref": "#/definitions/typesPrice",
          "title": "Price ,plan pricing with currency ,if the plan can be subscribed then this\nwill be the recurring cost of the plan"
        },
        "validity": {
          "$ref": "#/definitions/typesInterval",
          "title": "Validity defines the tenure of the membership, is interval when plan is valid"
        },
        "renewCount": {
          "type": "integer",
          "format": "int32",
          "title": "The number of times the membership/package plan can be auto renewed\nRenewed in lock_in\nrenew count zero specifies unlimited renewal and needs manual cancellation only for auto renew\nthis count includes current cycle i.e. first cycle also\nFor auto renew : renew count zero for manual cancellation\nFor auto renew : renew count specified for fixed cycles of subscription\nFor lock in : renew count specified for fixed cycles of subscription\nFor one time: renew count zero as there is no repeat for package"
        },
        "purchaseAllowedPerCustomer": {
          "type": "integer",
          "format": "int32",
          "title": "The maximum number of times the membership/package plan can be purchased by the customer"
        },
        "lockInPolicyId": {
          "type": "string"
        },
        "isTrial": {
          "type": "boolean"
        },
        "renewPolicy": {
          "$ref": "#/definitions/v1RenewPolicy"
        },
        "customerPaymentValidate": {
          "type": "boolean",
          "title": "validate customer has setup payment info eg: cards"
        },
        "isLockIn": {
          "type": "boolean"
        },
        "lockInCount": {
          "type": "integer",
          "format": "int32"
        },
        "allowedDaysForCancellationBeforeRenewal": {
          "type": "integer",
          "format": "int32"
        },
        "neverExpires": {
          "type": "boolean",
          "title": "TODO: check this setting at the time of activation time calculation & override in create wallet\npackage that never expires"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "metadata to store additional data eg: star"
        }
      },
      "title": "Plan , A membership can have different plans where each plans tells about the\nnumber of days for which the membership will be active.\nPlan can also be subscribed"
    },
    "v1RenewDuration": {
      "type": "object",
      "properties": {
        "consumableDuration": {
          "$ref": "#/definitions/typesInterval",
          "title": "ConsumableDuration is the duration that can be consumed in a given interval"
        },
        "interval": {
          "$ref": "#/definitions/typesInterval"
        },
        "intervalFrequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "For IntervalFrequency week, month, year frequency info will give the info about the start i.e weekDay, monthDate,\nMonths respectively"
        }
      }
    },
    "v1RenewPolicy": {
      "type": "string",
      "enum": [
        "RenewPolicy_UNSPECIFIED",
        "AUTO_RENEW",
        "ONE_TIME"
      ],
      "default": "RenewPolicy_UNSPECIFIED"
    },
    "v1RenewPrice": {
      "type": "object",
      "properties": {
        "consumablePrice": {
          "$ref": "#/definitions/typesPrice",
          "title": "ConsumablePrice is the price that can be consumed in a given interval"
        },
        "interval": {
          "$ref": "#/definitions/typesInterval"
        },
        "intervalFrequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "For IntervalFrequency week, month, year frequency info will give the info about the start i.e weekDay, monthDate,\nMonths respectively"
        }
      }
    },
    "v1RenewQuantity": {
      "type": "object",
      "properties": {
        "consumableQuantity": {
          "type": "integer",
          "format": "int32",
          "title": "ConsumableQuantity is the quantity that can be consumed in a given interval"
        },
        "interval": {
          "$ref": "#/definitions/typesInterval"
        },
        "intervalFrequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "For IntervalFrequency week, month, year frequency info will give the info about the start i.e weekDay, monthDate,\nMonths respectively"
        }
      }
    },
    "CustomerReportsUpdateCustomerMoodBody": {
      "type": "object",
      "properties": {
        "moodOfCustomer": {
          "$ref": "#/definitions/v1Mood",
          "title": "mood of customer will sent from admin side ==> To manually update"
        },
        "isAdmin": {
          "type": "boolean"
        }
      }
    },
    "v1CustomerFilters": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Filter"
          }
        }
      }
    },
    "v1CustomerFormField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "formFieldType": {
          "$ref": "#/definitions/v1CustomerFormFieldType"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerFormFieldOption"
          }
        },
        "multiple": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1CustomerFormFieldOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1CustomerFormFieldType": {
      "type": "string",
      "enum": [
        "FormFieldType_UNDEFINED",
        "INPUT",
        "CHECKBOX",
        "SELECT",
        "ADDRESS"
      ],
      "default": "FormFieldType_UNDEFINED"
    },
    "v1CustomerLoginReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "lastLogin": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1CustomerLoginReportFilter": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1CustomerLoginReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CustomerLoginReportData"
        }
      }
    },
    "v1CustomerReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Parent is location"
        },
        "customerId": {
          "type": "string",
          "title": "complete customer-id with parent : grp/com/loc/cust"
        },
        "addedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastBookedOn": {
          "type": "string",
          "format": "date-time",
          "title": "anything class/appointment/meeting"
        },
        "lastAppointmentBookedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastClassBookedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastReviewedOn": {
          "type": "string",
          "format": "date-time"
        },
        "lastPurchasedOn": {
          "type": "string",
          "format": "date-time"
        },
        "totalAppointments": {
          "type": "string",
          "format": "int64"
        },
        "totalClasses": {
          "type": "string",
          "format": "int64"
        },
        "totalGiftCertificates": {
          "type": "string",
          "format": "int64"
        },
        "totalPackages": {
          "type": "string",
          "format": "int64"
        },
        "totalMemberships": {
          "type": "string",
          "format": "int64"
        },
        "ltv": {
          "type": "number",
          "format": "float"
        },
        "arpa": {
          "type": "number",
          "format": "float"
        },
        "totalAppointmentAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "totalClassAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "totalGiftCertificateAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "totalPackageAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "totalMembershipAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "lastActivityOn": {
          "type": "string",
          "format": "date-time"
        },
        "mood": {
          "$ref": "#/definitions/v1Mood"
        }
      }
    },
    "v1CustomerReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CustomerReport"
        }
      }
    },
    "v1CustomerReportOverallData": {
      "type": "object",
      "properties": {
        "totalCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CustomerReportSortBy": {
      "type": "string",
      "enum": [
        "CustomerReportSortBy_UNDEFINED",
        "CustomerReportSortBy_CustomerName",
        "CustomerReportSortBy_CustomerEmail"
      ],
      "default": "CustomerReportSortBy_UNDEFINED"
    },
    "v1CustomerVerificationStatusFilter": {
      "type": "object",
      "properties": {
        "emailVerified": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "phoneVerified": {
          "$ref": "#/definitions/typesBooleanFilter"
        }
      },
      "title": "email_verified\ntrue, all\nemail_non-verified\nfalse, all\nphone_verified\nall, true\nphone_non-verified\nall, false\nemail_verified_phone_non_verified\ntrue false\nphone_verified_email_non_verified\nfalse true\n--\nboth_verified\ntrue, true\nboth_non-verified\nfalse, false\nany_verified\nall, all\nany\nobject-nil"
    },
    "v1DetailedCustomerSignupReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1DetailedCustomerSignupReportObject"
        }
      }
    },
    "v1DetailedCustomerSignupReportObject": {
      "type": "object",
      "properties": {
        "signupOn": {
          "type": "string",
          "format": "date-time"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "birthDate": {
          "type": "string",
          "format": "date-time"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "source": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "lastBookedOn": {
          "type": "string",
          "format": "date-time"
        },
        "privateNote": {
          "type": "string"
        },
        "customerId": {
          "type": "string"
        },
        "companyId": {
          "type": "string"
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "formFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerFormField"
          }
        },
        "displayId": {
          "type": "string"
        },
        "linkedLocationNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customerSsoId": {
          "type": "string"
        }
      }
    },
    "v1GetCustomerLoginReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerLoginReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "total": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetDetailedCustomerSignupReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DetailedCustomerSignupReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "data": {
          "$ref": "#/definitions/v1CustomerReportOverallData"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetFilteredCustomersResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetGroupedCustomerSignupReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedCustomerSignupReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "data": {
          "$ref": "#/definitions/v1CustomerReportOverallData"
        }
      }
    },
    "v1GetMonthlySalesReportByCustomerResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MonthlySalesReportByCustomer"
          }
        }
      }
    },
    "v1GroupedCustomerSignupReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedCustomerSignupReportObject"
        }
      }
    },
    "v1GroupedCustomerSignupReportObject": {
      "type": "object",
      "properties": {
        "signupOn": {
          "type": "string",
          "format": "date-time"
        },
        "customerCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1MonthlySalesReportByCustomer": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "sales": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1Mood": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_MOOD",
        "HAPPY",
        "UNHAPPY"
      ],
      "default": "UNSPECIFIED_MOOD"
    },
    "v1ReportFields": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "ADDED_ON_FILTER",
        "LAST_BOOKED_ON_FILTER",
        "LAST_APPOINTMENT_BOOKED_ON_FILTER",
        "LAST_CLASS_BOOKED_ON_FILTER",
        "LAST_REVIEWED_ON_FILTER",
        "LAST_PURCHASED_ON_FILTER",
        "TOTAL_APPOINTMENTS_FILTER",
        "TOTAL_CLASSES_FILTER",
        "TOTAL_GIFT_CERTIFICATES_FILTER",
        "TOTAL_PACKAGES_FILTER",
        "TOTAL_MEMBERSHIPS_FILTER",
        "LTV_FILTER",
        "ARPV_FILTER",
        "TOTAL_APPOINTMENT_AMOUNT_FILTER",
        "TOTAL_CLASS_AMOUNT_FILTER",
        "TOTAL_GIFT_CERTIFICATE_AMOUNT_FILTER",
        "TOTAL_PACKAGE_AMOUNT_FILTER",
        "TOTAL_MEMBERSHIP_AMOUNT_FILTER",
        "LAST_ACTIVITY_ON_FILTER",
        "MOOD_FILTER"
      ],
      "default": "UNSPECIFIED"
    },
    "v1ReportFilter": {
      "type": "object",
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/v1ReportFields"
        },
        "value": {
          "type": "number",
          "format": "float"
        },
        "startDate": {
          "type": "string",
          "format": "date-time"
        },
        "endDate": {
          "type": "string",
          "format": "date-time"
        },
        "operator": {
          "$ref": "#/definitions/v1ReportOperator"
        }
      }
    },
    "v1ReportOperator": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_REPORT_OPERATOR",
        "LESS_THAN",
        "GREATER_THAN",
        "EQUAL",
        "NOT_IN_DATE",
        "IN_DATE"
      ],
      "default": "UNSPECIFIED_REPORT_OPERATOR"
    },
    "v1UpsertCustomerFiltersRequest": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "filters": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Filter"
          }
        }
      }
    },
    "v1CustomerActivity": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "activityType": {
          "$ref": "#/definitions/v1ActivityType"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1CustomerAmount": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "amount": {
          "$ref": "#/definitions/typesPrice"
        },
        "amountType": {
          "$ref": "#/definitions/v1AmountType"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "negative": {
          "type": "boolean",
          "title": "used to subtract value"
        }
      }
    },
    "v1CustomerNumber": {
      "type": "object",
      "properties": {
        "customerId": {
          "type": "string"
        },
        "number": {
          "type": "number",
          "format": "float"
        },
        "numberType": {
          "$ref": "#/definitions/v1NumberType"
        },
        "format": {
          "$ref": "#/definitions/v1NumberFormat"
        },
        "appName": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1GetCustomerActivitiesResponse": {
      "type": "object",
      "properties": {
        "customerActivities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerActivity"
          }
        }
      }
    },
    "v1GetCustomerAmountsResponse": {
      "type": "object",
      "properties": {
        "customerAmounts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerAmount"
          }
        }
      }
    },
    "v1GetCustomerNumbersResponse": {
      "type": "object",
      "properties": {
        "customerNumbers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomerNumber"
          }
        }
      }
    },
    "v1BatchGetServicePriceResponse": {
      "type": "object",
      "properties": {
        "servicePrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServicePrice"
          }
        }
      }
    },
    "v1BatchUpsertServicePriceRequest": {
      "type": "object",
      "properties": {
        "requests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UpsertServicePriceRequest"
          }
        }
      }
    },
    "v1BatchUpsertServicePriceResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServicePriceWrapper"
          }
        }
      }
    },
    "v1GetServicePriceValueResponse": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1ServicePrice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is the Service Price unique identifier"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServicePriceRule"
          },
          "title": "Duration of Service for which price is set"
        }
      },
      "title": "Represents Price to be charged for a service performed for a certain duration\nusing some channel by certain employee"
    },
    "v1ServicePriceRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "just done for chaku, no significance"
        },
        "pattern": {
          "type": "string",
          "title": "glob pattern will be\nchannel_id / employee_id / resource_id / duration"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1ServicePriceWrapper": {
      "type": "object",
      "properties": {
        "price": {
          "$ref": "#/definitions/v1ServicePrice"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1UpsertServicePriceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Service Id for which price is going to be set"
        },
        "rules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServicePriceRule"
          }
        },
        "title": {
          "type": "string"
        }
      }
    },
    "AnalyticsTemplatesUpdateAnalyticsTemplateBody": {
      "type": "object",
      "properties": {
        "analyticsTemplate": {
          "type": "object",
          "properties": {
            "queryId": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "productDefault": {
              "type": "boolean"
            },
            "uiInfo": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "smartyTags": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "userCounts": {
              "type": "string",
              "format": "int64"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AnalyticsTemplate": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent will be company"
        },
        "queryId": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "productDefault": {
          "type": "boolean"
        },
        "uiInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "smartyTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userCounts": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CreateAnalyticsTemplateRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "analyticsTemplate": {
          "$ref": "#/definitions/v1AnalyticsTemplate"
        }
      }
    },
    "v1ListAnalyticsTemplateResponse": {
      "type": "object",
      "properties": {
        "analyticsTemplate": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AnalyticsTemplate"
          }
        }
      }
    },
    "v1ProductFilter": {
      "type": "string",
      "enum": [
        "BUSINESS_CREATED",
        "PRODUCT_DEFAULT",
        "ALL"
      ],
      "default": "BUSINESS_CREATED"
    },
    "v1EmployeeReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of employee"
        },
        "firstName": {
          "type": "string",
          "title": "First Name of the employee"
        },
        "lastName": {
          "type": "string",
          "title": "Last Name of the employee"
        },
        "email": {
          "type": "string",
          "title": "Unique Email of the employee"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem",
          "title": "Url of the profile image"
        },
        "gender": {
          "$ref": "#/definitions/typesGender",
          "title": "Gender of the employee"
        },
        "employeeNumber": {
          "type": "string",
          "title": "employee Number of the employee"
        },
        "phoneNumber": {
          "type": "string",
          "title": "phone Number of the employee"
        },
        "departmentId": {
          "type": "string",
          "title": "department details of employee"
        },
        "departmentName": {
          "type": "string"
        },
        "departmentDescription": {
          "type": "string"
        },
        "designationId": {
          "type": "string",
          "title": "designation details of the employee"
        },
        "designationName": {
          "type": "string"
        },
        "designationDescription": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data of employee"
        },
        "hireDate": {
          "type": "string",
          "format": "date-time",
          "title": "Date on which employee was hired"
        },
        "userId": {
          "type": "string",
          "title": "corresponds to user in system"
        },
        "isInvitationAccepted": {
          "type": "boolean",
          "title": "is_invitation_accepted: if employee is invited and has accepted the invitation,\nthen the field is set to true, else in all other cases, it is false"
        },
        "createdBy": {
          "type": "string",
          "title": "Meta Details\nCreated by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1EmployeeReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1EmployeeReportData"
        }
      }
    },
    "v1GetEmployeeReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetGroupLevelCustomStatusReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupLevelCustomStatusReportLocationNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GroupLevelCustomStatusReportLocationData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id of location"
        },
        "locationName": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        },
        "lastCheckinStatusUpdateOn": {
          "type": "string",
          "format": "date-time",
          "description": "The most recent date of when the check-in status was updated for a location by any user for any appointment."
        },
        "totalConfirmedAppointments": {
          "type": "integer",
          "format": "int32",
          "description": "All appointments with status marked as \"Confirmed\"."
        },
        "checkinStatusUpdateCount": {
          "type": "integer",
          "format": "int32",
          "description": "All appointments with a booking status of \"Confirmed\" and have a check-in status updated."
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "title": "address of location"
        }
      }
    },
    "v1GroupLevelCustomStatusReportLocationNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupLevelCustomStatusReportLocationData"
        }
      }
    },
    "AutomaticReportsUpdateAutomaticReportBody": {
      "type": "object",
      "properties": {
        "automaticReport": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "reportType": {
              "type": "string"
            },
            "interval": {
              "$ref": "#/definitions/typesInterval"
            },
            "emailLists": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "enabled": {
              "type": "boolean"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "contains additional filters"
            },
            "businessFilter": {
              "type": "string"
            },
            "timeslotFilter": {
              "$ref": "#/definitions/typesTimeslot"
            },
            "lastSentDate": {
              "type": "string",
              "format": "date-time"
            },
            "nextSentDate": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1AutomaticReport": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is business for which this report is automated (for UI fetch purposes)"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "reportType": {
          "type": "string"
        },
        "interval": {
          "$ref": "#/definitions/typesInterval"
        },
        "emailLists": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "contains additional filters"
        },
        "businessFilter": {
          "type": "string"
        },
        "timeslotFilter": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "lastSentDate": {
          "type": "string",
          "format": "date-time"
        },
        "nextSentDate": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1BatchGetAutomaticReportResponse": {
      "type": "object",
      "properties": {
        "automaticReport": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AutomaticReport"
          }
        }
      }
    },
    "v1CreateAutomaticReportRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "automaticReport": {
          "$ref": "#/definitions/v1AutomaticReport"
        }
      }
    },
    "v1ListAutomaticReportResponse": {
      "type": "object",
      "properties": {
        "automaticReport": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AutomaticReport"
          }
        }
      }
    },
    "CompaniesUpdateCompanyBody": {
      "type": "object",
      "properties": {
        "company": {
          "type": "object",
          "properties": {
            "displayName": {
              "type": "string"
            },
            "title": {
              "type": "string"
            },
            "description": {
              "type": "string",
              "title": "Description, a short description for the company"
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "profession": {
              "type": "string",
              "description": "Profession is the area in which the company work. like, Salon,spa etc."
            },
            "telephones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Telephones will be used for display purpose only"
            },
            "emails": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Email will be used for display purpose only"
            },
            "website": {
              "type": "string",
              "title": "Website is the company website address eg. www.ThaiSpa.com"
            },
            "address": {
              "$ref": "#/definitions/typesAddress",
              "title": "Address of the company"
            },
            "preference": {
              "$ref": "#/definitions/v1CompanyPreference"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "active": {
              "type": "boolean"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "source": {
              "type": "string"
            },
            "medium": {
              "type": "string"
            },
            "campaign": {
              "type": "string"
            },
            "customCompanyId": {
              "type": "string"
            },
            "migrationStatus": {
              "$ref": "#/definitions/v1CompanyMigrationStatus"
            }
          },
          "title": "Company is the legal entity under which all the operations are performed"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given company object can be\nupdated.\nList of fields which can be updated are  :\nName , Description , logo , Address , Telephones ,emails ,website\n,profession"
        },
        "originalCompany": {
          "$ref": "#/definitions/v1Company"
        }
      },
      "title": "UpdateCompanyRequest contains the company object and update_mask .\nThe update mask will be used to update a specific field in Company object"
    },
    "v1BatchGetCompanyRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids contains the list of Unique company identifier"
        },
        "viewMask": {
          "type": "string"
        }
      },
      "title": "BatchGetCompaniesRequest is the list of id`s of the company"
    },
    "v1BatchGetCompanyResponse": {
      "type": "object",
      "properties": {
        "company": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Company"
          },
          "title": "Companies contains the list of company"
        }
      },
      "description": "BatchGetCompaniesResponse contains the list of companies given in the request object."
    },
    "v1Company": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id is required for chaku as prefix is not provided"
        },
        "name": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "phone": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        }
      }
    },
    "v1CompanyMigrationStatus": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "VERSION1",
        "VERSION2",
        "IN_PROGRESS",
        "MIGRATION_COMPLETED"
      ],
      "default": "UNDEFINED"
    },
    "v1CompanyNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the company list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1Company",
          "title": "Node is the actual company object"
        }
      },
      "title": "CompanyNode is a company object with its position in the list"
    },
    "v1CompanyPreference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Just needed for chaku, no use otherwise"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone format in INA => Ex: \"Etc/UTC\""
        },
        "language": {
          "type": "string",
          "title": "Local Format Ex: \"en-US\""
        },
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "uiInfo": {
          "type": "string",
          "title": "contains json object, used by frontend"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "v1CreateCompanyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given company like\ngroup."
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        }
      },
      "title": "CreateCompanyRequest is the request to create a new company ,"
    },
    "v1ListCompanyResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyNode"
          },
          "title": "Nodes contains the list of company"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      },
      "title": "ListCompanyResponse"
    },
    "v1BatchGetInvoiceResponse": {
      "type": "object",
      "properties": {
        "invoice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Invoice"
          }
        }
      }
    },
    "v1DiscountOffer": {
      "type": "object",
      "properties": {
        "percentageOff": {
          "type": "number",
          "format": "double"
        },
        "amountOff": {
          "$ref": "#/definitions/typesPrice"
        }
      }
    },
    "v1DiscountUsingType": {
      "type": "string",
      "enum": [
        "USE_ITEMS_DISCOUNT",
        "USE_OVERALL_DISCOUNT"
      ],
      "default": "USE_ITEMS_DISCOUNT"
    },
    "v1Invoice": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "invoiceNumber": {
          "type": "string",
          "title": "generate"
        },
        "referenceNumber": {
          "type": "string",
          "title": "It can be purchase_id or order_id"
        },
        "user": {
          "$ref": "#/definitions/v1User"
        },
        "company": {
          "$ref": "#/definitions/v1Company"
        },
        "status": {
          "$ref": "#/definitions/v1InvoiceStatus"
        },
        "subTotal": {
          "$ref": "#/definitions/typesPrice",
          "title": "sub_total: total price of all items before discount and without taxes"
        },
        "total": {
          "$ref": "#/definitions/typesPrice",
          "title": "total: total price of all items including taxes and discounts"
        },
        "discountOffer": {
          "$ref": "#/definitions/v1DiscountOffer",
          "title": "discount_offer: offer provided on invoice"
        },
        "paymentMethod": {
          "$ref": "#/definitions/v1InvoicePaymentMethod"
        },
        "discountUsingType": {
          "$ref": "#/definitions/v1DiscountUsingType",
          "title": "discount_using_type: how discount is to be used -\nUSE_ITEMS_DISCOUNT: use the item level discount offer\nUSE_OVERALL_DISCOUNT: use the invoice level discount offer"
        },
        "discountValue": {
          "$ref": "#/definitions/typesPrice",
          "title": "discount_value: final discount available over the invoice"
        },
        "dueAmount": {
          "$ref": "#/definitions/typesPrice",
          "title": "due_amount: amount dues after invoice has been partially paid"
        },
        "tax": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTaxInfo"
          },
          "title": "taxes: tax on the invoice"
        },
        "sent": {
          "type": "boolean"
        },
        "notes": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceItem"
          },
          "title": "items: individual items in invoice"
        },
        "dueDate": {
          "type": "string",
          "format": "date-time"
        },
        "paidDate": {
          "type": "string",
          "format": "date-time"
        },
        "invoiceDate": {
          "type": "string",
          "format": "date-time"
        },
        "invoiceType": {
          "$ref": "#/definitions/v1InvoiceType"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        },
        "deletedBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        }
      }
    },
    "v1InvoiceItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "itemId": {
          "type": "string",
          "title": "It can be order_id, membership_id"
        },
        "description": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "itemPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "discountOffer": {
          "$ref": "#/definitions/v1DiscountOffer",
          "title": "discount_offer: offer provided on invoice item"
        },
        "quantityFactor": {
          "type": "string",
          "format": "int64",
          "title": "number of units in the item"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "discountAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "validityInDays": {
          "type": "string",
          "format": "int64",
          "title": "validity_in_days: unit item validity in days"
        },
        "paidFor": {
          "type": "string",
          "format": "int64",
          "title": "paid_for how many days"
        },
        "itemType": {
          "$ref": "#/definitions/v1InvoiceItemType"
        },
        "dueAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "transactions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceTransaction"
          }
        },
        "filter1": {
          "type": "string"
        },
        "filter2": {
          "type": "string"
        },
        "filter3": {
          "type": "string"
        }
      }
    },
    "v1InvoiceItemType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "BILLING_PLAN",
        "BILLING_ADDON",
        "APPOINTMENT"
      ],
      "default": "UNSPECIFIED"
    },
    "v1InvoiceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Invoice"
        }
      }
    },
    "v1InvoicePaymentMethod": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "id is required for chaku as prefix is not provided",
          "title": "parent is company or location"
        },
        "name": {
          "type": "string"
        },
        "cardType": {
          "type": "string",
          "title": "Visa, Mastercard"
        },
        "gateway": {
          "$ref": "#/definitions/typesBillingPaymentGateway"
        },
        "lastFour": {
          "type": "string"
        },
        "paypalEmail": {
          "type": "string"
        },
        "expiry": {
          "type": "string"
        },
        "externalCardId": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "externalCustomerId": {
          "type": "string"
        }
      }
    },
    "v1InvoiceRefundInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "no use // TODO: to be removed"
        },
        "amount": {
          "type": "integer",
          "format": "int32"
        },
        "reason": {
          "type": "string"
        },
        "refundBy": {
          "type": "string"
        },
        "refundedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1InvoiceStatus": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "DRAFT",
        "SENT",
        "VIEWED",
        "OVERDUE",
        "COMPLETED",
        "UNPAID",
        "PARTIALLY_PAID",
        "PAID"
      ],
      "default": "UNKNOWN"
    },
    "v1InvoiceTransaction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "additionalCharges": {
          "$ref": "#/definitions/typesPrice"
        },
        "discount": {
          "$ref": "#/definitions/typesPrice"
        },
        "finalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "paymentNote": {
          "type": "string"
        },
        "paymentMethod": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "paymentOn": {
          "type": "string",
          "format": "date-time"
        },
        "paymentBy": {
          "type": "string"
        },
        "refunds": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceRefundInfo"
          }
        },
        "paymentTransaction": {
          "type": "string"
        }
      }
    },
    "v1InvoiceType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "CUSTOMER",
        "BUSINESS"
      ],
      "default": "UNDEFINED"
    },
    "v1ListInvoiceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvoiceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1BatchCreateReceiptResponse": {
      "type": "object",
      "properties": {
        "receipts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Receipt"
          }
        }
      }
    },
    "v1BatchGetReceiptResponse": {
      "type": "object",
      "properties": {
        "receipt": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Receipt"
          }
        }
      }
    },
    "v1Receipt": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent is location"
        },
        "receiptNumber": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string",
          "title": "purchase-id / transaction-id"
        },
        "buyer": {
          "$ref": "#/definitions/v1Buyer"
        },
        "business": {
          "$ref": "#/definitions/v1Business"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string"
        },
        "paymentMethod": {
          "$ref": "#/definitions/typesPaymentMethod"
        },
        "paymentSourceId": {
          "type": "string"
        },
        "totalAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "receiptItems": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReceiptItem"
          }
        },
        "paymentSourceCode": {
          "type": "string"
        }
      }
    },
    "v1ReceiptItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "unitPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "totalAmount": {
          "$ref": "#/definitions/typesPrice"
        },
        "itemId": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "subTitle": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "v1IpInformation": {
      "type": "object",
      "properties": {
        "city": {
          "type": "string"
        },
        "continent": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "countryIsoCode": {
          "type": "string"
        },
        "latitude": {
          "type": "number",
          "format": "double"
        },
        "longitude": {
          "type": "number",
          "format": "double"
        },
        "timezone": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateIsoCode": {
          "type": "string"
        }
      }
    },
    "v1LiquidTemplateParseResponse": {
      "type": "object",
      "properties": {
        "renderedTemplates": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "RecentsUpdateRecentBody": {
      "type": "object",
      "properties": {
        "recent": {
          "type": "object",
          "properties": {
            "userId": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "eventType": {
              "type": "string"
            },
            "platform": {
              "type": "string",
              "title": "chrome plugin, intercom, outlook plugin"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CreateRecentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "location  is parent"
        },
        "recent": {
          "$ref": "#/definitions/v1Recent"
        }
      }
    },
    "v1ListRecentResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1RecentNode"
          },
          "title": "List of Recents"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1Recent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parent location"
        },
        "userId": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "eventType": {
          "type": "string"
        },
        "platform": {
          "type": "string",
          "title": "chrome plugin, intercom, outlook plugin"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1RecentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Recent",
          "title": "Node is the actual customer object"
        }
      }
    }
  }
}
