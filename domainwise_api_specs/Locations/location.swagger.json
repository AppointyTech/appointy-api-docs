{
  "swagger": "2.0",
  "info": {
    "title": "location/pb/location.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Locations"
    },
    {
      "name": "ParentService"
    },
    {
      "name": "LocationSettings"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/locations": {
      "get": {
        "summary": "ListLocations returns all the location under the given parent",
        "operationId": "Locations_ListLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given Location like\ncompany and group",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "query to filter locations",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "post": {
        "summary": "CreateLocation creates new Location under the given parent",
        "operationId": "Locations_CreateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "description": "CreateLocationRequest ...",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateLocationRequest"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/count/{parent}": {
      "get": {
        "summary": "get the count of location present in the company",
        "operationId": "Locations_GetLocationCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetLocationCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/custom-id": {
      "get": {
        "operationId": "Locations_GetLocationByCustomId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "groupId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/{id}": {
      "get": {
        "summary": "GetLocation returns the specified location by its unique id\nGetLocation is an open endpoint for the sake of visibility",
        "operationId": "Locations_GetLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the location with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Location object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nlocation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "delete": {
        "summary": "DeleteLocation soft delete the location from the system",
        "operationId": "Locations_DeleteLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations/{location.id}": {
      "put": {
        "summary": "UpdateLocation updates a location uniquely identified by its ID.\nUpdate location uses Field Mask to update specific properties of location object",
        "operationId": "Locations_UpdateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/locationv1Location"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "location.id",
            "description": "Id is a unique identifier of the location",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LocationsUpdateLocationBody"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations:all": {
      "get": {
        "operationId": "Locations_ListAllLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAllLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    },
    "/v1/locations:batch": {
      "get": {
        "summary": "BatchGetLocations get Location by the list of given location IDs.",
        "operationId": "Locations_BatchGetLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "description": "Ids contains the list of Unique location identifier",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Locations"
        ]
      },
      "put": {
        "summary": "Update Multiple locations -",
        "operationId": "Locations_BatchUpdateLocation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateLocationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateLocationRequest"
            }
          }
        ],
        "tags": [
          "Locations"
        ]
      }
    }
  },
  "definitions": {
    "LocationsUpdateLocationBody": {
      "type": "object",
      "properties": {
        "location": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "description": "Name is the human readable name of the location.\nShould never be considered unique for any purposes\nand should only be used for reference."
            },
            "description": {
              "type": "string",
              "description": "Description is a short description for the location."
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery"
            },
            "telephones": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "description": "Telephones will be used for display purpose , a location can have a\nmultiple phone numbers."
            },
            "address": {
              "$ref": "#/definitions/typesAddress",
              "description": "Address is a physical address of a location , location can only have one\naddress."
            },
            "preference": {
              "$ref": "#/definitions/v1LocationPreference"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "active": {
              "type": "boolean"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "customLocationId": {
              "type": "string"
            },
            "customCompanyId": {
              "type": "string"
            },
            "inactiveDate": {
              "type": "string",
              "format": "date-time"
            },
            "clonedFromLocationId": {
              "type": "string",
              "title": "non-empty represents this location is cloned from another location"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given location object can be updated.\nList of fields which can be updated are  :\nName , Description , Gallery , Address , Telephones"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "UpdateLocationRequest contains the location object and the list of fields to be updates"
    },
    "locationv1Location": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is a unique identifier of the location"
        },
        "name": {
          "type": "string",
          "description": "Name is the human readable name of the location.\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "description": {
          "type": "string",
          "description": "Description is a short description for the location."
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Telephones will be used for display purpose , a location can have a\nmultiple phone numbers."
        },
        "address": {
          "$ref": "#/definitions/typesAddress",
          "description": "Address is a physical address of a location , location can only have one\naddress."
        },
        "preference": {
          "$ref": "#/definitions/v1LocationPreference"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "active": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "customLocationId": {
          "type": "string"
        },
        "customCompanyId": {
          "type": "string"
        },
        "inactiveDate": {
          "type": "string",
          "format": "date-time"
        },
        "clonedFromLocationId": {
          "type": "string",
          "title": "non-empty represents this location is cloned from another location"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesAddress": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "title": "Country , e.g. \"USA\". (required)"
        },
        "locality": {
          "type": "string",
          "title": "Locality or locality/city, e.g. \"Mountain View\". (required)"
        },
        "region": {
          "type": "string",
          "title": "Region, The region/state/province, e.g. \"CA\". This field is only required\nin\ncountries where region is commonly a part of the address. (optional)"
        },
        "postalCode": {
          "type": "string",
          "title": "PostalCode  e.g. \"94043\". (required)"
        },
        "streetAddress": {
          "type": "string",
          "title": "StreetAddress, e.g. \"1600 Amphitheatre Pkwy\". (required)"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "title": "GeoCoordinates , e.g. latitude=23.2599333, longitude=77.41261499999996\nLatitude e.g. 23.2599333"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "Longitude e.g. 77.41261499999996"
        }
      }
    },
    "typesChannelType": {
      "type": "string",
      "enum": [
        "UNKNOWN_CHANNEL_TYPE",
        "EMAIL",
        "SMS",
        "PUSH",
        "WEB",
        "CALENDAR"
      ],
      "default": "UNKNOWN_CHANNEL_TYPE"
    },
    "typesGallery": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesGalleryItem"
          }
        },
        "default": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      },
      "title": "for chaku always tag json"
    },
    "typesGalleryItem": {
      "type": "object",
      "properties": {
        "thumbImage": {
          "type": "string"
        },
        "largeImage": {
          "type": "string"
        }
      },
      "title": "Generic Gallery Item Object"
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "v1BatchGetLocationResponse": {
      "type": "object",
      "properties": {
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      },
      "description": "BatchGetLocationsResponse ..."
    },
    "v1BatchUpdateLocationRequest": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1BatchUpdateLocationResponse": {
      "type": "object",
      "properties": {
        "location": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      }
    },
    "v1BookingPortalSettings": {
      "type": "object",
      "properties": {
        "removeBranding": {
          "type": "boolean"
        }
      }
    },
    "v1CompanyCustomizations": {
      "type": "object",
      "properties": {
        "replyToEmail": {
          "type": "string",
          "title": "remember adding to default object as well in location_settings.go, to avoid nil issue"
        },
        "applyLocationNameAsEmailSender": {
          "type": "boolean"
        },
        "applyCompanyNameAsEmailSender": {
          "type": "boolean"
        },
        "doNotSendPastBookingEmailToAdmin": {
          "type": "boolean"
        },
        "unBranding": {
          "$ref": "#/definitions/v1UnBrandingSetting"
        },
        "hideDescriptionInCalendar": {
          "type": "boolean"
        }
      }
    },
    "v1CompanyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "bookingLink": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        },
        "customizations": {
          "$ref": "#/definitions/v1CompanyCustomizations"
        },
        "installedApps": {
          "$ref": "#/definitions/v1InstalledApps"
        }
      }
    },
    "v1CreateLocationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given Location"
        },
        "location": {
          "$ref": "#/definitions/locationv1Location"
        }
      },
      "description": "CreateLocationRequest ..."
    },
    "v1GetLocationCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GroupInfo": {
      "type": "object",
      "properties": {
        "groupOwnerUserInfo": {
          "$ref": "#/definitions/v1GroupOwnerUserInfo"
        }
      }
    },
    "v1GroupOwnerUserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1InstalledApps": {
      "type": "object",
      "properties": {
        "appointyX": {
          "type": "boolean"
        },
        "sitback": {
          "type": "boolean"
        }
      }
    },
    "v1ListAllLocationsResponse": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/locationv1Location"
          }
        }
      }
    },
    "v1ListLocationResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LocationNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "v1LocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "phoneNumber": {
          "type": "string"
        },
        "logo": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "bookingLink": {
          "type": "string"
        },
        "preferences": {
          "$ref": "#/definitions/v1Preferences"
        },
        "customizations": {
          "$ref": "#/definitions/v1CompanyCustomizations"
        }
      }
    },
    "v1LocationNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/locationv1Location",
          "title": "Node is the actual location object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1LocationPreference": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Just needed for chaku, no use otherwise"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone format in INA =\u003e Ex: \"Etc/UTC\""
        },
        "language": {
          "type": "string",
          "title": "Local Format Ex: \"en-US\""
        },
        "dateFormat": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "uiInfo": {
          "type": "string",
          "title": "contains json object, used by frontend"
        },
        "currency": {
          "type": "string"
        },
        "currencyFormat": {
          "type": "string"
        }
      }
    },
    "v1LocationSetting": {
      "type": "object",
      "properties": {
        "locationInfo": {
          "$ref": "#/definitions/v1LocationInfo"
        },
        "companyInfo": {
          "$ref": "#/definitions/v1CompanyInfo"
        },
        "groupInfo": {
          "$ref": "#/definitions/v1GroupInfo"
        },
        "sendNotificationSettings": {
          "$ref": "#/definitions/v1SendNotificationSettings"
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1BookingPortalSettings"
        }
      }
    },
    "v1Preferences": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "timeFormat": {
          "type": "string"
        },
        "dateFormat": {
          "type": "string"
        }
      }
    },
    "v1SendNotificationSettings": {
      "type": "object",
      "properties": {
        "okAdmin": {
          "type": "boolean"
        },
        "okClient": {
          "type": "boolean"
        },
        "skipIcs": {
          "type": "boolean"
        },
        "skipIcsAdmin": {
          "type": "boolean"
        },
        "skipIcsClient": {
          "type": "boolean"
        }
      }
    },
    "v1SendNotificationSettingsFilter": {
      "type": "object",
      "properties": {
        "eventType": {
          "type": "string"
        },
        "channelType": {
          "$ref": "#/definitions/typesChannelType"
        }
      }
    },
    "v1UnBrandingSetting": {
      "type": "object",
      "properties": {
        "calendarInviteSubject": {
          "type": "string"
        }
      }
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    }
  }
}
