{
  "swagger": "2.0",
  "info": {
    "title": "role/pb/role.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Roles"
    },
    {
      "name": "ParentService"
    },
    {
      "name": "LevelValidatorService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/role": {
      "post": {
        "summary": "Create Role can be used to create the different role within an organization.\nRole can  be created at location, company or group level.",
        "operationId": "Roles_CreateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles": {
      "get": {
        "summary": "List role can be used to fetch the details of all created role within an organization.",
        "operationId": "Roles_ListRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "hide",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/master": {
      "get": {
        "summary": "It will return the list of default role created by the system.\nDefault role are based on level. There are two roles for each level i.e Owner, CoOwner.",
        "operationId": "Roles_ListDefaultRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDefaultRoleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "slug",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "optional: used for override roles logic",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/service-account/assign": {
      "post": {
        "operationId": "Roles_AssignServiceAccountRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AssignServiceAccountRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user": {
      "get": {
        "summary": "This method is used to list all users within organization at a specific level.",
        "operationId": "Roles_GetUsersByLevelId",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelIdResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "roleId",
            "description": "for filtering by role id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/assign": {
      "post": {
        "summary": "This method is used to assign the role to the user.\nIf the user already have that role assigned it will do nothing otherwise append the new role.",
        "operationId": "Roles_AssignRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AssignRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/invite/users": {
      "post": {
        "operationId": "Roles_InviteUsersToRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1InviteUsersToRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/level": {
      "post": {
        "operationId": "Roles_GetUsersByLevel",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GetUsersByLevelRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/remove": {
      "post": {
        "summary": "This method is used to remove the role to the user.\nIf the user do not have that role assigned it will do nothing otherwise remove the provided role.",
        "operationId": "Roles_RemoveRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1RemoveRoleRequest"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/{userId}": {
      "get": {
        "summary": "This method can be used to fetch all the assigned role of the user.\nIt will return roles across all the organizations.",
        "operationId": "Roles_GetUserRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UserRole"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/user/{userId}/update": {
      "post": {
        "operationId": "Roles_UpdateAssignedRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateAssignedRolesBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/{id}": {
      "delete": {
        "summary": "Delete role will delete the role from organization.\nIt will also remove the roles from the assigned user.",
        "operationId": "Roles_DeleteRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/roles/{role.id}": {
      "put": {
        "summary": "Update Role can be used to update an existing role.\nIt will update rights against all users who have this role assigned.\n* Role level (Group, Company, location) Can't be changed by this method.",
        "operationId": "Roles_UpdateRole",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Role"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "role.id",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/RolesUpdateRoleBody"
            }
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/roles/invited": {
      "get": {
        "summary": "This method is used to list all the invited user within an organization / at a specific level within an organization.",
        "operationId": "Roles_ListInvitedUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListInvitedUserResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "levelId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "levelOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    },
    "/v1/user/roles/users/module-roles/{companyId}": {
      "get": {
        "operationId": "Roles_ListUsersOfModuleRoles",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUsersOfModuleRolesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Roles"
        ]
      }
    }
  },
  "definitions": {
    "RolesUpdateAssignedRolesBody": {
      "type": "object",
      "properties": {
        "assignRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "removeRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "RolesUpdateRoleBody": {
      "type": "object",
      "properties": {
        "role": {
          "type": "object",
          "properties": {
            "roleName": {
              "type": "string"
            },
            "level": {
              "type": "string"
            },
            "moduleRoleNames": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "isDefault": {
              "type": "boolean"
            },
            "priority": {
              "type": "string",
              "format": "int64"
            },
            "description": {
              "type": "string"
            },
            "slug": {
              "type": "string"
            },
            "displayModuleRoles": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1DisplayModuleRole"
              }
            },
            "internal": {
              "type": "boolean"
            },
            "overriddenRoleId": {
              "type": "string",
              "title": "role id that is overridden"
            }
          },
          "title": "Role is a custom role object\nThe role is created at a certain level\nThe role saves corresponding module_role_ids using which patterns can be obtained and filled with the level ids"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "v1AssignRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "v1AssignServiceAccountRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1BatchGetRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          },
          "title": "Customer contains list of customers requested"
        }
      }
    },
    "v1BatchGetUserRoleResponse": {
      "type": "object",
      "properties": {
        "userRole": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          },
          "title": "Customer contains list of customers requested"
        }
      }
    },
    "v1BatchGetUsersByRolesResponse": {
      "type": "object",
      "properties": {
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateRoleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "role": {
          "$ref": "#/definitions/v1Role"
        }
      }
    },
    "v1DisplayModuleRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "appName": {
          "type": "string"
        }
      }
    },
    "v1GetAssignedUsersByRoleResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetPrefixResponse": {
      "type": "object",
      "properties": {
        "prefix": {
          "type": "string"
        }
      }
    },
    "v1GetUsersByLevelIdResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1GetUsersByLevelRequest": {
      "type": "object",
      "properties": {
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1GetUsersByLevelResponse": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRole"
          }
        }
      }
    },
    "v1InviteUserObject": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1InviteUsersToRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "language": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InviteUserObject"
          }
        }
      }
    },
    "v1ListCustomRolesResponse": {
      "type": "object",
      "properties": {
        "customRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListDefaultRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListInvitedUserResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleIdNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1ListRoleResponse": {
      "type": "object",
      "properties": {
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Role"
          }
        }
      }
    },
    "v1ListUsersOfModuleRolesResponse": {
      "type": "object",
      "properties": {
        "companyId": {
          "type": "string"
        },
        "userIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ModuleRoleAtLevel": {
      "type": "object",
      "properties": {
        "moduleRoleName": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1RemoveRoleRequest": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        },
        "validateOnly": {
          "type": "boolean"
        }
      }
    },
    "v1Role": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "roleName": {
          "type": "string"
        },
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isDefault": {
          "type": "boolean"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "description": {
          "type": "string"
        },
        "slug": {
          "type": "string"
        },
        "displayModuleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DisplayModuleRole"
          }
        },
        "internal": {
          "type": "boolean"
        },
        "overriddenRoleId": {
          "type": "string",
          "title": "role id that is overridden"
        }
      },
      "title": "Role is a custom role object\nThe role is created at a certain level\nThe role saves corresponding module_role_ids using which patterns can be obtained and filled with the level ids"
    },
    "v1UserRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "role": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UserRoleRole"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleId": {
      "type": "object",
      "properties": {
        "userId": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        }
      }
    },
    "v1UserRoleIdNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1UserRoleId"
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "v1UserRoleNode": {
      "type": "object",
      "properties": {
        "node": {
          "$ref": "#/definitions/v1UserRole"
        },
        "cursor": {
          "type": "string"
        }
      }
    },
    "v1UserRoleRole": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "roleId": {
          "type": "string"
        },
        "levelId": {
          "type": "string"
        }
      }
    },
    "v1ValidateLevelResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    }
  }
}
