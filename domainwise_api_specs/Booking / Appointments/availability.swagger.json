{
  "swagger": "2.0",
  "info": {
    "title": "appointment/pb/availability.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Availability"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/appointment/admin-availability": {
      "post": {
        "operationId": "Availability_ListAdminSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability": {
      "post": {
        "summary": "ListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dates": {
      "post": {
        "summary": "ListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dynamic": {
      "post": {
        "operationId": "Availability_ListDynamicSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved-services-employees": {
      "post": {
        "operationId": "Availability_ImprovedListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved/dates": {
      "post": {
        "summary": "ImprovedListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ImprovedListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/services-employees": {
      "post": {
        "summary": "ListServicesOrEmployees returns the list of services or employees available based on the filter criteria",
        "operationId": "Availability_ListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/improved/availability": {
      "post": {
        "summary": "ImprovedListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ImprovedListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesTimeslot": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Timeslot object"
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Services is the list of services that are required to be booked.\nServices are fetched using an 'OR' condition. For example,\nServices '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Employees is the list of employees that are required to be booked.\nEmployees are fetched using an 'OR' condition. For example,\nEmployees '1' and '2' are sent. Slots which can book either '1' or '2' will be returned\nBut if some value in HostEmployee is passed then all these Employees will work in 'AND'\ncondition along with the HostEmployee and all these Employees will be considered as\nthe other invitees in the booking."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources is the list of resources that are required to be booked.\nResources are fetched using an 'OR' condition. For example,\nresources '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Channels is the list of Channels that are required to be booked.\nChannels are fetched using an 'OR' condition. For example,\nChannels '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ResourceTypes is the list of resource types that are required to be booked.\nResourceTypes are fetched using an 'OR' condition. For example,\nresource types '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        },
        "duration": {
          "type": "string",
          "format": "int64",
          "title": "duration in seconds if provided then the slot will only returned if their duration matches"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity is the min allowed capacity for the slot"
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "LastRequestTime is used to provide an added buffer to some time based settings, check. When\nthe difference between allowed time and current time is less than 2 minutes."
        },
        "exactlyInBetween": {
          "type": "boolean",
          "title": "exactly in between"
        },
        "hostEmployee": {
          "type": "string",
          "description": "HostEmployee will represent the host of the meeting and when this is passed, and all the other\nEmployees will be considered as the other invitees (participants) of the meeting."
        },
        "consumerId": {
          "type": "string",
          "title": "ConsumerId is used for getting the consumer restrictions and filtering the restrictions at availability level"
        },
        "existingAppointmentId": {
          "type": "string",
          "title": "ExistingAppointmentId"
        },
        "existingAppointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ExistingAppointmentIds - Use this to handle Multiple Existing Id Case"
        },
        "serviceTemplateMatchingRules": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timezone": {
          "type": "string"
        },
        "skipLookBusy": {
          "type": "boolean"
        }
      },
      "description": "Parent and time_slot are required, while all rest are optional",
      "title": "Filter is the critieria for filtering available slots.\nEach root level field is applied in an 'AND' condition.\nFor example, Services is ['1'] and Employees ['5'], it returns slots which are performed\nby Employee '5' and of Service '1'"
    },
    "v1ListAdminSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListAdminSlotsRequest"
        }
      }
    },
    "v1ListAdminSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListDatesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the ListDateRequest (Min Length : 1)"
        }
      }
    },
    "v1ListDatesResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "Available contains dates as key and true/false as values, true if available"
        },
        "errorMessage": {
          "type": "string"
        },
        "datesStatus": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DatesStatus contains dates as key and type of slot(available/booked) as values"
        }
      }
    },
    "v1ListDynamicSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListDynamicSlotsRequest"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "isDynamic": {
          "type": "boolean"
        }
      }
    },
    "v1ListDynamicSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Slot"
          },
          "title": "Slots contains time slots for resources"
        }
      }
    },
    "v1ListServicesOrEmployeesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "listEmployees": {
          "type": "boolean",
          "title": "default behaviour of the endpoint is to return available services\nand if employees are required set list_employees field true"
        }
      }
    },
    "v1ListServicesOrEmployeesResponse": {
      "type": "object",
      "properties": {
        "availableIds": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListSlotsRequest"
        }
      }
    },
    "v1ListSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "slotRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotRule"
          },
          "title": "deprecated"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ReasonOfUnavailability": {
      "type": "string",
      "enum": [
        "None",
        "EmployeeUnavailable",
        "ResourceUnavailable",
        "ResourceTypeUnavailable",
        "ServiceUnavailable"
      ],
      "default": "None"
    },
    "v1Slot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner\nParent is usually location. Not sure what it will be"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "channel": {
          "type": "string",
          "description": "Channel is the id of the channel."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources are the ids of the resources that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resource types are the ids of the resource types that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Total capacity of the slot"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "slot metadata"
        },
        "otherEmployees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OtherEmployees of the meeting"
        },
        "maxCapacity": {
          "type": "string",
          "format": "int64",
          "title": "MaxCapacity of the slot"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1SlotRule": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "Slot contains time slots for resources."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "StartTime of the slot."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Endtime of slot."
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Duration of slot."
        }
      },
      "description": "SlotRule returns the slots available as a rule.\nSlot is repeated from StartTime to EndTime with the given Durations from StartTime.\nFor example, StartTime is 9:00 AM PST, EndTime is 5:00 PM PST. and a Duration is 30 min. Slot is available\nfrom 9:00 AM PST to 9:30 AM PST, 9:30 AM PST to 10:00 AM PST and so on until 4:30 PM PST to 5:00 PM PST.\nsimilarly for each duration in the duration-slice."
    },
    "v1SlotType": {
      "type": "string",
      "enum": [
        "Available",
        "AvailableAppointment",
        "BookedAppointment",
        "BlockedHours",
        "NonOpenHours",
        "LeasedAppointment"
      ],
      "default": "Available",
      "title": "- NonOpenHours: not handled\n - LeasedAppointment: Partial availability - not considered"
    },
    "v1SlotWrapper": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1SlotType"
        },
        "slot": {
          "$ref": "#/definitions/v1Slot"
        },
        "reason": {
          "$ref": "#/definitions/v1ReasonOfUnavailability"
        }
      }
    }
  }
}
