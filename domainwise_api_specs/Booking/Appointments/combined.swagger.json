{
  "openapi": "3.0.0",
  "info": {
    "title": "Appointments",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/resources": {
      "get": {
        "summary": "Lists all the resources",
        "operationId": "Resources_ListResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceTypeIds",
            "description": "optional",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Resources"
        ]
      },
      "post": {
        "summary": "Creates a Resource of a particular resource type",
        "operationId": "Resources_BatchCreateResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceRequest"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/count/{parent}": {
      "get": {
        "operationId": "Resources_GetResourceCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourceCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/order/{resourceId}": {
      "put": {
        "operationId": "Resources_UpdateResourceDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesUpdateResourceDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/{id}": {
      "get": {
        "summary": "Gets a Resource by Id",
        "operationId": "Resources_GetResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Resource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Resources"
        ]
      },
      "delete": {
        "summary": "Deletes a resource by Id",
        "operationId": "Resources_DeleteResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/resources/{resource.id}": {
      "put": {
        "summary": "Updates a Resource",
        "operationId": "Resources_UpdateResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Resource"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resource.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourcesUpdateResourceBody"
            }
          }
        ],
        "tags": [
          "Resources"
        ]
      }
    },
    "/v1/settings/matching-rules": {
      "post": {
        "operationId": "MatchingRules_CreateMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateMatchingRuleRequest"
            }
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules/{id}": {
      "get": {
        "operationId": "MatchingRules_GetMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      },
      "delete": {
        "operationId": "MatchingRules_DeleteMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules/{matchingRule.id}": {
      "put": {
        "operationId": "MatchingRules_UpdateMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1MatchingRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "matchingRule.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/MatchingRulesUpdateMatchingRuleBody"
            }
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/settings/matching-rules:list": {
      "get": {
        "operationId": "MatchingRules_ListMatchingRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListMatchingRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "MatchingRules"
        ]
      }
    },
    "/v1/profession-categories": {
      "get": {
        "summary": "ListProfessionCategory lists all the ProfessionCategory(s)",
        "operationId": "ProfessionCategories_ListProfessionCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProfessionCategoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "ProfessionCategories"
        ]
      }
    },
    "/v1/profession-categories/{id}": {
      "get": {
        "summary": "GetProfessionCategory returns the profession category by its unique id.",
        "operationId": "ProfessionCategories_GetProfessionCategory",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ProfessionCategory"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ProfessionCategories"
        ]
      }
    },
    "/v1/designations": {
      "get": {
        "summary": "ListDesignation returns all the service providers of the specified\nparent.",
        "operationId": "Designations_ListDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Designation object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\ndesignation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Designations"
        ]
      },
      "post": {
        "summary": "CreateDesignation Creates a new designation",
        "operationId": "Designations_CreateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDesignationRequest"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations/{designation.id}": {
      "put": {
        "summary": "UpdateDesignation updates a designation uniquely identified by its ID.",
        "operationId": "Designations_UpdateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "designation.id",
            "description": "Id a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DesignationsUpdateDesignationBody"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations/{id}": {
      "get": {
        "summary": "GetDesignation returns a designation based on its unique ID.",
        "operationId": "Designations_GetDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Designation"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Designation object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\ndesignation object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Designations"
        ]
      },
      "delete": {
        "summary": "DeleteDesignation deletes a designation based on its unique ID.\nNote: This method soft deletes the designation.",
        "operationId": "Designations_DeleteDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is a unique identifier for designation",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/designations:batchCreate": {
      "post": {
        "summary": "BatchCreateDesignation Creates a new designation",
        "operationId": "Designations_BatchCreateDesignation",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDesignationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDesignationRequest"
            }
          }
        ],
        "tags": [
          "Designations"
        ]
      }
    },
    "/v1/block-hours": {
      "get": {
        "summary": "ListBlockHourRule lists all the block hour rules",
        "operationId": "BlockHours_ListBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Block hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nblock hour rule object.\nMessage is required",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "One of the 2 fields (parent/resource_id) is required",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "externalSourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BLOCK_HOUR_UNKNOWN",
                "BLOCK_HOUR_APPROVED",
                "BLOCK_HOUR_DENIED",
                "BLOCK_HOUR_WAITING_FOR_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      },
      "post": {
        "operationId": "BlockHours_CreateBlockHourRuleForMultipleResources",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateBlockHourRuleForMultipleResourcesRequest"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/batch": {
      "delete": {
        "summary": "DeleteBlockHourRule will delete the block hour rule from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "BlockHours_DeleteListOfBlockHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetBlockHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/calender:list": {
      "get": {
        "summary": "ListBlockHourRulesForCalendar lists all the block hour rules between a specific duration for calendar",
        "operationId": "BlockHours_ListBlockHourRulesForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBlockHourRulesForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "description": "Represents the start time of blocking any resource\nvalue is required",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "Represents the end time of blocking any resource\nvalue is required",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "Parent contains the hierarchical information of the given block hour rule like\nits group.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "sources",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "externalSourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "internalCall",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statuses",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "BLOCK_HOUR_UNKNOWN",
                "BLOCK_HOUR_APPROVED",
                "BLOCK_HOUR_DENIED",
                "BLOCK_HOUR_WAITING_FOR_APPROVAL"
              ]
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/check-pre-existing-booking-for-block-hour": {
      "get": {
        "operationId": "BlockHours_CheckPreExistingBookingForBlockHour",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckPreExistingBookingForBlockHourResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "request.parent",
            "description": "Parent contains the hierarchical information of the given block hour rules\nlike group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.resourceId",
            "description": "Id of the specific resource/employee",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.slotDurationInMinutes",
            "description": "slot of time for which the resource is blocked\nDuration must be greater than zero; only if recurrence set provided",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "request.recurrenceSet",
            "description": "RRule Set for which time will be blocked",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "request.recurringSlotStartTime",
            "description": "Start time for recurring slots",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "request.metadata",
            "description": "Additional information for blocking\n\nThis is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.reason",
            "description": "Reason due to which the resource is blocked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.locale",
            "description": "Locale in which the time slot is blocked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.title",
            "description": "Title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.externalSourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "request.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/data-code/{code}": {
      "put": {
        "operationId": "BlockHours_UpdateBlockHourByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateBlockHourByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourByDataCodeBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/status/{blockHourRuleId}": {
      "put": {
        "operationId": "BlockHours_UpdateBlockHourRuleStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateBlockHourRuleStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourRuleStatusBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{blockHourRule.id}": {
      "put": {
        "summary": "UpdateBlockHoursRule will update the block hour rule identified by its id.\nUpdateBlockHoursRule uses Field Mask to update specific properties of block hour rule object",
        "operationId": "BlockHours_UpdateBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRule.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BlockHoursUpdateBlockHourRuleBody"
            }
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{blockHourRuleId}": {
      "delete": {
        "summary": "DeleteBlockHourRule will delete the block hour rule from the system by Id.\nThis will be a soft delete from the system",
        "operationId": "BlockHours_DeleteBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "blockHourRuleId",
            "description": "Id is the fully qualified url of the block hour rule with its hierarchy details\nMinimum length of the ID should be 1",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "slotIds",
            "description": "This is an optional field",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "allFuture",
            "description": "All future",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{code}": {
      "get": {
        "operationId": "BlockHours_GetBlockHourByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/block-hours/{id}": {
      "get": {
        "summary": "GetBlockHourRule returns the BlockHour Rule by its unique id.",
        "operationId": "BlockHours_GetBlockHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BlockHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the block hour rule with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Block hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nblock hour rule object.\nMessage is required",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BlockHours"
        ]
      }
    },
    "/v1/resource-tier": {
      "post": {
        "operationId": "ResourceTiers_CreateResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateResourceTierRequest"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-priorities": {
      "get": {
        "operationId": "ResourceTiers_ListResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTierPrioritiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      },
      "delete": {
        "operationId": "ResourceTiers_DeleteResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-priorities/{parent}": {
      "put": {
        "summary": "Resource Tier Priorities' Endpoints",
        "operationId": "ResourceTiers_UpsertResourceTierPriorities",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertResourceTierPrioritiesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpsertResourceTierPrioritiesBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier-settings/{parent}": {
      "put": {
        "summary": "Resource Tier Settings' Endpoints\nUpsertResourceTierSettings internally upserts the appointment booking flow settings for a given location, and create the log",
        "operationId": "ResourceTiers_UpsertResourceTierSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertResourceTierSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is locationId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpsertResourceTierSettingsBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/filtered-tiers": {
      "get": {
        "operationId": "ResourceTiers_FetchFilteredTiersByLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchFilteredTiersByLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.tierEmployeeAllocation",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Unspecified",
              "Location_Based",
              "Service_Based"
            ],
            "default": "Unspecified"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/{id}": {
      "get": {
        "operationId": "ResourceTiers_GetResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from resource tier object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      },
      "delete": {
        "operationId": "ResourceTiers_DeleteResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tier/{resourceTier.id}": {
      "put": {
        "operationId": "ResourceTiers_UpdateResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceTier"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceTier.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTiersUpdateResourceTierBody"
            }
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/resource-tiers": {
      "get": {
        "operationId": "ResourceTiers_ListResourceTier",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTierResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceTierType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED",
              "IDENTIFIABLE_RESOURCE",
              "EMPLOYEE"
            ],
            "default": "UNSPECIFIED"
          }
        ],
        "tags": [
          "ResourceTiers"
        ]
      }
    },
    "/v1/dynamic-links/appointment": {
      "post": {
        "operationId": "DynamicLinks_CreateDynamicLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLinkAppointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDynamicLinkAppointmentRequest"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/resource/{resourceId}": {
      "get": {
        "summary": "List By Resource Id",
        "operationId": "DynamicLinks_ListDynamicLinkByResource",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicLinkByResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/user/{userId}": {
      "get": {
        "summary": "List By User Id or parent",
        "operationId": "DynamicLinks_ListDynamicLinkByUser",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicLinkByResourceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/{guid}": {
      "get": {
        "summary": "GetDynamicLink returns the dynamic link by its unique id.",
        "operationId": "DynamicLinks_GetDynamicLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AvailableDynamicLinkSlots"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "guid",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/appointment/{id}": {
      "delete": {
        "summary": "Delete By Id",
        "operationId": "DynamicLinks_DeleteDynamicLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/dynamic-links/{dynamicLinkAppointment.id}": {
      "put": {
        "summary": "Update Single Use Link",
        "operationId": "DynamicLinks_UpdateSingleUseLinkAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLinkAppointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dynamicLinkAppointment.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DynamicLinksUpdateSingleUseLinkAppointmentBody"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/settings/booking-portal/locations/{companyId}": {
      "get": {
        "operationId": "BookingPortalSettings_ListBookingPortalSettingOfLocations",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListBookingPortalSettingOfLocationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal/{bookingPortalSetting.id}": {
      "post": {
        "operationId": "BookingPortalSettings_UpsertBookingPortalGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "bookingPortalSetting.id",
            "description": "settings are on company/location level",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookingPortalSettingsUpsertBookingPortalGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      },
      "put": {
        "summary": "UpsertBookingPortalSetting,\nupdates booking-portal-setting if settings exist\nelse insert a booking-portal-setting if empty for location",
        "operationId": "BookingPortalSettings_UpsertBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "bookingPortalSetting.id",
            "description": "settings are on company/location level",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/BookingPortalSettingsUpsertBookingPortalSettingBody"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal/{parent}": {
      "get": {
        "summary": "GetBookingPortalSetting returns a booking-portal-setting of location\nalso create default setting if not found - open",
        "operationId": "BookingPortalSettings_GetBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BookingPortalSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from booking-portal-setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nbooking-portal-setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      },
      "delete": {
        "operationId": "BookingPortalSettings_ResetBookingPortalGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/settings/booking-portal:batch": {
      "put": {
        "summary": "BatchUpsertBookingPortalSetting,\nupdates booking-portal-setting if settings exist\nelse insert a booking-portal-setting if empty for location",
        "operationId": "BookingPortalSettings_BatchUpsertBookingPortalSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertBookingPortalSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertBookingPortalSettingRequest"
            }
          }
        ],
        "tags": [
          "BookingPortalSettings"
        ]
      }
    },
    "/v1/departments": {
      "get": {
        "summary": "ListDepartment returns all the departments within a given parent like group",
        "operationId": "Departments_ListDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given department like\nits company/location.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask is the list of fields that need to be returned. Defaults to all.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "post": {
        "summary": "CreatesDepartment creates a new department",
        "operationId": "Departments_CreateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments/{department.id}": {
      "put": {
        "summary": "UpdateDepartment updates a department uniquely identified by its ID.\nUpdate department uses Field Mask to update properties of department object",
        "operationId": "Departments_UpdateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "department.id",
            "description": "Id of the department",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/DepartmentsUpdateDepartmentBody"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments/{id}": {
      "get": {
        "summary": "GetDepartment returns the department based on its unique ID",
        "operationId": "Departments_GetDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Department"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the department with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from Department object that has to be returned.\nIf a FieldMask object is not present then return all the field from the Department object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Departments"
        ]
      },
      "delete": {
        "summary": "DeleteDepartment deletes a specific department identified by the given ID.\nNote: This method soft deletes the department.",
        "operationId": "Departments_DeleteDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of the department.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/departments:batchCreate": {
      "post": {
        "operationId": "Departments_BatchCreateDepartment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDepartmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateDepartmentRequest"
            }
          }
        ],
        "tags": [
          "Departments"
        ]
      }
    },
    "/v1/appointment": {
      "post": {
        "summary": "Client request to add a appointment\nAccepts CreateAppointmentRequest which contains parent information and\nappointment and returns newly added Appointment if all the\nvalidations are passed. Refer to CreateAppointmentRequest &\nAppointment message to know what validations are applied",
        "operationId": "Appointments_CreateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/add/consumers/recurring/{recurringId}": {
      "patch": {
        "operationId": "Appointments_AddConsumersToRecurringAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AddConsumersToRecurringAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "recurringId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsAddConsumersToRecurringAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/add/consumers/{appId}": {
      "patch": {
        "operationId": "Appointments_AddConsumers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsAddConsumersBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/appointmentsOfAnOrder/{orderId}": {
      "patch": {
        "operationId": "Appointments_ListAppointmentsOfOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentsOfOrderResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsListAppointmentsOfOrderBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancel": {
      "patch": {
        "operationId": "Appointments_BatchCancelAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCancelAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCancelAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancel/consumer/{appointmentId}": {
      "patch": {
        "operationId": "Appointments_BatchCancelConsumers",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCancelConsumersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsBatchCancelConsumersBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/cancellation/policy": {
      "get": {
        "operationId": "Appointments_AppointmentsCancellationPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/delete": {
      "delete": {
        "operationId": "Appointments_BatchDeleteAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/batch/update": {
      "put": {
        "operationId": "Appointments_BatchUpdateAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpdateAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar": {
      "get": {
        "summary": "ListAppointmentsForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_ListAppointmentsForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentsForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "perDayLimit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderNotImportant",
            "description": "OrderNotImportant: Order of appointments in the list is not important.\nIf is false, the list will be in ascending order by appointment start time.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetchOtherParentBlockingAppointments",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar-events": {
      "get": {
        "summary": "ListAppointmentEventsForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_ListAppointmentEventsForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentEventsForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "perDayLimit",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderNotImportant",
            "description": "OrderNotImportant: Order of appointments in the list is not important.\nIf is false, the list will be in ascending order by appointment start time.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "fetchOtherParentBlockingAppointments",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/calendar/search": {
      "get": {
        "summary": "AppointmentSearchForCalendar returns all the appointments on the basis of specified filters",
        "operationId": "Appointments_AppointmentSearchForCalendar",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentSearchForCalendarResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "full location id should be passed here",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "serviceName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerName",
            "description": "student name should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "Guardian name should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "free text search on above list of fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "description": "student email should be passed in this field",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancel/ported/{dataCodeId}": {
      "patch": {
        "operationId": "Appointments_CancelPortedAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelPortedAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancel/{dataCodeId}": {
      "patch": {
        "operationId": "Appointments_CancelAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAppointmentByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancelAllFutureAppointments/{consumerId}": {
      "patch": {
        "operationId": "Appointments_CancelAllFutureAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAllFutureAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAllFutureAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancelAppointment/{id}": {
      "patch": {
        "operationId": "Appointments_CancelAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/cancellation/policy": {
      "get": {
        "operationId": "Appointments_AppointmentCancellationPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "quantity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeConsumerStatus/{appId}": {
      "patch": {
        "operationId": "Appointments_ChangeConsumerStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appId",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeConsumerStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeStatus/{dataCode}": {
      "patch": {
        "operationId": "Appointments_ChangeAppointmentStatusByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeAppointmentStatusByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "description": "Data code contains appointment-id and consumer-id to cancel appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeAppointmentStatusByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/changeStatus/{id}": {
      "patch": {
        "operationId": "Appointments_ChangeAppointmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeAppointmentStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeAppointmentStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/check-availability": {
      "post": {
        "operationId": "Appointments_BatchCheckAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCheckAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCheckAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumer-rsvp": {
      "patch": {
        "summary": "The admin will not be able to change the RSVP status of the consumer\nhttps://appointy.atlassian.net/browse/AXN-1314?focusedCommentId=17114",
        "operationId": "Appointments_UpdateConsumerRSVP",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateConsumerRSVPRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumer/data_code/{dataCode}": {
      "patch": {
        "operationId": "Appointments_UpdateConsumerRSVPByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateConsumerRSVPByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCode",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateConsumerRSVPByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/consumers/quantity/{appointmentId}": {
      "put": {
        "operationId": "Appointments_UpdateConsumersQuantity",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateConsumersQuantityBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count": {
      "get": {
        "operationId": "Appointments_GetAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "description": "either duration or end time must be set and if both are passed duration is used",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "description": "either one parent or one employee id is required",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "duration",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count/consumer": {
      "get": {
        "operationId": "Appointments_ConsumerAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilters.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/count/consumer:batch": {
      "get": {
        "operationId": "Appointments_BatchConsumerAppointmentCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchConsumerAppointmentCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilters.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/custom-statuses": {
      "get": {
        "operationId": "Appointments_ListAppointmentCustomStatuses",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentCustomStatusesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fetchBelowLevel",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "post": {
        "operationId": "Appointments_CreateAppointmentCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentCustomStatusRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/custom-statuses/{customStatus.id}": {
      "put": {
        "operationId": "Appointments_UpdateAppointmentCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentCustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatus.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentCustomStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/data_code/ported/{dataCodeId}": {
      "put": {
        "operationId": "Appointments_UpdatePortedAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdatePortedAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/data_code/{dataCodeId}": {
      "put": {
        "operationId": "Appointments_UpdateAppointmentByDataCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateAppointmentByDataCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "dataCodeId",
            "description": "Data code contains appointment-id and consumer-id to update appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentByDataCodeBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/delete/{id}": {
      "delete": {
        "summary": "DeleteAppointment deletes the appointment from the system using its unique ID.",
        "operationId": "Appointments_DeleteAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "description": "for sole purpose of rights check",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.id",
            "description": "Id of the appointment.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.timeSlot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.timeSlot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.service.id",
            "description": "id can be empty as it can be dynamically booked",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.title",
            "description": "Title of the service in various locales.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.capacity",
            "description": "Capacity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.preBufferTime",
            "description": "Pre appointment buffer time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.postBufferTime",
            "description": "Post appointment buffer time in seconds",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.service.isDynamic",
            "description": "in case of  link sharing  , we have to create dynamic service",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.service.lastId",
            "description": "in case of update: the last service id will contain old service id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.templateId",
            "description": "service template id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.service.dynamicLinkId",
            "description": "dynamic link id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.channel.id",
            "description": "Id of the channel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.channel.name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.id",
            "description": "Id of the employee. (required)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.firstName",
            "description": "FirstName of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.lastName",
            "description": "LastName of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.email",
            "description": "Email of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.profileId",
            "description": "profile id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.lastId",
            "description": "in case of update: the last employee id will contain old employee id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.name",
            "description": "only for readonly purpose: name = first_name + \" \" + last_name",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.employee.smsReminderSent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.employee.emailReminderSent",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.employee.smsRemindOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.employee.emailRemindOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.employee.reviewMailStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "DoNotSendMail",
              "ReviewMailScheduled",
              "ReviewMailSent"
            ],
            "default": "DoNotSendMail"
          },
          {
            "name": "originalAppointment.quantity",
            "description": "total no. of consumers in the appointment\n\ntotal consumers",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalAppointment.bookingId",
            "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.recurringId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "originalAppointment.paymentStatus",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_PAYMENT_UNKNOWN",
              "APPOINTMENT_PAYMENT_FAILED",
              "APPOINTMENT_PAYMENT_PAID",
              "APPOINTMENT_PAYMENT_UNPAID",
              "APPOINTMENT_PAYMENT_REFUND",
              "APPOINTMENT_PAYMENT_PARTIAL"
            ],
            "default": "APPOINTMENT_PAYMENT_UNKNOWN"
          },
          {
            "name": "originalAppointment.createdBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.createdOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.updatedBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.updatedOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.rescheduleAllowedTill",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.cancellationAllowedTill",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.totalPrice.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "originalAppointment.totalPrice.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalPrice.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "originalAppointment.discountCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.totalDiscountedPrice.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "originalAppointment.meetingData.integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          },
          {
            "name": "originalAppointment.meetingData.externalMeetingId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.pin",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.joinUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.meetingData.iconUrl",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.metadata",
            "description": "This is a request variable of the map type. The query format is \"map_name[key]=value\", e.g. If the map name is Age, the key type is string, and the value type is integer, the query parameter is expressed as Age[\"bob\"]=18",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.isBookedByAdmin",
            "description": "is_booked_by_admin true if booked by admin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.reason",
            "description": "reason for update or cancel",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.submissionData",
            "description": "form submission data, this is read only value, and is not stored in db",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "byte"
          },
          {
            "name": "originalAppointment.isIntakeFormSubmitted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.hasNotes",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.everRescheduled",
            "description": "true on update in time",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastRescheduledBy",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.lastRescheduledOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.isLastRescheduledByAdmin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastStatusUpdatedBy",
            "description": "Last Status Change fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalAppointment.lastStatusUpdatedOn",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalAppointment.isLastStatusUpdatedByAdmin",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.recurrenceSet",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "originalAppointment.inviteeCanModify",
            "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.inviteeCanManageOtherInvitees",
            "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.viewGuestList",
            "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalAppointment.lastRecurringAppointment",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/deserialize": {
      "post": {
        "operationId": "Appointments_DeserializeAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentRequest"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentResponse"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/group-check-availability": {
      "post": {
        "summary": "GroupBatchCheckAvailability check the availability for the group of appointments",
        "operationId": "Appointments_GroupBatchCheckAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GroupBatchCheckAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GroupBatchCheckAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/invite/add/remove": {
      "post": {
        "summary": "AddOrRemoveMeetingInvitees will add or remove new invitee employees or customers in the meeting. And only host\nor according to the host set permissions or Meeting Manager can add new invitees.",
        "operationId": "Appointments_AddOrRemoveMeetingInvitees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1AddOrRemoveMeetingInviteesRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/permissions": {
      "patch": {
        "summary": "UpdateMeetingPermissions will update the additional meeting permissions to modify or allow invite of the booking\nAnd only the host employee of the booking can update this permissions or anyone with MeetingsManager module role\nhttps://appointy.atlassian.net/browse/AXN-1320",
        "operationId": "Appointments_UpdateMeetingPermissions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateMeetingPermissionsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/meeting/search": {
      "get": {
        "summary": "SearchMeetingInvitees will search employees and customers within the company.\nhttps://appointy.atlassian.net/browse/AXN-1317",
        "operationId": "Appointments_SearchMeetingInvitees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SearchMeetingInviteesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/month/view": {
      "get": {
        "operationId": "Appointments_AppointmentsMonthView",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentsMonthViewResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "serviceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "resourceTypeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "view",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "StaffView",
              "ServiceView",
              "ResourceView",
              "LocationView"
            ],
            "default": "StaffView"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "APPOINTMENT_STATUS_UNSPECIFIED",
              "APPOINTMENT_CONFIRMED",
              "APPOINTMENT_CANCELLED",
              "APPOINTMENT_WAITING_FOR_APPROVAL",
              "APPOINTMENT_BOOKING_IN_PROCESS",
              "APPOINTMENT_FAILED"
            ],
            "default": "APPOINTMENT_STATUS_UNSPECIFIED"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "showOnlyRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "showOnlyEndRecurringBooking",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/notes": {
      "get": {
        "operationId": "Appointments_ListAppointmentNotes",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentNotesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "getPrivate",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "allStaff",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "ANY"
            ],
            "default": "PUBLIC"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "post": {
        "operationId": "Appointments_CreateAppointmentNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentNote"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAppointmentNoteRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      },
      "put": {
        "operationId": "Appointments_UpdateAppointmentNote",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentNote"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateAppointmentNoteRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/ported/generate/code": {
      "post": {
        "operationId": "Appointments_GenerateDataCodeForPortedAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GenerateDataCodeForPortedAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1GenerateDataCodeForPortedAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/ported/{code}": {
      "get": {
        "operationId": "Appointments_GetPortedAppointmentsByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPortedAppointmentsByCodeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/cancel/{parent}": {
      "patch": {
        "operationId": "Appointments_CancelRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CancelRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsCancelRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/changeStatus/{id}": {
      "patch": {
        "operationId": "Appointments_ChangeRecurringAppointmentStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ChangeRecurringAppointmentStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Unique Id of a appointment",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsChangeRecurringAppointmentStatusBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/delete/{parent}": {
      "patch": {
        "operationId": "Appointments_DeleteRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsDeleteRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/recurring/{parent}": {
      "put": {
        "operationId": "Appointments_UpdateRecurringAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateRecurringAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateRecurringAppointmentsBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/related": {
      "post": {
        "operationId": "Appointments_DeleteRelatedAppointments",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteRelatedAppointmentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteRelatedAppointmentsRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/details": {
      "get": {
        "operationId": "Appointments_GetAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "consumerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerTag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "guardian_name filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "description": "guardian_email filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accessContact",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "paymentMethod",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_PAYMENT_METHOD",
              "CASH",
              "STRIPE_CARD",
              "SQUARE_CARD",
              "PACKAGE",
              "GIFT_CERTIFICATE",
              "MEMBERSHIP",
              "DISCOUNT_CODE",
              "CREDIT_CARD",
              "ECHECK",
              "DEBIT_CARD",
              "CREDIT_CARD_AND_CASH",
              "GIFT_CERTIFICATE_OFFLINE",
              "GIFT_CERTIFICATE_AND_CASH",
              "INSURANCE",
              "CHEQUE",
              "RADIUS",
              "RAZORPAY_ACCOUNT",
              "PAYPAL_ACCOUNT"
            ],
            "default": "UNSPECIFIED_PAYMENT_METHOD"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AppointmentReportSortBy_UNDEFINED",
              "AppointmentReportSortBy_StartTime",
              "AppointmentReportSortBy_EndTime",
              "AppointmentReportSortBy_BookingTime",
              "AppointmentReportSortBy_LastRescheduledTime",
              "AppointmentReportSortBy_ServiceTitle",
              "AppointmentReportSortBy_EmployeeName",
              "AppointmentReportSortBy_EmployeeEmail",
              "AppointmentReportSortBy_CustomerName",
              "AppointmentReportSortBy_CustomerEmail"
            ],
            "default": "AppointmentReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.vehicleRegistrationNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/grouped": {
      "get": {
        "operationId": "Appointments_GetGroupedAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupedAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByEmployee",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByService",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByResource",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByResourceType",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "consumerQuery",
            "description": "https://appointy.atlassian.net/browse/AXN-3784\n\nSearch query for consumers' name/email both/any",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/report/grouped/{parent}": {
      "get": {
        "operationId": "Appointments_GetCompanyGroupedAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanyGroupedAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "groupByMonth",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "consumerQuery",
            "description": "https://appointy.atlassian.net/browse/AXN-3784\n\nSearch query for consumers' name/email both/any",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/reports/details/{parent}": {
      "get": {
        "operationId": "Appointments_GetCompanyAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetCompanyAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "appointmentDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "appointmentDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "bookingDate.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "consumerName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amount",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "price.currency",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "price.amountInFloat",
            "description": "@deprecated - DO NOT USE",
            "in": "query",
            "required": false,
            "type": "number",
            "format": "double"
          },
          {
            "name": "status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "source",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "medium",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "campaign",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerTag",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "statusFilter.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "statusFilter.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerName",
            "description": "guardian_name filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerEmail",
            "description": "guardian_email filters",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "accessContact",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "paymentMethod",
            "description": " - CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNSPECIFIED_PAYMENT_METHOD",
              "CASH",
              "STRIPE_CARD",
              "SQUARE_CARD",
              "PACKAGE",
              "GIFT_CERTIFICATE",
              "MEMBERSHIP",
              "DISCOUNT_CODE",
              "CREDIT_CARD",
              "ECHECK",
              "DEBIT_CARD",
              "CREDIT_CARD_AND_CASH",
              "GIFT_CERTIFICATE_OFFLINE",
              "GIFT_CERTIFICATE_AND_CASH",
              "INSURANCE",
              "CHEQUE",
              "RADIUS",
              "RAZORPAY_ACCOUNT",
              "PAYPAL_ACCOUNT"
            ],
            "default": "UNSPECIFIED_PAYMENT_METHOD"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "AppointmentReportSortBy_UNDEFINED",
              "AppointmentReportSortBy_StartTime",
              "AppointmentReportSortBy_EndTime",
              "AppointmentReportSortBy_BookingTime",
              "AppointmentReportSortBy_LastRescheduledTime",
              "AppointmentReportSortBy_ServiceTitle",
              "AppointmentReportSortBy_EmployeeName",
              "AppointmentReportSortBy_EmployeeEmail",
              "AppointmentReportSortBy_CustomerName",
              "AppointmentReportSortBy_CustomerEmail"
            ],
            "default": "AppointmentReportSortBy_UNDEFINED"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "packageCode",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "displayCustomerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.serviceIds",
            "description": "https://appointy.atlassian.net/browse/AXN-3779",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.employeeIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "dropDownFilters.bookedByUserId",
            "description": "https://appointy.atlassian.net/browse/AXN-3786",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "dropDownFilters.discountCoupon",
            "description": "https://appointy.atlassian.net/browse/AXN-3777",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.vehicleRegistrationNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "additionalReportsFilters.buyerOrganizationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/reports/group/{parent}": {
      "get": {
        "operationId": "Appointments_GetGroupLevelAppointmentReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetGroupLevelAppointmentReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateFilter.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateFilter.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "exportedFields",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/serialize": {
      "post": {
        "operationId": "Appointments_SerializeAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1SerializeAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{appointment.id}": {
      "put": {
        "summary": "Client request to update a appointment\nAccepts UpdateAppointmentRequest which is a Appointment and returns\nupdated appointment if all the validations are passed\nUpdate will only update update only fields like:\n time_slot, resources, service, channel, employee",
        "operationId": "Appointments_UpdateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointment.id",
            "description": "Id of the appointment.",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentsUpdateAppointmentBody"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{code}": {
      "get": {
        "operationId": "Appointments_GetAppointmentByCode",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment/{id}": {
      "get": {
        "summary": "GetAppointment returns a appointment based on its unique ID.\nID should be one that was retrieved by one of the list methods.",
        "operationId": "Appointments_GetAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Appointment"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id of the appointment. (required)",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask is used to partially return data. For example,\n[ \"id\", \"service.title\" ] will return id and service title ignoring all other fields",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customerId",
            "description": "customer id is for the sole purpose of rights check",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment:batchCreate": {
      "post": {
        "operationId": "Appointments_BatchCreateAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateAppointmentRequest"
            }
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointment:list": {
      "get": {
        "summary": "ListAppointments returns all the appointments of the specified\nparent or specified employee or consumer",
        "operationId": "Appointments_ListAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is fully qualified string containing hierarchical information",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timeslot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "timeslot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "getMarketingStatus",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "employeeId",
            "description": "EmployeeId is the id of the employee.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerId",
            "description": "ConsumerId is the id of the consumer.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "query",
            "description": "Query can be used for search appointments using\n Employee's or Consumer's Name or Email",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "status.statuses",
            "description": "status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_STATUS_UNSPECIFIED",
                "APPOINTMENT_CONFIRMED",
                "APPOINTMENT_CANCELLED",
                "APPOINTMENT_WAITING_FOR_APPROVAL",
                "APPOINTMENT_BOOKING_IN_PROCESS",
                "APPOINTMENT_FAILED"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.paymentStatuses",
            "description": "payment status filter",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "APPOINTMENT_PAYMENT_UNKNOWN",
                "APPOINTMENT_PAYMENT_FAILED",
                "APPOINTMENT_PAYMENT_PAID",
                "APPOINTMENT_PAYMENT_UNPAID",
                "APPOINTMENT_PAYMENT_REFUND",
                "APPOINTMENT_PAYMENT_PARTIAL"
              ]
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.customStatus",
            "description": "consumer custom status",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "status.customStatusNames",
            "description": "consumer custom status names (not used in reports at the moment)",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "customerId",
            "description": "customer id for rights check",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "orderBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "Ascending",
              "Descending"
            ],
            "default": "Ascending"
          },
          {
            "name": "sortBy",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "StartTime",
              "CreatedOn"
            ],
            "default": "StartTime"
          },
          {
            "name": "otherFilters.locationIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "otherFilters.consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "otherFilters.consumerName",
            "description": "search queries",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.consumerEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.serviceTitle",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "otherFilters.query",
            "description": "on all above, search queries with 'or' condition",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "buyerOrganizationIdFilter",
            "description": "this filter is used by VTNZ",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/appointments": {
      "get": {
        "operationId": "Appointments_BatchGetAppointment",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAppointmentResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Appointments"
        ]
      }
    },
    "/v1/professions": {
      "get": {
        "summary": "ListProfession lists all the Profession(s)",
        "operationId": "Professions_ListProfession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListProfessionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/professions/name/{name}": {
      "get": {
        "summary": "GetProfessionByName returns the profession by its unique id.",
        "operationId": "Professions_GetProfessionByName",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Profession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/professions/{id}": {
      "get": {
        "summary": "GetProfession returns the profession by its unique id.",
        "operationId": "Professions_GetProfession",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Profession"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Professions"
        ]
      }
    },
    "/v1/custom-statuses": {
      "get": {
        "summary": "ListCompanies returns all the companies within a given parent like group",
        "operationId": "CustomStatuses_ListCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListCustomStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given CustomStatus like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "APPOINTMENT",
              "CLASS"
            ],
            "default": "UNDEFINED"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "fetchBelowLevel",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      },
      "post": {
        "summary": "CreateCustomStatus creates new CustomStatus",
        "operationId": "CustomStatuses_CreateCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateCustomStatusRequest"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/copy-default": {
      "get": {
        "summary": "This method copies the default custom status at company level",
        "operationId": "CustomStatuses_CopyDefaultCustomStatusAtCompany",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "parent is the company_id at which default status will be copied",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "customStatusType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNDEFINED",
              "ALL",
              "APPOINTMENT",
              "CLASS"
            ],
            "default": "UNDEFINED"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/order/{customStatusId}": {
      "put": {
        "operationId": "CustomStatuses_UpdateCustomStatusDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatusId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomStatusesUpdateCustomStatusDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/{customStatus.id}": {
      "put": {
        "summary": "UpdateCustomStatus updates a CustomStatus uniquely identified by its ID.\nUpdate CustomStatus uses Field Mask to update properties of CustomStatus object",
        "operationId": "CustomStatuses_UpdateCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "customStatus.id",
            "description": "Id is a unique identifier of the CustomStatus",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CustomStatusesUpdateCustomStatusBody"
            }
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/custom-statuses/{id}": {
      "get": {
        "summary": "GetCustomStatus returns the CustomStatus based on its unique ID\nGetCustomStatus is an open endpoint for the sake of visibility",
        "operationId": "CustomStatuses_GetCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CustomStatus"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the CustomStatus with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from CustomStatus object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nCustomStatus object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      },
      "delete": {
        "summary": "DeleteCustomStatus deletes a specific CustomStatus identified by the given ID.\nNote: This method soft deletes the CustomStatus.",
        "operationId": "CustomStatuses_DeleteCustomStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is the fully qualified url of the CustomStatus with its hierarchy details",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "CustomStatuses"
        ]
      }
    },
    "/v1/resource-types": {
      "get": {
        "summary": "There will no need of pagination",
        "operationId": "ResourceTypes_ListResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListResourceTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceTypesType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "IDENTIFIABLE",
              "NON_IDENTIFIABLE"
            ],
            "default": "IDENTIFIABLE"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from user profile object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "active",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "levelOnly",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "templateId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      },
      "post": {
        "operationId": "ResourceTypes_CreateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateResourceTypeRequest"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/count/{parent}": {
      "get": {
        "operationId": "ResourceTypes_GetResourceTypeCount",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetResourceTypeCountResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/order/{resourceTypeId}": {
      "put": {
        "operationId": "ResourceTypes_UpdateResourceTypeDisplayOrder",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceTypeId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTypesUpdateResourceTypeDisplayOrderBody"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/{id}": {
      "get": {
        "operationId": "ResourceTypes_GetResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique Identifier to represent resource-type",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from user profile object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nprofile object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      },
      "delete": {
        "operationId": "ResourceTypes_DeleteResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types/{resourceType.id}": {
      "put": {
        "operationId": "ResourceTypes_UpdateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ResourceType"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceType.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ResourceTypesUpdateResourceTypeBody"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/resource-types:batchCreate": {
      "post": {
        "operationId": "ResourceTypes_BatchCreateResourceType",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceTypeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchCreateResourceTypeRequest"
            }
          }
        ],
        "tags": [
          "ResourceTypes"
        ]
      }
    },
    "/v1/calendar/settings/batch/{userId}": {
      "get": {
        "operationId": "Calendars_BatchGetCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetCalendarSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/meeting/link/{userId}": {
      "patch": {
        "operationId": "Calendars_ChangeCalendarMeetingLinkSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsChangeCalendarMeetingLinkSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/toggle/{userId}": {
      "patch": {
        "summary": "ToggleCalendarSettings updates only the boolean values",
        "operationId": "Calendars_ToggleCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsToggleCalendarSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/settings/{userId}": {
      "get": {
        "operationId": "Calendars_GetCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "type",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "Calendars"
        ]
      },
      "patch": {
        "operationId": "Calendars_UpdateCalendarSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarSettings"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CalendarsUpdateCalendarSettingsBody"
            }
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/calendar/{userId}": {
      "get": {
        "summary": "ListCalendars is returns list of Calendars of user",
        "operationId": "Calendars_ListCalendars",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CalendarsList"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "type",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "Calendars"
        ]
      }
    },
    "/v1/consumer-restriction": {
      "get": {
        "operationId": "ConsumerRestrictions_ListConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "guardianId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "delete": {
        "operationId": "ConsumerRestrictions_DeleteConsumerRestrictions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ids",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "titles",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction/{consumerRestriction.id}": {
      "post": {
        "operationId": "ConsumerRestrictions_UpsertConsumerRestrictionsGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerRestriction.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumerRestrictionsUpsertConsumerRestrictionsGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "put": {
        "operationId": "ConsumerRestrictions_UpsertConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "consumerRestriction.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ConsumerRestrictionsUpsertConsumerRestrictionBody"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction/{parent}": {
      "get": {
        "operationId": "ConsumerRestrictions_GetConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ConsumerRestriction"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "consumerId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "delete": {
        "operationId": "ConsumerRestrictions_ResetConsumerRestrictionsGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/consumer-restriction:batch": {
      "get": {
        "operationId": "ConsumerRestrictions_BatchGetConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "consumerIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      },
      "put": {
        "operationId": "ConsumerRestrictions_BatchUpsertConsumerRestriction",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertConsumerRestrictionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1BatchUpsertConsumerRestrictionRequest"
            }
          }
        ],
        "tags": [
          "ConsumerRestrictions"
        ]
      }
    },
    "/v1/composite-endpoints/booking-flow-company-settings": {
      "get": {
        "operationId": "CompositeEndpoints_FetchCompositeBookingFlowCompanySettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompositeBookingFlowCompanySetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompositeEndpoints"
        ]
      }
    },
    "/v1/composite-endpoints/booking-flow-location-settings": {
      "get": {
        "summary": "Booking Flow",
        "operationId": "CompositeEndpoints_FetchCompositeBookingFlowLocationSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CompositeBookingFlowLocationSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "locationId",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "CompositeEndpoints"
        ]
      }
    },
    "/v1/dynamic-links": {
      "post": {
        "summary": "CreateDynamicUseLink creates new single use link.",
        "operationId": "DynamicLinks_CreateDynamicLink",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DynamicLink"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateDynamicLinkRequest"
            }
          }
        ],
        "tags": [
          "DynamicLinks"
        ]
      }
    },
    "/v1/open-hour-slots/tracker/report": {
      "get": {
        "operationId": "OpenHours_GetOpenHourSlotsTrackerReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetOpenHourSlotsTrackerReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "location level only",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "offset",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "dateRange.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "dateRange.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "employeeName",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "employeeEmail",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "timezone",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "export",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "exportTo",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/availability": {
      "post": {
        "summary": "to check future availability of open hours for services or staffs",
        "operationId": "OpenHours_CheckOpenHourAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CheckOpenHourAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CheckOpenHourAvailabilityRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/delete": {
      "post": {
        "operationId": "OpenHours_DeleteOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteOpenHourRulesRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/delete-and-create": {
      "post": {
        "operationId": "OpenHours_DeleteAndCreateOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1DeleteAndCreateOpenHourRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteAndCreateOpenHourRulesRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/future-availability": {
      "get": {
        "operationId": "OpenHours_GetNextAvailability",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetNextAvailabilityResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "primaryIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "secondaryIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "openHourType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "WEEKLY",
              "CUSTOM"
            ],
            "default": "UNKNOWN"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/recur-rule/{openHourRuleId}": {
      "put": {
        "summary": "UpsertRecurrenceRule updates recurrence rule of an open hour rule if found else creates one\nuse this rpc to update all slots between time-range built from recurrence rule with new rule",
        "operationId": "OpenHours_UpsertRecurrenceRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpsertRecurrenceRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "openHourRuleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpsertRecurrenceRuleBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule": {
      "post": {
        "summary": "CreateOpenHourRule creates a new open hour rule",
        "operationId": "OpenHours_CreateOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1CreateOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateOpenHourRuleRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule-future:list": {
      "get": {
        "operationId": "OpenHours_ListFutureOpenHourRules",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListFutureOpenHourRulesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "resourceId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "openHourType",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN",
              "WEEKLY",
              "CUSTOM"
            ],
            "default": "UNKNOWN"
          },
          {
            "name": "start",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule-override": {
      "post": {
        "operationId": "OpenHours_OverrideOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OverrideOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1OverrideOpenHourRuleRequest"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/metadata/{ruleId}": {
      "put": {
        "summary": "UpdateOpenHourRule updates an open hour rule uniquely identified by its ID.\nuse this rpc to update metadata  Rules",
        "operationId": "OpenHours_UpdateOpenHourRuleMetadata",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateOpenHourRuleMetadataBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/{id}": {
      "get": {
        "summary": "GetOpenHourRule returns the open hour rule based on its unique ID",
        "operationId": "OpenHours_GetOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourRule"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "Id is a unique identifier of the open hour rule\nMinimum length of ID should be 1",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from open hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nopen hour rule object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule/{openHourRule.id}": {
      "put": {
        "summary": "UpsertRecurrenceRule updates recurrence rule of an open hour rule if found else creates one\nuse this rpc to update all slots between time-range built from recurrence rule with new rule",
        "operationId": "OpenHours_UpdateOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1UpdateOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "openHourRule.id",
            "description": "Id of the open hour rule",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateOpenHourRuleBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/rule:list": {
      "get": {
        "summary": "ListOpenHourRule returns all the open hour rules within a given parent",
        "operationId": "OpenHours_ListOpenHourRule",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListOpenHourRuleResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "description": "Parent contains the hierarchical information of the given company like\nits group.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "first",
            "description": "First specifies the number of arguments that are to be returned starting at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes the cursor type to indicate the slice should start at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of arguments that are to be returned ending at\nthe cursor.",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes the cursor type to indicate the slice should end at this\ncursor.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from open hour rule object that has to be\nreturned.\nIf a FieldMask object is not present then return all the field from the\nopen hour rule object.",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.serviceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "filter.fetchActiveOnly",
            "description": "corresponding to employee/staff",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slot/{id}": {
      "put": {
        "summary": "UpdateSingleSlot updates a slot of the open hour\nuse this rpc to update timing, is-bookable in single slot identified by its id",
        "operationId": "OpenHours_UpdateSingleSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1OpenHourBuiltSlot"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "description": "unique slot-id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/OpenHoursUpdateSingleSlotBody"
            }
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slot/{slotId}": {
      "delete": {
        "operationId": "OpenHours_DeleteSingleSlot",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "slotId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "openHourRuleId",
            "description": "OpenHourRuleId is the id of open hour rule to which this slot belongs",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "deleteRequestSlotOnly",
            "description": "internal",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.recurrenceId",
            "description": "RecurrenceId is the id of open-hour-id from which slot is built",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.slot.startTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalSlot.slot.endTime",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "originalSlot.bookable",
            "description": "Tells whether a resource can be booked or not",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.serviceIds",
            "description": "service-ids linked with open-hour-built-slot",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "originalSlot.capacity",
            "description": "capacity",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          },
          {
            "name": "originalSlot.locationId",
            "description": "extra fields for query\n\nparent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.resourceId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "originalSlot.exceptionDeleted",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "originalSlot.specialCase",
            "description": "special case - when built slot start_time > until of open hour",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/open-hours/slots": {
      "delete": {
        "operationId": "OpenHours_DeleteOpenHourSlotsBetweenDuration",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "ruleId",
            "description": "open hour rule id",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "recurrenceId",
            "description": "open hour id (optional)",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "start",
            "description": "optional (if empty deleted from current time)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          },
          {
            "name": "until",
            "description": "optional (if empty deleted till last slot)",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "date-time"
          }
        ],
        "tags": [
          "OpenHours"
        ]
      }
    },
    "/v1/appointment/admin-availability": {
      "post": {
        "operationId": "Availability_ListAdminSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListAdminSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability": {
      "post": {
        "summary": "ListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dates": {
      "post": {
        "summary": "ListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/dynamic": {
      "post": {
        "operationId": "Availability_ListDynamicSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDynamicSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved-services-employees": {
      "post": {
        "operationId": "Availability_ImprovedListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/improved/dates": {
      "post": {
        "summary": "ImprovedListDates returns the list of dates available to book based on the filter criteria",
        "operationId": "Availability_ImprovedListDates",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListDatesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListDatesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/availability/services-employees": {
      "post": {
        "summary": "ListServicesOrEmployees returns the list of services or employees available based on the filter criteria",
        "operationId": "Availability_ListServicesOrEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListServicesOrEmployeesRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/appointment/improved/availability": {
      "post": {
        "summary": "ImprovedListSlots returns the list of time slots available based on the filter criteria",
        "operationId": "Availability_ImprovedListSlots",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListSlotsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1ListSlotsRequest"
            }
          }
        ],
        "tags": [
          "Availability"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow/{appointmentBookingFlowSetting.id}": {
      "post": {
        "operationId": "AppointmentBookingFlowSettings_UpsertAppointmentBookingFlowGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentBookingFlowSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowGroupSettingsBody"
            }
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      },
      "put": {
        "summary": "UpsertAppointmentBookingFlowSetting, updates appointment booking flow setting if appointment\nbooking flow setting exists of insert a appointment booking flow setting if empty\nThis will be upsert methods",
        "operationId": "AppointmentBookingFlowSettings_UpsertAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "appointmentBookingFlowSetting.id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowSettingBody"
            }
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow/{parent}": {
      "get": {
        "summary": "GetAppointmentBookingFlowSetting returns a appointment booking flow setting based on its unique id",
        "operationId": "AppointmentBookingFlowSettings_GetAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from appointment booking flow setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nappointment booking flow setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      },
      "delete": {
        "operationId": "AppointmentBookingFlowSettings_ResetAppointmentBookingFlowGroupSettings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/settings/appointment-booking-flow:batch": {
      "get": {
        "summary": "BatchGetAppointmentBookingFlowSetting returns a appointment booking flow setting based on its unique id",
        "operationId": "AppointmentBookingFlowSettings_BatchGetAppointmentBookingFlowSetting",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1BatchGetAppointmentBookingFlowSettingResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parents",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "viewMask",
            "description": "ViewMask contains the list of field from appointment booking flow setting object that\nhas to be returned.\nIf a FieldMask object is not present then return all the field from the\nappointment booking flow setting object.",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "AppointmentBookingFlowSettings"
        ]
      }
    },
    "/v1/calendar/sync-calendars/employee": {
      "get": {
        "operationId": "CalendarInfo_FetchEmployeeSyncedCalendars",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchEmployeeSyncedCalendarsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "employeeId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "CalendarInfo"
        ]
      }
    },
    "/v1/calendar/sync-status/employees": {
      "get": {
        "operationId": "CalendarInfo_FetchCalendarSyncStatusOfEmployees",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1FetchCalendarSyncStatusOfEmployeesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "companyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "integrationType",
            "description": " - GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar",
            "in": "query",
            "required": false,
            "type": "string",
            "enum": [
              "UNKNOWN_TYPE",
              "GOOGLECALENDAR",
              "OUTLOOK",
              "QUICKBOOKS",
              "STRIPE",
              "GOOGLE_BUSINESS_REVIEW",
              "YELP",
              "OTHERS",
              "FIREBASE",
              "WEBEX",
              "ZOOM",
              "GOOGLE_TAG_MANAGER",
              "GOOGLE_ANALYTICS",
              "FACEBOOK_PIXEL",
              "MIXPANEL",
              "SQUARE",
              "BRAINTREE",
              "PAYPAL",
              "ICLOUD",
              "INTERCOM",
              "GOOGLE_DRIVE",
              "DROPBOX",
              "GOOGLE_CONTACT",
              "ZAPIER",
              "MICROSOFT_TEAMS",
              "MICROSOFT_TEAMS_CONNECTOR",
              "CUSTOM_WEBHOOK",
              "SERVICE_NOW",
              "RAZORPAY",
              "SALESFORCE",
              "FRESH_SALES",
              "OPEN_HOUR_GOOGLE_CALENDAR",
              "BIG_COMMERCE",
              "XERO",
              "MAILCHIMP",
              "ZENDESK",
              "HUBSPOT"
            ],
            "default": "UNKNOWN_TYPE"
          }
        ],
        "tags": [
          "CalendarInfo"
        ]
      }
    }
  },
  "components": {
    "schemas": null,
    "responses": null,
    "parameters": null,
    "requestBodies": null
  },
  "definitions": {
    "ResourcesUpdateResourceBody": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "object",
          "properties": {
            "title": {
              "type": "string",
              "title": "Title of Resource"
            },
            "description": {
              "type": "string",
              "title": "Description of Resource"
            },
            "gallery": {
              "$ref": "#/definitions/typesGallery",
              "title": "image of resource"
            },
            "resourceTypeId": {
              "type": "string",
              "title": "types of resource eg: room, service"
            },
            "quantity": {
              "type": "integer",
              "format": "int64",
              "title": "deprecated"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "capacity": {
              "type": "string",
              "format": "int64",
              "title": "deprecated"
            },
            "active": {
              "type": "boolean"
            },
            "internal": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "createdBy": {
              "type": "string",
              "title": "meta details\nCreated by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "ResourcesUpdateResourceDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "title": {
          "type": "string",
          "title": "for internal use"
        },
        "oldOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesGallery": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesGalleryItem"
          }
        },
        "default": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      },
      "title": "for chaku always tag json"
    },
    "typesGalleryItem": {
      "type": "object",
      "properties": {
        "thumbImage": {
          "type": "string"
        },
        "largeImage": {
          "type": "string"
        }
      },
      "title": "Generic Gallery Item Object"
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateResourceRequest": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateResourceRequest"
          }
        }
      }
    },
    "v1BatchCreateResourceResponse": {
      "type": "object",
      "properties": {
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "v1BatchGetResourceResponse": {
      "type": "object",
      "properties": {
        "resource": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        }
      }
    },
    "v1CreateResourceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1Resource"
        }
      }
    },
    "v1GetResourceCountResponse": {
      "type": "object",
      "properties": {
        "resourceCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourcesCount"
          }
        }
      }
    },
    "v1ListResourceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      }
    },
    "v1Resource": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the resource"
        },
        "title": {
          "type": "string",
          "title": "Title of the resource"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "deprecated Resource will not have capacity, now"
        },
        "resourceTypeId": {
          "type": "string",
          "title": "ResourceTypeId denotes the resourceType id"
        }
      }
    },
    "v1ResourceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Resource"
        }
      }
    },
    "v1ResourcesCount": {
      "type": "object",
      "properties": {
        "resourceTypeId": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "MatchingRulesUpdateMatchingRuleBody": {
      "type": "object",
      "properties": {
        "matchingRule": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string"
            },
            "data": {
              "type": "string"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        }
      }
    },
    "v1CreateMatchingRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "matchingRule": {
          "$ref": "#/definitions/v1MatchingRule"
        }
      }
    },
    "v1ListMatchingRuleResponse": {
      "type": "object",
      "properties": {
        "matchingRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MatchingRule"
          }
        }
      }
    },
    "v1MatchingRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "data": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ListProfessionCategoryResponse": {
      "type": "object",
      "properties": {
        "professionCategory": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategory"
          }
        }
      }
    },
    "v1ProfessionCategory": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "Name of Industry"
        },
        "description": {
          "type": "string",
          "title": "Description about Industry"
        },
        "setupData": {
          "$ref": "#/definitions/v1ProfessionCategorySetupData",
          "title": "Setup-Data for businesses for optimization and start operations"
        },
        "dataSuggestion": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDataSuggestion"
          }
        },
        "dataFill": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDataFill"
          }
        },
        "navMenus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Nav-bar Menu-Items for business admin-side view"
        },
        "wizardSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "distributionRatingNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "Profession-Category represents an Industry to which businesses belongs\nEx: Salon Industry"
    },
    "v1ProfessionCategoryApp": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean",
          "title": "installed"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryDataFill": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryDataSuggestion": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryDefaultAlias": {
      "type": "object",
      "properties": {
        "singular": {
          "type": "string"
        },
        "plural": {
          "type": "string"
        }
      }
    },
    "v1ProfessionCategoryDesignation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultRoleSlugs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategoryFeature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryResourceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isIdentifiable": {
          "type": "boolean"
        }
      }
    },
    "v1ProfessionCategoryServiceSuggestion": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ProfessionCategorySetupData": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryResourceType"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "designations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryDesignation"
          }
        },
        "setupRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategorySetupRole"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryApp"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategoryFeature"
          }
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ProfessionCategoryDefaultAlias"
          }
        }
      }
    },
    "v1ProfessionCategorySetupModuleRole": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionCategorySetupRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string"
        },
        "moduleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionCategorySetupModuleRole"
          }
        }
      }
    },
    "DesignationsUpdateDesignationBody": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name of the designation which will be displayed to user"
            },
            "description": {
              "type": "string",
              "title": "Description is a short note of this designation"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional metadata of the designation"
            },
            "roleIds": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Attached roles"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given designation object can be\nupdated.\nList of fields which can be updated are:\nName, Description"
        }
      }
    },
    "v1BatchCreateDesignationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)"
        },
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          }
        }
      }
    },
    "v1BatchCreateDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          }
        }
      }
    },
    "v1BatchGetDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          },
          "title": "Designation have name and description"
        }
      }
    },
    "v1CreateDesignationRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner group/location/business (required)"
        },
        "designation": {
          "$ref": "#/definitions/v1Designation"
        }
      }
    },
    "v1Designation": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id a unique identifier for designation"
        },
        "name": {
          "type": "string",
          "title": "Name of the designation which will be displayed to user"
        },
        "description": {
          "type": "string",
          "title": "Description is a short note of this designation"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional metadata of the designation"
        },
        "roleIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Attached roles"
        }
      }
    },
    "v1ListDesignationResponse": {
      "type": "object",
      "properties": {
        "designation": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Designation"
          },
          "title": "Designation have name and description"
        }
      }
    },
    "BlockHoursUpdateBlockHourByDataCodeBody": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        }
      }
    },
    "BlockHoursUpdateBlockHourRuleBody": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "type": "object",
          "properties": {
            "resourceId": {
              "type": "string",
              "description": "Id of the specific resource/employee\nIf ResourceId is empty it means that the block hour is for all resources at the given parent level."
            },
            "slots": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1BlockHourSlot"
              },
              "title": "Time slots for which the resource will be blocked"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional information for blocking"
            },
            "reason": {
              "type": "string",
              "title": "Reason due to which the resource is blocked"
            },
            "locale": {
              "type": "string",
              "title": "Locale in which the time slot is blocked"
            },
            "title": {
              "type": "string",
              "description": "title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
            },
            "source": {
              "type": "string"
            },
            "externalSourceId": {
              "type": "string"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "recurrenceSet": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "status": {
              "$ref": "#/definitions/v1BlockHourStatus"
            },
            "approvedOn": {
              "type": "string",
              "format": "date-time"
            }
          },
          "title": "slots will be updated based on id"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given block hour rule object that can be\nupdated.\nList of fields which can be updated are  :\nslot duration, recurrence set, reason, locale, title\nMessage is required"
        },
        "parent": {
          "type": "string",
          "title": "parent can only be location-id"
        }
      },
      "title": "UpdateBlockHourRuleRequest contains the block hour rule object and update_mask .\nThe update mask will be used to update a specific field in block hour rule object"
    },
    "BlockHoursUpdateBlockHourRuleStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1BlockHourStatus"
        }
      }
    },
    "typesTimeslot": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Timeslot object"
    },
    "v1BatchCreateBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      }
    },
    "v1BatchGetBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      },
      "description": "BatchGetBlockHourResponse contains the list of block hour rules given in the request object."
    },
    "v1BlockHourLocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BlockHourRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "resourceId": {
          "type": "string",
          "description": "Id of the specific resource/employee\nIf ResourceId is empty it means that the block hour is for all resources at the given parent level."
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourSlot"
          },
          "title": "Time slots for which the resource will be blocked"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information for blocking"
        },
        "reason": {
          "type": "string",
          "title": "Reason due to which the resource is blocked"
        },
        "locale": {
          "type": "string",
          "title": "Locale in which the time slot is blocked"
        },
        "title": {
          "type": "string",
          "description": "title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "source": {
          "type": "string"
        },
        "externalSourceId": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1BlockHourStatus"
        },
        "approvedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1BlockHourRuleNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position in the list of block hour rule"
        },
        "node": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      },
      "title": "Represents data corresponding to a position in the list of block hour rule"
    },
    "v1BlockHourSlot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot"
        }
      },
      "title": "Represents a time slot"
    },
    "v1BlockHourStatus": {
      "type": "string",
      "enum": [
        "BLOCK_HOUR_UNKNOWN",
        "BLOCK_HOUR_APPROVED",
        "BLOCK_HOUR_DENIED",
        "BLOCK_HOUR_WAITING_FOR_APPROVAL"
      ],
      "default": "BLOCK_HOUR_UNKNOWN"
    },
    "v1CheckPreExistingBookingForBlockHourResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1CreateBlockHourRuleForMultipleResourcesRequest": {
      "type": "object",
      "properties": {
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "request": {
          "$ref": "#/definitions/v1CreateBlockHourRuleRequest"
        }
      }
    },
    "v1CreateBlockHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given block hour rules\nlike group."
        },
        "resourceId": {
          "type": "string",
          "title": "Id of the specific resource/employee"
        },
        "slotDurationInMinutes": {
          "type": "string",
          "format": "int64",
          "title": "slot of time for which the resource is blocked\nDuration must be greater than zero; only if recurrence set provided"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "RRule Set for which time will be blocked"
        },
        "recurringSlotStartTime": {
          "type": "string",
          "format": "date-time",
          "title": "Start time for recurring slots"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information for blocking"
        },
        "reason": {
          "type": "string",
          "title": "Reason due to which the resource is blocked"
        },
        "locale": {
          "type": "string",
          "title": "Locale in which the time slot is blocked"
        },
        "title": {
          "type": "string",
          "description": "Title for blockHour\nShould never be considered unique for any purposes\nand should only be used for reference."
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          },
          "title": "to add time slots directly without recurrence rule"
        },
        "source": {
          "type": "string"
        },
        "externalSourceId": {
          "type": "string"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "title": "CreateBlockHourRuleRequest is the request to create a new block hour rule ,"
    },
    "v1CreateBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "blockHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      }
    },
    "v1ListBlockHourRuleResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRuleNode"
          },
          "title": "Nodes contains the list of block hour rule"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo"
        }
      },
      "title": "ListBlockHourRuleResponse contains the list of block hour rule"
    },
    "v1ListBlockHourRulesForCalendarResponse": {
      "type": "object",
      "properties": {
        "blockHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BlockHourRule"
          }
        }
      },
      "title": "ListBlockHourRulesForCalendarResponse contains the list of block hour\nrules between start time and end time"
    },
    "v1UpdateBlockHourByDataCodeResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      }
    },
    "v1UpdateBlockHourRuleStatusResponse": {
      "type": "object",
      "properties": {
        "blockHourRule": {
          "$ref": "#/definitions/v1BlockHourRule"
        }
      }
    },
    "ResourceTiersUpdateResourceTierBody": {
      "type": "object",
      "properties": {
        "resourceTier": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "resourceTierType": {
              "$ref": "#/definitions/v1ResourceTierType"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the resource tier object can be updated."
        }
      }
    },
    "ResourceTiersUpsertResourceTierPrioritiesBody": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        },
        "logInfo": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ResourceTiersUpsertResourceTierSettingsBody": {
      "type": "object",
      "properties": {
        "setting": {
          "$ref": "#/definitions/v1ResourceTierSetting"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1CreateResourceTierRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceTier": {
          "$ref": "#/definitions/v1ResourceTier"
        }
      }
    },
    "v1FetchFilteredTiersByLocationsResponse": {
      "type": "object",
      "properties": {
        "filteredTiers": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1ListResourceTierResponse"
          }
        }
      }
    },
    "v1FilteredTiersByLocationsFilter": {
      "type": "object",
      "properties": {
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1TierEmployeeAllocation"
        }
      }
    },
    "v1ListResourceTierPrioritiesResponse": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        }
      }
    },
    "v1ListResourceTierResponse": {
      "type": "object",
      "properties": {
        "resourceTier": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTier"
          }
        }
      }
    },
    "v1ResourceTier": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "resourceTierType": {
          "$ref": "#/definitions/v1ResourceTierType"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1ResourceTierFilterInput": {
      "type": "object",
      "properties": {
        "resourceTierType": {
          "$ref": "#/definitions/v1ResourceTierType"
        }
      }
    },
    "v1ResourceTierPriority": {
      "type": "object",
      "properties": {
        "tierId": {
          "type": "string"
        },
        "priority": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1ResourceTierSetting": {
      "type": "object",
      "properties": {
        "enableTierBasedStaffPrioritization": {
          "type": "boolean"
        },
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1TierEmployeeAllocation"
        }
      }
    },
    "v1ResourceTierType": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "IDENTIFIABLE_RESOURCE",
        "EMPLOYEE"
      ],
      "default": "UNSPECIFIED"
    },
    "v1TierEmployeeAllocation": {
      "type": "string",
      "enum": [
        "Unspecified",
        "Location_Based",
        "Service_Based"
      ],
      "default": "Unspecified"
    },
    "v1UpsertResourceTierPrioritiesResponse": {
      "type": "object",
      "properties": {
        "resourceTierPriorities": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceTierPriority"
          }
        }
      }
    },
    "v1UpsertResourceTierSettingsResponse": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "setting": {
          "$ref": "#/definitions/v1ResourceTierSetting"
        }
      }
    },
    "typesIntegrationType": {
      "type": "string",
      "enum": [
        "UNKNOWN_TYPE",
        "GOOGLECALENDAR",
        "OUTLOOK",
        "QUICKBOOKS",
        "STRIPE",
        "GOOGLE_BUSINESS_REVIEW",
        "YELP",
        "OTHERS",
        "FIREBASE",
        "WEBEX",
        "ZOOM",
        "GOOGLE_TAG_MANAGER",
        "GOOGLE_ANALYTICS",
        "FACEBOOK_PIXEL",
        "MIXPANEL",
        "SQUARE",
        "BRAINTREE",
        "PAYPAL",
        "ICLOUD",
        "INTERCOM",
        "GOOGLE_DRIVE",
        "DROPBOX",
        "GOOGLE_CONTACT",
        "ZAPIER",
        "MICROSOFT_TEAMS",
        "MICROSOFT_TEAMS_CONNECTOR",
        "CUSTOM_WEBHOOK",
        "SERVICE_NOW",
        "RAZORPAY",
        "SALESFORCE",
        "FRESH_SALES",
        "OPEN_HOUR_GOOGLE_CALENDAR",
        "BIG_COMMERCE",
        "XERO",
        "MAILCHIMP",
        "ZENDESK",
        "HUBSPOT"
      ],
      "default": "UNKNOWN_TYPE",
      "title": "- GOOGLE_DRIVE: not for appointy\n - ZAPIER: for appointy\n - OPEN_HOUR_GOOGLE_CALENDAR: Open Hour for Google Calendar"
    },
    "v1CalendarEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "businessId": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        },
        "externalEventId": {
          "type": "string"
        },
        "externalCalendarId": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Calendar Event service\n        - As a Product owner, I want to make a separate service for the external calendar events so that same implementation can be used for the different meetings/ calendar integrations.\n        DOD:\n        * Calendar Event will have the following fields\n            - Id\n            - BusinessId\n            - AppointmentId\n            - ExternalEventId\n            - ExternalCalendarId\n            - UserId\n            - IntegrationType\n            - Data (map<string, string>)\n            - All 7 Meta fields (is deleted, delete_on etc)\n        * This calendar service will be used by all the Calendar and Meeting integration\n        * It will have only 3 methods\n            - GetByAppointmentIds (appointment_ids, business_id, integration_type)\n                * will take multiple appointment ids and return the list of calendar events within one business\n            - GetByExternalIds(external_events_ids, business_id, integration_type)\n                * will take multiple external event ids and return the list of calendar events within one business\n            - Insert ([]CalendarEvents)\n                * It will insert the value into the database\n            - Delete ([]CalendarEvents)\n                * It will mark entry as deleted into the database"
    },
    "v1ListByAppointmentIds": {
      "type": "object",
      "properties": {
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListByExternalIds": {
      "type": "object",
      "properties": {
        "externalIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListCalendarEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarEvent"
          }
        }
      }
    },
    "DynamicLinksUpdateSingleUseLinkAppointmentBody": {
      "type": "object",
      "properties": {
        "dynamicLinkAppointment": {
          "type": "object",
          "properties": {
            "guid": {
              "type": "string"
            },
            "expireAt": {
              "type": "string",
              "format": "date-time"
            },
            "setting": {
              "$ref": "#/definitions/v1DynamicLinkAppointmentSetting"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "isSingleUse": {
              "type": "boolean"
            },
            "bookingId": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "bookingUpdatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "resourceId": {
              "type": "string"
            },
            "appId": {
              "type": "string"
            },
            "isExpired": {
              "type": "boolean",
              "title": "is link is used"
            },
            "userId": {
              "type": "string",
              "title": "user id of user who creates user"
            }
          },
          "title": "guid: Unique id attached with the url\nexpire_at: guid expiry time\nis_single_use: guid will be single use only or multiple use\nbooking_id: stores the latest booking id corresponding to the url"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given location object can be updated.\nList of fields which can be updated are  :\nName , Description , Gallery , Address , Telephones"
        }
      }
    },
    "v1AvailableDynamicLinkSlots": {
      "type": "object",
      "properties": {
        "linkData": {
          "$ref": "#/definitions/v1DynamicLinkAppointment"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LinkSlot"
          }
        }
      }
    },
    "v1CreateDynamicLinkAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be location Id"
        },
        "dynamicLink": {
          "$ref": "#/definitions/v1DynamicLinkAppointment"
        }
      }
    },
    "v1DynamicLinkAppointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "guid": {
          "type": "string"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time"
        },
        "setting": {
          "$ref": "#/definitions/v1DynamicLinkAppointmentSetting"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "isSingleUse": {
          "type": "boolean"
        },
        "bookingId": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "bookingUpdatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "resourceId": {
          "type": "string"
        },
        "appId": {
          "type": "string"
        },
        "isExpired": {
          "type": "boolean",
          "title": "is link is used"
        },
        "userId": {
          "type": "string",
          "title": "user id of user who creates user"
        }
      },
      "title": "guid: Unique id attached with the url\nexpire_at: guid expiry time\nis_single_use: guid will be single use only or multiple use\nbooking_id: stores the latest booking id corresponding to the url"
    },
    "v1DynamicLinkAppointmentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1DynamicLinkAppointment",
          "title": "Node is the actual dynamic object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1DynamicLinkAppointmentSetting": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "slot": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "customerEmail": {
          "type": "string"
        },
        "staffId": {
          "type": "string"
        },
        "allowOtherTimes": {
          "type": "boolean"
        },
        "otherStaffIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "conditionAnd": {
          "type": "boolean",
          "title": "determines whether to check availability for each staff combined(AND: true) or separately(OR: false)"
        },
        "otherInvitees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OtherInvitee"
          }
        }
      }
    },
    "v1LinkSlot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner\nParent is usually location. Not sure what it will be"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "channel": {
          "type": "string",
          "description": "Channel is the id of the channel."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources are the ids of the resources that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resource types are the ids of the resource types that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Capacity"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "otherEmployees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OtherEmployees of the meeting"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1ListDynamicLinkByResourceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DynamicLinkAppointmentNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "v1OtherInvitee": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "BookingPortalSettingsUpsertBookingPortalGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "bookingPortalSetting": {
          "type": "object",
          "properties": {
            "enableBookingPortal": {
              "type": "boolean",
              "title": "Whether to enable booking portal for clients on location"
            },
            "removeBranding": {
              "type": "boolean",
              "title": "Whether to remove branding for a service or not"
            },
            "enabledLogins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Platforms through which login is enabled"
            },
            "uiSettings": {
              "type": "string",
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
            },
            "customerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "mandatoryCustomerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "enableGuestLogin": {
              "type": "boolean",
              "title": "Whether to enable guest login"
            },
            "menuOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultTab": {
              "type": "string"
            },
            "customCss": {
              "type": "string"
            },
            "template": {
              "type": "string"
            },
            "backgroundImage": {
              "type": "string"
            },
            "availableLanguages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "social": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "changeMask": {
              "type": "string"
            },
            "childrenSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
              },
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
            },
            "logoUrl": {
              "type": "string"
            },
            "showHomeMenu": {
              "type": "boolean"
            },
            "showAppointmentTab": {
              "type": "boolean"
            },
            "disableSignup": {
              "type": "boolean",
              "title": "This option will disable the create account option"
            },
            "protectedRoutes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Routes on which login is required on booking portal"
            },
            "announcementSetting": {
              "$ref": "#/definitions/v1AnnouncementSetting"
            }
          }
        }
      }
    },
    "BookingPortalSettingsUpsertBookingPortalSettingBody": {
      "type": "object",
      "properties": {
        "bookingPortalSetting": {
          "type": "object",
          "properties": {
            "enableBookingPortal": {
              "type": "boolean",
              "title": "Whether to enable booking portal for clients on location"
            },
            "removeBranding": {
              "type": "boolean",
              "title": "Whether to remove branding for a service or not"
            },
            "enabledLogins": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Platforms through which login is enabled"
            },
            "uiSettings": {
              "type": "string",
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
            },
            "customerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "mandatoryCustomerInformation": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1CustomerInformation"
              },
              "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
            },
            "enableGuestLogin": {
              "type": "boolean",
              "title": "Whether to enable guest login"
            },
            "menuOrder": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "defaultTab": {
              "type": "string"
            },
            "customCss": {
              "type": "string"
            },
            "template": {
              "type": "string"
            },
            "backgroundImage": {
              "type": "string"
            },
            "availableLanguages": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "social": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "changeMask": {
              "type": "string"
            },
            "childrenSettings": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
              },
              "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
            },
            "logoUrl": {
              "type": "string"
            },
            "showHomeMenu": {
              "type": "boolean"
            },
            "showAppointmentTab": {
              "type": "boolean"
            },
            "disableSignup": {
              "type": "boolean",
              "title": "This option will disable the create account option"
            },
            "protectedRoutes": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "title": "Routes on which login is required on booking portal"
            },
            "announcementSetting": {
              "$ref": "#/definitions/v1AnnouncementSetting"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      },
      "title": "UpsertBookingPortalSettingRequest contains the booking-portal-setting object\nand the update mask\nThe update mask will be used to update a specific field in booking-portal-setting object"
    },
    "v1AnnouncementSetting": {
      "type": "object",
      "properties": {
        "bannerFormat": {
          "type": "string"
        }
      }
    },
    "v1BatchUpsertBookingPortalSettingRequest": {
      "type": "object",
      "properties": {
        "bookingPortalSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UpsertBookingPortalSettingRequest"
          }
        }
      }
    },
    "v1BatchUpsertBookingPortalSettingResponse": {
      "type": "object",
      "properties": {
        "bookingPortalSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BookingPortalSetting"
          }
        }
      }
    },
    "v1BookingPortalSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "settings are on company/location level"
        },
        "enableBookingPortal": {
          "type": "boolean",
          "title": "Whether to enable booking portal for clients on location"
        },
        "removeBranding": {
          "type": "boolean",
          "title": "Whether to remove branding for a service or not"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Platforms through which login is enabled"
        },
        "uiSettings": {
          "type": "string",
          "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)"
        },
        "customerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "mandatoryCustomerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information that is mandatory to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "enableGuestLogin": {
          "type": "boolean",
          "title": "Whether to enable guest login"
        },
        "menuOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "defaultTab": {
          "type": "string"
        },
        "customCss": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "availableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "changeMask": {
          "type": "string"
        },
        "childrenSettings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChildrenBookingPortalSetting"
          },
          "title": "deprecated (as disc. with rajesh sir, re-added so that ui-code doesn't have errors)\nif parent is company, this field contains location level settings"
        },
        "logoUrl": {
          "type": "string"
        },
        "showHomeMenu": {
          "type": "boolean"
        },
        "showAppointmentTab": {
          "type": "boolean"
        },
        "disableSignup": {
          "type": "boolean",
          "title": "This option will disable the create account option"
        },
        "protectedRoutes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Routes on which login is required on booking portal"
        },
        "announcementSetting": {
          "$ref": "#/definitions/v1AnnouncementSetting"
        }
      }
    },
    "v1ChildrenBookingPortalSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "settings are on company/location level"
        },
        "enableBookingPortal": {
          "type": "boolean",
          "title": "Whether to enable booking portal for clients on location"
        },
        "removeBranding": {
          "type": "boolean",
          "title": "Whether to remove branding for a service or not"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Platforms through which login is enabled"
        },
        "uiSettings": {
          "type": "string",
          "title": "All UI related settings will be stored here as json"
        },
        "customerInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1CustomerInformation"
          },
          "title": "Contains the customer information to be stored while booking from guest login\nlike first name, last name, address, mobile number of customer"
        },
        "enableGuestLogin": {
          "type": "boolean",
          "title": "Whether to enable guest login"
        }
      }
    },
    "v1CustomerInformation": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_INFO",
        "FIRST_NAME",
        "LAST_NAME",
        "EMAIL",
        "ADDRESS",
        "ZIP",
        "CITY_STATE",
        "MOBILE_NUMBER"
      ],
      "default": "UNSPECIFIED_INFO",
      "title": "Information about the customer"
    },
    "v1ListBookingPortalSettingOfLocationsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BookingPortalSetting"
          }
        }
      }
    },
    "v1UpsertBookingPortalSettingRequest": {
      "type": "object",
      "properties": {
        "bookingPortalSetting": {
          "$ref": "#/definitions/v1BookingPortalSetting"
        },
        "updateMask": {
          "type": "string"
        }
      },
      "title": "UpsertBookingPortalSettingRequest contains the booking-portal-setting object\nand the update mask\nThe update mask will be used to update a specific field in booking-portal-setting object"
    },
    "DepartmentsUpdateDepartmentBody": {
      "type": "object",
      "properties": {
        "department": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "Name is the human readable name of the department.\nShould never be considered unique for any purposes"
            },
            "description": {
              "type": "string",
              "title": "Description of the department"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "description": "Metadata of a department. Can be added as required by the client."
            }
          },
          "title": "Department that needs to be updated. (required)"
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given department object can be\nupdated.\nList of fields which can be updated are  :\nName , Description"
        }
      },
      "title": "UpdateDepartmentRequest contains the department object and update_mask .\nThe update mask will be used to update a specific field in department object"
    },
    "v1BatchCreateDepartmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given department like\ngroup."
        },
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          },
          "title": "Departments that needs to be created. (required)"
        }
      },
      "title": "CreateDepartmentRequest is the request to create a new department ,"
    },
    "v1BatchCreateDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          }
        }
      }
    },
    "v1BatchGetDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          },
          "description": "Departments that are returned."
        }
      },
      "description": "BatchGetDepartmentResponse contains the list of departments given in the request object."
    },
    "v1CreateDepartmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given department like\ngroup."
        },
        "department": {
          "$ref": "#/definitions/v1Department",
          "title": "Department that needs to be created. (required)"
        }
      },
      "title": "CreateDepartmentRequest is the request to create a new department ,"
    },
    "v1Department": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the department"
        },
        "name": {
          "type": "string",
          "title": "Name is the human readable name of the department.\nShould never be considered unique for any purposes"
        },
        "description": {
          "type": "string",
          "title": "Description of the department"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "Metadata of a department. Can be added as required by the client."
        }
      }
    },
    "v1ListDepartmentResponse": {
      "type": "object",
      "properties": {
        "department": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Department"
          }
        }
      },
      "title": "ListDepartmentResponse returns the list of departments"
    },
    "AppointmentsAddConsumersBody": {
      "type": "object",
      "properties": {
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "notes": {
          "type": "string",
          "title": "initial notes given"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        }
      }
    },
    "AppointmentsAddConsumersToRecurringAppointmentBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "notes": {
          "type": "string"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        }
      }
    },
    "AppointmentsBatchCancelConsumersBody": {
      "type": "object",
      "properties": {
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "AppointmentsCancelAllFutureAppointmentsBody": {
      "type": "object",
      "properties": {
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string"
        }
      }
    },
    "AppointmentsCancelAppointmentBody": {
      "type": "object",
      "properties": {
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "consumerId": {
          "type": "string"
        }
      },
      "title": "Request to cancel appointment"
    },
    "AppointmentsCancelAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        }
      }
    },
    "AppointmentsCancelPortedAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before cancellation"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        }
      }
    },
    "AppointmentsCancelRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string",
          "title": "one of the two will be required"
        },
        "thisAppointmentId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "customerId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        }
      }
    },
    "AppointmentsChangeAppointmentStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus",
          "title": "for internal use only"
        },
        "reason": {
          "type": "string",
          "title": "reason for status change"
        },
        "isAdmin": {
          "type": "boolean"
        }
      },
      "title": "Request to change appointment status"
    },
    "AppointmentsChangeAppointmentStatusByDataCodeBody": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus",
          "title": "NewStatus: new appointment status"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment for log service"
        }
      }
    },
    "AppointmentsChangeConsumerStatusBody": {
      "type": "object",
      "properties": {
        "cusId": {
          "type": "string"
        },
        "newConsumerStatus": {
          "$ref": "#/definitions/v1ConsumerStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string"
        }
      },
      "title": "Request to change consumer status"
    },
    "AppointmentsChangeRecurringAppointmentStatusBody": {
      "type": "object",
      "properties": {
        "newStatus": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "newCustomStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "originalAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "title": "OriginalAppointment is the appointment before update"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for status change"
        },
        "isAdmin": {
          "type": "boolean"
        },
        "recurringId": {
          "type": "string",
          "title": "change recurring appointment status, all at a time"
        }
      },
      "title": "Request to change recurring-appointment status"
    },
    "AppointmentsDeleteRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string",
          "title": "one of the two will be required"
        },
        "thisAppointmentId": {
          "type": "string"
        }
      }
    },
    "AppointmentsListAppointmentsOfOrderBody": {
      "type": "object",
      "properties": {
        "recurringId": {
          "type": "string"
        },
        "appointmentId": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateAppointmentBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "type": "object",
          "properties": {
            "timeSlot": {
              "$ref": "#/definitions/typesTimeslot",
              "title": "Timeslot of the appointment in UTC. (required)"
            },
            "resources": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Resource"
              },
              "title": "Resources booked in this appointment. (optional)"
            },
            "resourceTypes": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ResourceType"
              },
              "title": "Resource Types booked in this appointment. (optional)"
            },
            "service": {
              "$ref": "#/definitions/v1Service",
              "title": "Service of the appointment. (required)"
            },
            "channel": {
              "$ref": "#/definitions/v1Channel",
              "title": "Channel of the appointment. (optional)"
            },
            "employee": {
              "$ref": "#/definitions/v1Employee",
              "title": "Employee of the appointment. (required but can be filled using availability only in serialize appointment case)\nIn case of Meeting, this employee is considered to be the Host of the booking"
            },
            "invitedEmployees": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1InvitedEmployee"
              },
              "title": "InvitedEmployees represents list of employees other than the host that are booked in the appointment\nThis will only be used in case of meetings"
            },
            "consumers": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1Consumer"
              },
              "title": "Consumers booked in this appointment. (optional)"
            },
            "quantity": {
              "type": "string",
              "format": "int64",
              "description": "total consumers",
              "title": "total no. of consumers in the appointment"
            },
            "bookingId": {
              "type": "string",
              "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id."
            },
            "recurringId": {
              "type": "string"
            },
            "status": {
              "$ref": "#/definitions/v1AppointmentStatus"
            },
            "paymentStatus": {
              "$ref": "#/definitions/v1AppointmentPaymentStatus"
            },
            "createdBy": {
              "type": "string"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "source": {
              "type": "string"
            },
            "rescheduleAllowedTill": {
              "type": "string",
              "format": "date-time"
            },
            "cancellationAllowedTill": {
              "type": "string",
              "format": "date-time"
            },
            "totalPrice": {
              "$ref": "#/definitions/typesPrice"
            },
            "discountCode": {
              "type": "string"
            },
            "totalDiscountedPrice": {
              "$ref": "#/definitions/typesPrice"
            },
            "meetingData": {
              "$ref": "#/definitions/v1MeetingData"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "medium": {
              "type": "string"
            },
            "campaign": {
              "type": "string"
            },
            "isBookedByAdmin": {
              "type": "boolean",
              "title": "is_booked_by_admin true if booked by admin"
            },
            "reason": {
              "type": "string",
              "title": "reason for update or cancel"
            },
            "submissionData": {
              "type": "string",
              "format": "byte",
              "title": "form submission data, this is read only value, and is not stored in db"
            },
            "isIntakeFormSubmitted": {
              "type": "boolean"
            },
            "hasNotes": {
              "type": "boolean"
            },
            "historicalData": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1AppointmentHistory"
              },
              "title": "Appointment historical data"
            },
            "everRescheduled": {
              "type": "boolean",
              "title": "true on update in time"
            },
            "lastRescheduledBy": {
              "type": "string"
            },
            "lastRescheduledOn": {
              "type": "string",
              "format": "date-time"
            },
            "isLastRescheduledByAdmin": {
              "type": "boolean"
            },
            "lastStatusUpdatedBy": {
              "type": "string",
              "title": "Last Status Change fields"
            },
            "lastStatusUpdatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "isLastStatusUpdatedByAdmin": {
              "type": "boolean"
            },
            "recurrenceSet": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "inviteeCanModify": {
              "type": "boolean",
              "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
            },
            "inviteeCanManageOtherInvitees": {
              "type": "boolean",
              "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
            },
            "viewGuestList": {
              "type": "boolean",
              "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment."
            },
            "lastRecurringAppointment": {
              "type": "boolean"
            }
          },
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "consumerId": {
          "type": "string"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "note": {
          "type": "string",
          "title": "note"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "originalExtendedFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      },
      "title": "Request to update appointment"
    },
    "AppointmentsUpdateAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        }
      }
    },
    "AppointmentsUpdateAppointmentCustomStatusBody": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isDefault": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            }
          }
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateConsumerRSVPByDataCodeBody": {
      "type": "object",
      "properties": {
        "rsvp": {
          "$ref": "#/definitions/typesRsvp"
        },
        "rsvpMessage": {
          "type": "string"
        }
      }
    },
    "AppointmentsUpdateConsumersQuantityBody": {
      "type": "object",
      "properties": {
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "consumerId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        }
      }
    },
    "AppointmentsUpdatePortedAppointmentByDataCodeBody": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Appointment contains appointment object"
        },
        "updateMask": {
          "type": "string",
          "title": "update mask can only have update only fields"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        }
      }
    },
    "AppointmentsUpdateRecurringAppointmentsBody": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/v1Appointment"
        },
        "updateMask": {
          "type": "string"
        },
        "recurringType": {
          "$ref": "#/definitions/v1RecurringUpdateType"
        },
        "recurringId": {
          "type": "string"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "skipValidation": {
          "type": "boolean",
          "title": "skip validation"
        },
        "customerId": {
          "type": "string"
        }
      }
    },
    "typesAddress": {
      "type": "object",
      "properties": {
        "country": {
          "type": "string",
          "title": "Country , e.g. \"USA\". (required)"
        },
        "locality": {
          "type": "string",
          "title": "Locality or locality/city, e.g. \"Mountain View\". (required)"
        },
        "region": {
          "type": "string",
          "title": "Region, The region/state/province, e.g. \"CA\". This field is only required\nin\ncountries where region is commonly a part of the address. (optional)"
        },
        "postalCode": {
          "type": "string",
          "title": "PostalCode  e.g. \"94043\". (required)"
        },
        "streetAddress": {
          "type": "string",
          "title": "StreetAddress, e.g. \"1600 Amphitheatre Pkwy\". (required)"
        },
        "latitude": {
          "type": "number",
          "format": "double",
          "title": "GeoCoordinates , e.g. latitude=23.2599333, longitude=77.41261499999996\nLatitude e.g. 23.2599333"
        },
        "longitude": {
          "type": "number",
          "format": "double",
          "title": "Longitude e.g. 77.41261499999996"
        }
      }
    },
    "typesDateslot": {
      "type": "object",
      "properties": {
        "startTime": {
          "type": "string",
          "format": "date-time"
        },
        "endTime": {
          "type": "string",
          "format": "date-time"
        }
      },
      "title": "Generic Dateslot object"
    },
    "typesExtendedFieldSubmissionValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "stringKey": {
          "type": "string"
        },
        "intKey": {
          "type": "string",
          "format": "int64"
        },
        "floatKey": {
          "type": "number",
          "format": "float"
        },
        "boolKey": {
          "type": "boolean"
        },
        "addressKey": {
          "$ref": "#/definitions/typesAddress"
        },
        "stringArrKey": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "intArrKey": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "int64"
          }
        }
      }
    },
    "typesFormValue": {
      "type": "object",
      "properties": {
        "valueType": {
          "$ref": "#/definitions/typesFormValueType",
          "title": "value type"
        },
        "text": {
          "type": "string",
          "title": "value"
        },
        "boolean": {
          "type": "boolean"
        },
        "number": {
          "type": "string",
          "format": "int64"
        },
        "decimal": {
          "type": "number",
          "format": "double"
        },
        "timestamp": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "typesFormValueType": {
      "type": "string",
      "enum": [
        "String",
        "Boolean",
        "Number",
        "Decimal",
        "Timestamp",
        "OnlyDatePart",
        "OnlyTimePart"
      ],
      "default": "String",
      "title": "- Timestamp: date + time\n - OnlyDatePart: date\n - OnlyTimePart: time"
    },
    "typesMetaDetailsWrapper": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "createdBy": {
          "type": "string"
        },
        "updatedBy": {
          "type": "string"
        },
        "deletedBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isDeleted": {
          "type": "boolean"
        },
        "updateMask": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "typesOrderBy": {
      "type": "string",
      "enum": [
        "Ascending",
        "Descending"
      ],
      "default": "Ascending"
    },
    "typesPaginationInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean"
        },
        "hasPrevious": {
          "type": "boolean"
        },
        "nextOffset": {
          "type": "integer",
          "format": "int32"
        },
        "previousOffset": {
          "type": "integer",
          "format": "int32"
        }
      },
      "title": "Pagination Info for report"
    },
    "typesPaymentMethod": {
      "type": "string",
      "enum": [
        "UNSPECIFIED_PAYMENT_METHOD",
        "CASH",
        "STRIPE_CARD",
        "SQUARE_CARD",
        "PACKAGE",
        "GIFT_CERTIFICATE",
        "MEMBERSHIP",
        "DISCOUNT_CODE",
        "CREDIT_CARD",
        "ECHECK",
        "DEBIT_CARD",
        "CREDIT_CARD_AND_CASH",
        "GIFT_CERTIFICATE_OFFLINE",
        "GIFT_CERTIFICATE_AND_CASH",
        "INSURANCE",
        "CHEQUE",
        "RADIUS",
        "RAZORPAY_ACCOUNT",
        "PAYPAL_ACCOUNT"
      ],
      "default": "UNSPECIFIED_PAYMENT_METHOD",
      "description": "- CASH: Offline\n - CREDIT_CARD: Offline\n - ECHECK: Offline\n - DEBIT_CARD: Offline\n - CREDIT_CARD_AND_CASH: Offline\n - GIFT_CERTIFICATE_OFFLINE: Offline\n - GIFT_CERTIFICATE_AND_CASH: Offline\n - INSURANCE: Offline\n - CHEQUE: Offline",
      "title": "PaymentMethod defines the all the type of mode of payment supported by saastack"
    },
    "typesPrice": {
      "type": "object",
      "properties": {
        "amount": {
          "type": "string",
          "format": "uint64"
        },
        "currency": {
          "type": "string"
        },
        "amountInFloat": {
          "type": "number",
          "format": "double",
          "title": "@deprecated - DO NOT USE"
        }
      },
      "title": "Generic Price object"
    },
    "typesProtobuf": {
      "type": "object",
      "properties": {
        "typeUrl": {
          "type": "string",
          "title": "TypeUrl specifies the path of the protocol buffer message"
        },
        "data": {
          "type": "string",
          "format": "byte",
          "title": "Data is valid serialized protocol buffer message"
        }
      },
      "title": "Protobuf represesnts any serialized protocol buffer message"
    },
    "typesRsvp": {
      "type": "string",
      "enum": [
        "NOT_RESPONDED",
        "YES",
        "NO",
        "MAYBE"
      ],
      "default": "NOT_RESPONDED"
    },
    "v1AddConsumersToRecurringAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointmentsWithMessage": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1AddOrRemoveMeetingInviteesRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "InvitedEmployees will contain list of employees\n * to be added if Remove is false,\n * or to be removed if Remove is true"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "Similarly, consumers will contain list of consumers\n * to be added if Remove is false,\n * or to be removed if Remove is true"
        },
        "remove": {
          "type": "boolean",
          "title": "Remove flag as discussed in Employees and Consumers fields above"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        }
      }
    },
    "v1AdditionalReportsFilter": {
      "type": "object",
      "properties": {
        "vehicleRegistrationNumber": {
          "type": "string"
        },
        "buyerOrganizationName": {
          "type": "string"
        },
        "buyerOrganizationId": {
          "type": "string"
        }
      }
    },
    "v1Appointment": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the appointment."
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Timeslot of the appointment in UTC. (required)"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          },
          "title": "Resources booked in this appointment. (optional)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          },
          "title": "Resource Types booked in this appointment. (optional)"
        },
        "service": {
          "$ref": "#/definitions/v1Service",
          "title": "Service of the appointment. (required)"
        },
        "channel": {
          "$ref": "#/definitions/v1Channel",
          "title": "Channel of the appointment. (optional)"
        },
        "employee": {
          "$ref": "#/definitions/v1Employee",
          "title": "Employee of the appointment. (required but can be filled using availability only in serialize appointment case)\nIn case of Meeting, this employee is considered to be the Host of the booking"
        },
        "invitedEmployees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "InvitedEmployees represents list of employees other than the host that are booked in the appointment\nThis will only be used in case of meetings"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Consumer"
          },
          "title": "Consumers booked in this appointment. (optional)"
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "description": "total consumers",
          "title": "total no. of consumers in the appointment"
        },
        "bookingId": {
          "type": "string",
          "description": "BookingId is a unique grouping id for appointments booked together. For example,\nrecurring appointments will share the same booking id."
        },
        "recurringId": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "source": {
          "type": "string"
        },
        "rescheduleAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "cancellationAllowedTill": {
          "type": "string",
          "format": "date-time"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "discountCode": {
          "type": "string"
        },
        "totalDiscountedPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "meetingData": {
          "$ref": "#/definitions/v1MeetingData"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "isBookedByAdmin": {
          "type": "boolean",
          "title": "is_booked_by_admin true if booked by admin"
        },
        "reason": {
          "type": "string",
          "title": "reason for update or cancel"
        },
        "submissionData": {
          "type": "string",
          "format": "byte",
          "title": "form submission data, this is read only value, and is not stored in db"
        },
        "isIntakeFormSubmitted": {
          "type": "boolean"
        },
        "hasNotes": {
          "type": "boolean"
        },
        "historicalData": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentHistory"
          },
          "title": "Appointment historical data"
        },
        "everRescheduled": {
          "type": "boolean",
          "title": "true on update in time"
        },
        "lastRescheduledBy": {
          "type": "string"
        },
        "lastRescheduledOn": {
          "type": "string",
          "format": "date-time"
        },
        "isLastRescheduledByAdmin": {
          "type": "boolean"
        },
        "lastStatusUpdatedBy": {
          "type": "string",
          "title": "Last Status Change fields"
        },
        "lastStatusUpdatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isLastStatusUpdatedByAdmin": {
          "type": "boolean"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inviteeCanModify": {
          "type": "boolean",
          "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean",
          "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
        },
        "viewGuestList": {
          "type": "boolean",
          "description": "ViewGuestList represent Meeting app permission for all users to view other users involved in appointment."
        },
        "lastRecurringAppointment": {
          "type": "boolean"
        }
      }
    },
    "v1AppointmentBuyerOrganization": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      },
      "title": "This is created for VTNZ Client"
    },
    "v1AppointmentCancellationPolicyResponse": {
      "type": "object",
      "properties": {
        "cancellationPossible": {
          "type": "boolean"
        },
        "penalty": {
          "$ref": "#/definitions/typesPrice"
        },
        "penaltyPercentage": {
          "type": "number",
          "format": "double"
        },
        "reason": {
          "type": "string"
        },
        "mode": {
          "type": "string"
        }
      }
    },
    "v1AppointmentCustomStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1AppointmentEvent": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "start": {
          "type": "string",
          "format": "date-time"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "title": {
          "type": "string",
          "title": "title of service"
        },
        "groupIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "parent": {
          "type": "string",
          "title": "contains location-id"
        }
      }
    },
    "v1AppointmentFormField": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "formFieldType": {
          "$ref": "#/definitions/v1AppointmentFormFieldType"
        },
        "options": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormFieldOption"
          }
        },
        "multiple": {
          "type": "boolean"
        },
        "number": {
          "type": "boolean"
        },
        "label": {
          "type": "string"
        },
        "placeholder": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1AppointmentFormFieldOption": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "v1AppointmentFormFieldType": {
      "type": "string",
      "enum": [
        "FormFieldType_UNDEFINED",
        "INPUT",
        "CHECKBOX",
        "SELECT",
        "ADDRESS"
      ],
      "default": "FormFieldType_UNDEFINED"
    },
    "v1AppointmentHistory": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string",
          "title": "meta data for this history object"
        },
        "createdBy": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "isCreatedByAdmin": {
          "type": "boolean"
        },
        "timeslot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Old Appointment data"
        },
        "serviceId": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "inviteeCanModify": {
          "type": "boolean"
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean"
        },
        "viewGuestList": {
          "type": "boolean"
        },
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "inviteeEmployeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "resourceTypeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        }
      }
    },
    "v1AppointmentMonthView": {
      "type": "string",
      "enum": [
        "StaffView",
        "ServiceView",
        "ResourceView",
        "LocationView"
      ],
      "default": "StaffView"
    },
    "v1AppointmentNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the Appointment list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1Appointment",
          "title": "Information about the AppointmentNode"
        },
        "buyerOrganization": {
          "$ref": "#/definitions/v1AppointmentBuyerOrganization"
        }
      },
      "title": "Information about each Appointment and its position"
    },
    "v1AppointmentNote": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "all its validations are checked in notes service"
        },
        "title": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "private": {
          "type": "boolean"
        },
        "typeId": {
          "type": "string"
        },
        "against": {
          "type": "string"
        },
        "appTypeId": {
          "type": "string"
        },
        "appTypeName": {
          "type": "string"
        },
        "createdBy": {
          "type": "string",
          "title": "meta details"
        },
        "updatedBy": {
          "type": "string"
        },
        "deletedBy": {
          "type": "string"
        },
        "createdByName": {
          "type": "string"
        },
        "updatedByName": {
          "type": "string"
        },
        "deletedByName": {
          "type": "string"
        },
        "createdByEmail": {
          "type": "string"
        },
        "updatedByEmail": {
          "type": "string"
        },
        "deletedByEmail": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "deletedOn": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1AppointmentNoteNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentNote",
          "title": "Node is the actual consumer object"
        }
      }
    },
    "v1AppointmentPaymentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_PAYMENT_UNKNOWN",
        "APPOINTMENT_PAYMENT_FAILED",
        "APPOINTMENT_PAYMENT_PAID",
        "APPOINTMENT_PAYMENT_UNPAID",
        "APPOINTMENT_PAYMENT_REFUND",
        "APPOINTMENT_PAYMENT_PARTIAL"
      ],
      "default": "APPOINTMENT_PAYMENT_UNKNOWN"
    },
    "v1AppointmentRefundStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_REFUND_STATUS_UNKNOWN",
        "APPOINTMENT_PAYMENT_FULL_REFUND",
        "APPOINTMENT_PAYMENT_PARTIAL_REFUND"
      ],
      "default": "APPOINTMENT_REFUND_STATUS_UNKNOWN"
    },
    "v1AppointmentReportData": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerWithTags"
          }
        },
        "serviceTitle": {
          "type": "string"
        },
        "duration": {
          "type": "string"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        },
        "paymentStatus": {
          "$ref": "#/definitions/v1AppointmentPaymentStatus"
        },
        "totalPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Resource"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        },
        "bookingDate": {
          "type": "string",
          "format": "date-time"
        },
        "appointmentDate": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "source": {
          "type": "string"
        },
        "medium": {
          "type": "string"
        },
        "campaign": {
          "type": "string"
        },
        "notes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isBookedByAdmin": {
          "type": "boolean"
        },
        "bookedByUserId": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "int64"
        },
        "employeeId": {
          "type": "string"
        },
        "serviceId": {
          "type": "string"
        },
        "forms": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReportIntakeForm"
          }
        },
        "submissionValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UnitSubmissionValue"
          }
        },
        "invitedEmployees": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1InvitedEmployee"
          },
          "title": "Invited employees"
        },
        "rescheduledByUserId": {
          "type": "string"
        },
        "cancelledByUserId": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "extendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "extendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "employeeExtendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "employeeExtendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "discountCode": {
          "type": "string"
        },
        "totalDiscountedPrice": {
          "$ref": "#/definitions/typesPrice"
        },
        "serviceCategory": {
          "type": "string"
        },
        "employeeSsoId": {
          "type": "string"
        },
        "membershipTitle": {
          "type": "string"
        },
        "membershipCode": {
          "type": "string"
        },
        "refundStatus": {
          "$ref": "#/definitions/v1AppointmentRefundStatus"
        },
        "refundedQuantity": {
          "type": "string",
          "format": "int64"
        },
        "bookingUrl": {
          "type": "string"
        },
        "additionalAmountNote": {
          "type": "string"
        },
        "additionalDiscountNote": {
          "type": "string"
        },
        "buyerOrganization": {
          "$ref": "#/definitions/v1AppointmentBuyerOrganization"
        }
      }
    },
    "v1AppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1AppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentReportData"
        }
      }
    },
    "v1AppointmentReportSortBy": {
      "type": "string",
      "enum": [
        "AppointmentReportSortBy_UNDEFINED",
        "AppointmentReportSortBy_StartTime",
        "AppointmentReportSortBy_EndTime",
        "AppointmentReportSortBy_BookingTime",
        "AppointmentReportSortBy_LastRescheduledTime",
        "AppointmentReportSortBy_ServiceTitle",
        "AppointmentReportSortBy_EmployeeName",
        "AppointmentReportSortBy_EmployeeEmail",
        "AppointmentReportSortBy_CustomerName",
        "AppointmentReportSortBy_CustomerEmail"
      ],
      "default": "AppointmentReportSortBy_UNDEFINED"
    },
    "v1AppointmentSearchData": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "service": {
          "$ref": "#/definitions/v1ServiceSearchData"
        },
        "consumers": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerSearchData"
          },
          "title": "student data"
        },
        "employee": {
          "$ref": "#/definitions/v1UserSearchData",
          "title": "employee data"
        },
        "status": {
          "$ref": "#/definitions/v1AppointmentStatus"
        }
      }
    },
    "v1AppointmentSearchForCalendarResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentSearchNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "in PageInfo object, HasPrevious field is always ignored, do not use it"
        }
      }
    },
    "v1AppointmentSearchNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string",
          "title": "cursor is the current position of the cursor in the Appointment list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1AppointmentSearchData",
          "title": "Information about appointment"
        }
      }
    },
    "v1AppointmentSortBy": {
      "type": "string",
      "enum": [
        "StartTime",
        "CreatedOn"
      ],
      "default": "StartTime"
    },
    "v1AppointmentStatus": {
      "type": "string",
      "enum": [
        "APPOINTMENT_STATUS_UNSPECIFIED",
        "APPOINTMENT_CONFIRMED",
        "APPOINTMENT_CANCELLED",
        "APPOINTMENT_WAITING_FOR_APPROVAL",
        "APPOINTMENT_BOOKING_IN_PROCESS",
        "APPOINTMENT_FAILED"
      ],
      "default": "APPOINTMENT_STATUS_UNSPECIFIED"
    },
    "v1AppointmentStatusFilter": {
      "type": "object",
      "properties": {
        "statuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppointmentStatus"
          },
          "title": "status filter"
        },
        "paymentStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1AppointmentPaymentStatus"
          },
          "title": "payment status filter"
        },
        "customStatus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer custom status"
        },
        "customStatusNames": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "consumer custom status names (not used in reports at the moment)"
        }
      }
    },
    "v1AppointmentWithMessage": {
      "type": "object",
      "properties": {
        "app": {
          "$ref": "#/definitions/v1Appointment",
          "title": "App contains appointment object"
        },
        "isBooked": {
          "type": "boolean",
          "title": "whether appointment is booked or not"
        },
        "errorMessage": {
          "type": "string",
          "title": "error message for appointment"
        },
        "isUpdated": {
          "type": "boolean",
          "title": "whether appointment is updated or not"
        },
        "isCancelled": {
          "type": "boolean",
          "title": "whether appointment is cancelled or not"
        }
      }
    },
    "v1AppointmentsCancellationPoliciesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
          }
        }
      }
    },
    "v1AppointmentsMonthViewResponse": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DailyAppointmentViewCount"
          }
        }
      }
    },
    "v1AvailabilityStatus": {
      "type": "object",
      "properties": {
        "available": {
          "type": "boolean"
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1BatchCancelAppointmentsRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "reason": {
          "type": "string",
          "title": "reason for cancellation"
        },
        "employeeId": {
          "type": "string",
          "title": "for sole purpose of rights check"
        },
        "customerId": {
          "type": "string"
        }
      }
    },
    "v1BatchCancelAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointmentsWithMessage": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        },
        "cancellationPolicies": {
          "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
        }
      }
    },
    "v1BatchCancelConsumersResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        }
      }
    },
    "v1BatchCheckAvailabilityRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "description": "Appointments to be checked. If recurrence is set then only first is considered."
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Recurrence is the rrule set. It takes first of the Appointments field and applies recurrence."
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "checkOpenHours": {
          "type": "boolean"
        }
      }
    },
    "v1BatchCheckAvailabilityResponse": {
      "type": "object",
      "properties": {
        "cannotBook": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "List of items that cannot be booked.\nIf the request has recurrence then it is the index of slot in order built."
        },
        "slotsStatus": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1AvailabilityStatus"
          }
        }
      }
    },
    "v1BatchConsumerAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "consumersAppointmentCount": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerAppointmentCountResponse"
          }
        }
      }
    },
    "v1BatchCreateAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CreateAppointmentWrapper"
          },
          "title": "List of Appointments requested"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "setNotesPrivate": {
          "type": "boolean"
        },
        "importCall": {
          "type": "boolean"
        }
      }
    },
    "v1BatchCreateAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          },
          "title": "List of Appointment with message"
        },
        "bookingId": {
          "type": "string",
          "title": "Unique booking id of appointment"
        }
      }
    },
    "v1BatchGetAppointmentResponse": {
      "type": "object",
      "properties": {
        "appointment": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1BatchUpdateAppointmentsRequest": {
      "type": "object",
      "properties": {
        "base": {
          "$ref": "#/definitions/v1Appointment"
        },
        "parent": {
          "type": "string"
        },
        "updateMask": {
          "type": "string"
        },
        "appointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "skipValidation": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "timezone": {
          "type": "string",
          "title": "update booking timezone by sending it in here (if empty no change will take place)"
        },
        "originalAppointment": {
          "$ref": "#/definitions/v1Appointment",
          "title": "OriginalAppointment is the appointment before update"
        },
        "note": {
          "type": "string"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        }
      }
    },
    "v1BatchUpdateAppointmentsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "originalList": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "description": "OriginalList contains original appointments before update with 1 to 1 mapping with list."
        }
      }
    },
    "v1CancelAllFutureAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointmentCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1CancelAppointmentByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1CancelAppointmentResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        }
      }
    },
    "v1CancelRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "oldAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        },
        "cancellationPolicies": {
          "$ref": "#/definitions/v1AppointmentsCancellationPoliciesResponse"
        }
      }
    },
    "v1ChangeAppointmentStatusByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1ChangeAppointmentStatusResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
        },
        "updatedAppointment": {
          "$ref": "#/definitions/v1AppointmentWithMessage"
        }
      }
    },
    "v1ChangeRecurringAppointmentStatusResponse": {
      "type": "object",
      "properties": {
        "cancellationPolicy": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCancellationPolicyResponse"
          }
        },
        "updatedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1Channel": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the channel"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CompanyAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1AppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanyAppointmentReportLocationData"
        }
      }
    },
    "v1CompanyAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1CompanyAppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanyAppointmentReportData"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1GroupedAppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1CompanyGroupedAppointmentReportLocationData"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1CompanyGroupedAppointmentReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1CompanyGroupedAppointmentReportData"
        }
      }
    },
    "v1ConfirmLeaseResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1Consumer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the consumer"
        },
        "email": {
          "type": "string",
          "description": "Email of consumer."
        },
        "consumerType": {
          "$ref": "#/definitions/v1ConsumerType",
          "title": "type and other data of consumer"
        },
        "consumerData": {
          "$ref": "#/definitions/v1ConsumerData"
        },
        "status": {
          "$ref": "#/definitions/v1ConsumerStatus",
          "title": "Status of consumer whether unspecified, confirmed, cancelled or no show"
        },
        "language": {
          "type": "string",
          "description": "Language is the ISO language codes. For example 'en-US', 'fr', 'fr-CA'."
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'Asia/Kolkatta', 'America/Los_Angeles'"
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus",
          "title": "custom status"
        },
        "customStatusLastChangedOn": {
          "type": "string",
          "format": "date-time"
        },
        "isBookedByAdmin": {
          "type": "boolean",
          "title": "is_booked_by_admin true if booked by admin"
        },
        "policyId": {
          "type": "string"
        },
        "acceptanceId": {
          "type": "string"
        },
        "price": {
          "$ref": "#/definitions/typesPrice"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phoneNumber": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "quantity": {
          "type": "string",
          "format": "int64",
          "title": "total no. of consumers"
        },
        "reviewSent": {
          "type": "boolean"
        },
        "smsReminderSent": {
          "type": "boolean"
        },
        "emailReminderSent": {
          "type": "boolean"
        },
        "smsRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "emailRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "rsvp": {
          "$ref": "#/definitions/typesRsvp",
          "title": "Rsvp status of the consumer, will be used only in case of meetings app"
        },
        "rsvpMessage": {
          "type": "string"
        },
        "isHost": {
          "type": "boolean",
          "title": "IsHost represents whether this consumer is the client host of the booking\nThis is also used only in case of meetings app"
        },
        "consumerName": {
          "type": "string",
          "description": "only for readonly purpose: if consumer_type=='STUDENT'\nconsumer_name = student_data.first_name + \" \" + student_data.last_name\nif consumer_type=='CUSTOMER' consumer_name = customer_data.first_name + \" \" + customer_data.last_name\nThis field is only for purpose of join simplicity."
        },
        "customerName": {
          "type": "string",
          "description": "only for readonly purpose: if consumer_type=='STUDENT'\ncustomer_name = student_data.guardian_first_name + \" \" + student_data.guardian_last_name\nif consumer_type=='CUSTOMER' customer_name = customer_data.first_name + \" \" + customer_data.last_name\nThis field is only for purpose of join simplicity."
        },
        "customerEmail": {
          "type": "string",
          "description": "only for readonly purpose: if consumer_type=='STUDENT' then customer_email=student_data.guardianEmail\nif consumer_type=='CUSTOMER' customer_email == Consumer.email\nThis field is only for purpose of join simplicity."
        },
        "bookingCustomerId": {
          "type": "string",
          "description": "BookingCustomerId is the booking customer id or the main customer id e.g.\nIn case of student type, it will be the booking guardian's id or the student's primary guardian's id.\nand else it will be the booking customer id or the main customer id."
        },
        "consumerGuests": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "cancelationReason": {
          "type": "string"
        }
      }
    },
    "v1ConsumerAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "consumerId": {
          "type": "string"
        }
      }
    },
    "v1ConsumerData": {
      "type": "object",
      "properties": {
        "customerData": {
          "$ref": "#/definitions/v1CustomerData"
        },
        "studentData": {
          "$ref": "#/definitions/v1StudentData"
        }
      }
    },
    "v1ConsumerSearchData": {
      "type": "object",
      "properties": {
        "consumerId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        },
        "customer": {
          "$ref": "#/definitions/v1UserSearchData",
          "title": "Guardian data"
        }
      }
    },
    "v1ConsumerStatus": {
      "type": "string",
      "enum": [
        "CONSUMER_STATUS_UNSPECIFIED",
        "CONFIRMED",
        "CANCELLED"
      ],
      "default": "CONSUMER_STATUS_UNSPECIFIED"
    },
    "v1ConsumerType": {
      "type": "string",
      "enum": [
        "CUSTOMER",
        "STUDENT"
      ],
      "default": "CUSTOMER",
      "description": "More type will be added in the future."
    },
    "v1ConsumerWithTags": {
      "type": "object",
      "properties": {
        "details": {
          "$ref": "#/definitions/v1Consumer"
        },
        "tags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "companyId": {
          "type": "string"
        },
        "extendedFormFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        },
        "extendedFormFields": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentFormField"
          }
        },
        "ssoId": {
          "type": "string"
        },
        "displayCustomerId": {
          "type": "string"
        }
      }
    },
    "v1CreateAppointmentCustomStatusRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "customStatus": {
          "$ref": "#/definitions/v1AppointmentCustomStatus"
        }
      }
    },
    "v1CreateAppointmentNoteRequest": {
      "type": "object",
      "properties": {
        "setPrivate": {
          "type": "boolean"
        },
        "appointmentId": {
          "type": "string"
        },
        "note": {
          "$ref": "#/definitions/v1AppointmentNote"
        }
      }
    },
    "v1CreateAppointmentRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent id where the appointment is to be created"
        },
        "leaseId": {
          "type": "string",
          "description": "LeaseId is the id obtained from LeaseAppointment method."
        },
        "appointment": {
          "$ref": "#/definitions/v1Appointment",
          "description": "Appointment is the appointment to be booked."
        },
        "validateOnly": {
          "type": "boolean",
          "description": "ValidateOnly if true, it indicates that the given request should only be validated, not executed."
        },
        "skipValidation": {
          "type": "boolean"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "notes": {
          "type": "string",
          "title": "initial notes given"
        },
        "setNotePrivate": {
          "type": "boolean"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean",
          "description": "note_level_apt if true then the notes to stored at appointment level."
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time"
        },
        "recurringSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "formFieldValues": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesExtendedFieldSubmissionValue"
          }
        }
      },
      "title": "CreateAppointmentRequest: Request object for CreateAppointment rpc call"
    },
    "v1CreateAppointmentWrapper": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "note": {
          "type": "string"
        },
        "noteAtAppointmentLevel": {
          "type": "boolean"
        },
        "sendNotification": {
          "$ref": "#/definitions/v1SendNotification"
        },
        "metaDetails": {
          "$ref": "#/definitions/typesMetaDetailsWrapper",
          "title": "MetaDetailsWrapper: ignore id and set update_mask to which ever field is need to be set in it"
        }
      }
    },
    "v1CustomStatus": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id is a unique identifier of the CustomStatus"
        },
        "name": {
          "type": "string"
        },
        "isDefault": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "customStatusType": {
          "$ref": "#/definitions/v1CustomStatusType"
        }
      },
      "description": "CustomStatus represents new status-es defined as per requirements of business\nThese custom-status are used with appointments and classes..."
    },
    "v1CustomerData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string",
          "description": "First name of consumer."
        },
        "lastName": {
          "type": "string",
          "description": "LastName of consumer."
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1DailyAppointmentCount": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1DailyAppointmentViewCount": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "against": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "v1DeleteRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "deletedAppointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1DeleteRelatedAppointmentsRequest": {
      "type": "object",
      "properties": {
        "relatedToIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "relatedTo": {
          "$ref": "#/definitions/v1DeleteRelatedAppointmentsType"
        },
        "period": {
          "$ref": "#/definitions/v1DeleteRelatedAppointmentsTimePeriod"
        },
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "optional"
        },
        "deleteOnlyCancelled": {
          "type": "boolean"
        },
        "buyerOrganizationId": {
          "type": "string"
        }
      }
    },
    "v1DeleteRelatedAppointmentsResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1DeleteRelatedAppointmentsTimePeriod": {
      "type": "string",
      "enum": [
        "NoTime",
        "AllTime",
        "PastTime",
        "FutureTime"
      ],
      "default": "NoTime"
    },
    "v1DeleteRelatedAppointmentsType": {
      "type": "string",
      "enum": [
        "RelatedToNone",
        "RelatedToService",
        "RelatedToEmployee",
        "RelatedToConsumer"
      ],
      "default": "RelatedToNone"
    },
    "v1Employee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the employee. (required)"
        },
        "firstName": {
          "type": "string",
          "description": "FirstName of the employee."
        },
        "lastName": {
          "type": "string",
          "description": "LastName of the employee."
        },
        "email": {
          "type": "string",
          "description": "Email of the employee."
        },
        "profileId": {
          "type": "string",
          "title": "profile id"
        },
        "lastId": {
          "type": "string",
          "title": "in case of update: the last employee id will contain old employee id"
        },
        "name": {
          "type": "string",
          "title": "only for readonly purpose: name = first_name + \" \" + last_name"
        },
        "smsReminderSent": {
          "type": "boolean"
        },
        "emailReminderSent": {
          "type": "boolean"
        },
        "smsRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "emailRemindOn": {
          "type": "string",
          "format": "date-time"
        },
        "reviewMailStatus": {
          "$ref": "#/definitions/v1EmployeeReviewMailStatus"
        }
      }
    },
    "v1EmployeeReviewMailStatus": {
      "type": "string",
      "enum": [
        "DoNotSendMail",
        "ReviewMailScheduled",
        "ReviewMailSent"
      ],
      "default": "DoNotSendMail"
    },
    "v1FormSubmissions": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SingleSubmission"
          }
        },
        "submittedForName": {
          "type": "string"
        },
        "submittedForEmail": {
          "type": "string"
        },
        "submittedForUserId": {
          "type": "string"
        }
      }
    },
    "v1GenerateDataCodeForPortedAppointmentRequest": {
      "type": "object",
      "properties": {
        "oldOrderId": {
          "type": "string",
          "format": "int64"
        },
        "expiry": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1GenerateDataCodeForPortedAppointmentResponse": {
      "type": "object",
      "properties": {
        "dataCode": {
          "type": "string"
        }
      }
    },
    "v1GetAppointmentCountResponse": {
      "type": "object",
      "properties": {
        "counts": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DailyAppointmentCount"
          }
        }
      }
    },
    "v1GetAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        },
        "duration": {
          "type": "string"
        },
        "location": {
          "$ref": "#/definitions/v1AppointmentReportLocationData"
        }
      }
    },
    "v1GetCompanyAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        },
        "totalPrice": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesPrice"
          }
        },
        "duration": {
          "type": "string"
        }
      }
    },
    "v1GetCompanyGroupedAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompanyGroupedAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetGroupLevelAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupLevelAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1GetGroupedAppointmentReportResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GroupedAppointmentReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        }
      }
    },
    "v1GetPortedAppointmentsByCodeResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1GetRecurringAppointmentsFromBaseAppointmentResponse": {
      "type": "object",
      "properties": {
        "recurringAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1GroupBatchCheckAvailabilityRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given appointment\nlike business/group."
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          },
          "title": "list of appointments with different consumers to be checked"
        },
        "recurrence": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Recurrence is the rrule set. we will apply this recurrence rule for all the appointments in request"
        },
        "skipValidation": {
          "type": "boolean"
        },
        "checkOpenHours": {
          "type": "boolean"
        }
      }
    },
    "v1GroupBatchCheckAvailabilityResponse": {
      "type": "object",
      "properties": {
        "slotsStatus": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1AvailabilityStatus"
          },
          "description": "recurrence will be the index of slots in this map."
        }
      }
    },
    "v1GroupLevelAppointmentReportData": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/v1AppointmentReportData"
        },
        "location": {
          "$ref": "#/definitions/v1GroupLevelAppointmentReportLocationData"
        }
      }
    },
    "v1GroupLevelAppointmentReportLocationData": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "customLocationId": {
          "type": "string"
        }
      }
    },
    "v1GroupLevelAppointmentReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupLevelAppointmentReportData"
        }
      }
    },
    "v1GroupedAppointmentReportData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "parsed date-time: will be used as cursor // no need"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "serviceTitle": {
          "type": "string"
        },
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "resourceTitle": {
          "type": "string"
        },
        "resourceTypeTitle": {
          "type": "string"
        },
        "appointmentCount": {
          "type": "integer",
          "format": "int32"
        },
        "consumerCount": {
          "type": "integer",
          "format": "int32"
        },
        "sales": {
          "$ref": "#/definitions/typesPrice"
        },
        "grouperId": {
          "type": "string"
        }
      }
    },
    "v1GroupedAppointmentReportNode": {
      "type": "object",
      "properties": {
        "cursor": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1GroupedAppointmentReportData"
        }
      }
    },
    "v1ImportAppointmentsResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1InvitedEmployee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "details": {
          "$ref": "#/definitions/v1Employee"
        }
      },
      "title": "InvitedEmployee represents other invited employees in any booking"
    },
    "v1LeaseResultWrapper": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "leaseId": {
          "type": "string"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListAppointmentCustomStatusesResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentCustomStatus"
          }
        }
      }
    },
    "v1ListAppointmentEventsForCalendarResponse": {
      "type": "object",
      "properties": {
        "appointmentEvents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentEvent"
          }
        }
      }
    },
    "v1ListAppointmentFilters": {
      "type": "object",
      "properties": {
        "locationIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "consumerIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "consumerName": {
          "type": "string",
          "title": "search queries"
        },
        "consumerEmail": {
          "type": "string"
        },
        "serviceTitle": {
          "type": "string"
        },
        "employeeName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "query": {
          "type": "string",
          "title": "on all above, search queries with 'or' condition"
        }
      }
    },
    "v1ListAppointmentNotesResponse": {
      "type": "object",
      "properties": {
        "edges": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentNoteNode"
          },
          "title": "List of notes"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "PageInfo contains information about the current page"
        }
      }
    },
    "v1ListAppointmentResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentNode"
          },
          "title": "List of Appointments node which contains Appointment and its position in the list"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "title": "in PageInfo object, HasPrevious field is always ignored, do not use it"
        }
      },
      "title": "ListAppointmentsResponse: Response object for ListAppointments rpc call"
    },
    "v1ListAppointmentsForCalendarResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "blockingAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1ListAppointmentsOfOrderResponse": {
      "type": "object",
      "properties": {
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1LocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1MeetingData": {
      "type": "object",
      "properties": {
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "externalMeetingId": {
          "type": "string"
        },
        "pin": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "joinUrl": {
          "type": "string"
        },
        "iconUrl": {
          "type": "string"
        }
      }
    },
    "v1MeetingInvitee": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "profileImage": {
          "$ref": "#/definitions/typesGalleryItem"
        }
      }
    },
    "v1NoteStatusType": {
      "type": "string",
      "enum": [
        "PUBLIC",
        "PRIVATE",
        "ANY"
      ],
      "default": "PUBLIC"
    },
    "v1ObtainLeaseForAppointmentResponse": {
      "type": "object",
      "properties": {
        "leaseIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "result": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1LeaseResultWrapper"
          }
        },
        "appointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1RecurringUpdateType": {
      "type": "string",
      "enum": [
        "ThisAppointment",
        "ThisAndFollowingAppointment",
        "AllAppointments"
      ],
      "default": "ThisAppointment"
    },
    "v1ReportIntakeForm": {
      "type": "object",
      "properties": {
        "blocks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ReportIntakeFormBlock"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1ReportIntakeFormBlock": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "label": {
          "type": "string"
        }
      }
    },
    "v1ReportsDropDownFilter": {
      "type": "object",
      "properties": {
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "https://appointy.atlassian.net/browse/AXN-3779"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "bookedByUserId": {
          "type": "string",
          "title": "https://appointy.atlassian.net/browse/AXN-3786"
        },
        "discountCoupon": {
          "type": "string",
          "title": "https://appointy.atlassian.net/browse/AXN-3777"
        }
      }
    },
    "v1ResourceType": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "title": "name of the resources type"
        },
        "description": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "image": {
          "$ref": "#/definitions/typesGalleryItem"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "only resource type of non-identifiable type can have capacity"
        },
        "resourceTypesType": {
          "$ref": "#/definitions/v1ResourceTypesType"
        },
        "active": {
          "type": "boolean"
        },
        "internal": {
          "type": "boolean"
        },
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "hasOpenHours": {
          "type": "boolean"
        },
        "createdBy": {
          "type": "string",
          "title": "Created by and created on"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "updatedBy": {
          "type": "string",
          "title": "Updated by and updated on"
        },
        "updatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "templateId": {
          "type": "string",
          "title": "for company-level resource-type template-id will be empty\nfor location-level resource-type template-id is compulsory"
        }
      }
    },
    "v1SearchMeetingInviteesResponse": {
      "type": "object",
      "properties": {
        "meetingInvitee": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1MeetingInvitee"
          }
        }
      }
    },
    "v1SendNotification": {
      "type": "object",
      "properties": {
        "email": {
          "type": "boolean"
        },
        "sms": {
          "type": "boolean"
        }
      }
    },
    "v1SerializeAppointmentRequest": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "parent": {
          "type": "string"
        },
        "userId": {
          "type": "string",
          "title": "Note: user_id for client side only, to be send instead of parent for validations & right"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "dynamicLinkId": {
          "type": "string"
        },
        "submissions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1FormSubmissions"
          }
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "v1SerializeAppointmentResponse": {
      "type": "object",
      "properties": {
        "value": {
          "$ref": "#/definitions/typesProtobuf"
        },
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesProtobuf"
          }
        },
        "updatedRequests": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        }
      }
    },
    "v1Service": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "id can be empty as it can be dynamically booked"
        },
        "title": {
          "type": "string",
          "description": "Title of the service in various locales."
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Capacity"
        },
        "preBufferTime": {
          "type": "string",
          "format": "int64",
          "title": "Pre appointment buffer time in seconds"
        },
        "postBufferTime": {
          "type": "string",
          "format": "int64",
          "title": "Post appointment buffer time in seconds"
        },
        "isDynamic": {
          "type": "boolean",
          "title": "in case of  link sharing  , we have to create dynamic service"
        },
        "lastId": {
          "type": "string",
          "title": "in case of update: the last service id will contain old service id"
        },
        "templateId": {
          "type": "string",
          "title": "service template id"
        },
        "dynamicLinkId": {
          "type": "string",
          "title": "dynamic link id"
        }
      }
    },
    "v1ServiceSearchData": {
      "type": "object",
      "properties": {
        "serviceId": {
          "type": "string"
        },
        "serviceTitle": {
          "type": "string"
        }
      }
    },
    "v1SingleSubmission": {
      "type": "object",
      "properties": {
        "formId": {
          "type": "string"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1UnitSubmissionValue"
          }
        }
      }
    },
    "v1StudentData": {
      "type": "object",
      "properties": {
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "guardian": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "guardianEmail": {
          "type": "string"
        },
        "guardianFirstName": {
          "type": "string"
        },
        "guardianLastName": {
          "type": "string"
        }
      }
    },
    "v1UnitSubmissionValue": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string"
        },
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesFormValue"
          }
        }
      }
    },
    "v1UpdateAppointmentByDataCodeResponse": {
      "type": "object",
      "properties": {
        "appointment": {
          "$ref": "#/definitions/v1Appointment"
        },
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo",
          "title": "internal"
        }
      }
    },
    "v1UpdateAppointmentNoteRequest": {
      "type": "object",
      "properties": {
        "setPrivate": {
          "type": "boolean"
        },
        "note": {
          "$ref": "#/definitions/v1AppointmentNote"
        },
        "updateMask": {
          "type": "string"
        }
      }
    },
    "v1UpdateConsumerRSVPByDataCodeResponse": {
      "type": "object",
      "properties": {
        "userInfo": {
          "$ref": "#/definitions/v1UserInfo"
        }
      }
    },
    "v1UpdateConsumerRSVPRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "consumerId": {
          "type": "string"
        },
        "rsvp": {
          "$ref": "#/definitions/typesRsvp"
        },
        "rsvpMessage": {
          "type": "string"
        },
        "originalRsvp": {
          "$ref": "#/definitions/typesRsvp",
          "title": "internal use"
        }
      }
    },
    "v1UpdateMeetingPermissionsRequest": {
      "type": "object",
      "properties": {
        "appointmentId": {
          "type": "string"
        },
        "inviteeCanModify": {
          "type": "boolean",
          "description": "InviteeCanModify represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can modify the booking or not."
        },
        "inviteeCanManageOtherInvitees": {
          "type": "boolean",
          "description": "InviteeCanManageOtherInvitees represent Meetings app permission handler for InvitedEmployee\nthat the invited employees in the booking can invite or remove some other invitees."
        },
        "viewGuestList": {
          "type": "boolean",
          "description": "SeeGuestList represent Meeting app permission for all users to view other users involved in appointment."
        }
      }
    },
    "v1UpdateRecurringAppointmentsResponse": {
      "type": "object",
      "properties": {
        "oldAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Appointment"
          }
        },
        "updatedAppointments": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentWithMessage"
          }
        }
      }
    },
    "v1UserInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1UserSearchData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string"
        }
      }
    },
    "v1App": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "invisible": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetProfessionByNameResponse": {
      "type": "object",
      "properties": {
        "profession": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Profession"
          }
        }
      }
    },
    "v1DataFill": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DataSuggestion": {
      "type": "object",
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceSuggestion"
          }
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1DefaultAlias": {
      "type": "object",
      "properties": {
        "singular": {
          "type": "string"
        },
        "plural": {
          "type": "string"
        }
      }
    },
    "v1Feature": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "v1ListProfessionResponse": {
      "type": "object",
      "properties": {
        "profession": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Profession"
          }
        }
      }
    },
    "v1Profession": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "setupData": {
          "$ref": "#/definitions/v1SetupData",
          "title": "This will be stored into db at the time of wizard"
        },
        "dataSuggestion": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataSuggestion"
          },
          "title": "below fields are used in UI only"
        },
        "dataFill": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DataFill"
          }
        },
        "navMenus": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "not used till now"
        },
        "wizardSteps": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "professionCategoryId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "distributionRatingNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionDesignation": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "defaultRoleSlugs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ProfessionResourceType": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "isIdentifiable": {
          "type": "boolean"
        }
      }
    },
    "v1ServiceSuggestion": {
      "type": "object",
      "properties": {
        "title": {
          "type": "string"
        },
        "category": {
          "type": "string"
        },
        "duration": {
          "type": "string",
          "format": "int64"
        },
        "capacity": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1SetupData": {
      "type": "object",
      "properties": {
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionResourceType"
          }
        },
        "departments": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "designations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ProfessionDesignation"
          }
        },
        "setupRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetupRole"
          }
        },
        "apps": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1App"
          }
        },
        "features": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Feature"
          }
        },
        "aliases": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/v1DefaultAlias"
          }
        }
      },
      "title": "These will be auto inserted into db"
    },
    "v1SetupModuleRole": {
      "type": "object",
      "properties": {
        "level": {
          "type": "string"
        },
        "moduleRoleNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1SetupRole": {
      "type": "object",
      "properties": {
        "roleName": {
          "type": "string"
        },
        "moduleRoles": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SetupModuleRole"
          }
        }
      }
    },
    "CustomStatusesUpdateCustomStatusBody": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string"
            },
            "isDefault": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "customStatusType": {
              "$ref": "#/definitions/v1CustomStatusType"
            }
          },
          "description": "CustomStatus represents new status-es defined as per requirements of business\nThese custom-status are used with appointments and classes..."
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the given CustomStatus object can be\nupdated."
        }
      },
      "title": "UpdateCustomStatusRequest contains the CustomStatus object and update_mask .\nThe update mask will be used to update a specific field in CustomStatus object"
    },
    "CustomStatusesUpdateCustomStatusDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchGetCustomStatusResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomStatus"
          },
          "title": "Companies contains the list of CustomStatus"
        }
      },
      "description": "BatchGetCompaniesResponse contains the list of companies given in the request object."
    },
    "v1CreateCustomStatusRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "description": "Parent contains the hierarchical information of the given CustomStatus like\ngroup."
        },
        "customStatus": {
          "$ref": "#/definitions/v1CustomStatus"
        }
      },
      "title": "CreateCustomStatusRequest is the request to create a new CustomStatus ,"
    },
    "v1CustomStatusType": {
      "type": "string",
      "enum": [
        "UNDEFINED",
        "ALL",
        "APPOINTMENT",
        "CLASS"
      ],
      "default": "UNDEFINED"
    },
    "v1ListCustomStatusResponse": {
      "type": "object",
      "properties": {
        "customStatus": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CustomStatus"
          },
          "title": "Nodes contains the list of CustomStatus"
        }
      },
      "title": "ListCustomStatusResponse"
    },
    "ResourceTypesUpdateResourceTypeBody": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "object",
          "properties": {
            "name": {
              "type": "string",
              "title": "name of the resources type"
            },
            "description": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "image": {
              "$ref": "#/definitions/typesGalleryItem"
            },
            "capacity": {
              "type": "string",
              "format": "int64",
              "title": "only resource type of non-identifiable type can have capacity"
            },
            "resourceTypesType": {
              "$ref": "#/definitions/v1ResourceTypesType"
            },
            "active": {
              "type": "boolean"
            },
            "internal": {
              "type": "boolean"
            },
            "displayOrder": {
              "type": "string",
              "format": "int64"
            },
            "hasOpenHours": {
              "type": "boolean"
            },
            "createdBy": {
              "type": "string",
              "title": "Created by and created on"
            },
            "createdOn": {
              "type": "string",
              "format": "date-time"
            },
            "updatedBy": {
              "type": "string",
              "title": "Updated by and updated on"
            },
            "updatedOn": {
              "type": "string",
              "format": "date-time"
            },
            "templateId": {
              "type": "string",
              "title": "for company-level resource-type template-id will be empty\nfor location-level resource-type template-id is compulsory"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the user Profile object can be updated.\nList of fields which can be updated are  :\nName, Description, Metadata"
        }
      }
    },
    "ResourceTypesUpdateResourceTypeDisplayOrderBody": {
      "type": "object",
      "properties": {
        "displayOrder": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "title": "for internal use"
        },
        "oldOrder": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1BatchCreateResourceTypeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1BatchCreateResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1BatchGetResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1CreateResourceTypeRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "resourceType": {
          "$ref": "#/definitions/v1ResourceType"
        }
      }
    },
    "v1GetResourceTypeCountResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1ListResourceTypeResponse": {
      "type": "object",
      "properties": {
        "resourceType": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ResourceType"
          }
        }
      }
    },
    "v1ResourceTypeFilterInput": {
      "type": "object",
      "properties": {
        "resourceTypesType": {
          "$ref": "#/definitions/v1ResourceTypesType"
        }
      }
    },
    "v1ResourceTypesType": {
      "type": "string",
      "enum": [
        "IDENTIFIABLE",
        "NON_IDENTIFIABLE"
      ],
      "default": "IDENTIFIABLE"
    },
    "CalendarsChangeCalendarMeetingLinkSettingsBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "createMeetingLink": {
          "type": "boolean"
        }
      }
    },
    "CalendarsToggleCalendarSettingsBody": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "createMeetingLink": {
          "$ref": "#/definitions/typesBooleanFilter"
        },
        "justBlockTime": {
          "$ref": "#/definitions/typesBooleanFilter"
        }
      }
    },
    "CalendarsUpdateCalendarSettingsBody": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        },
        "blockedEventStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EventStatus"
          }
        },
        "createMeetingLink": {
          "type": "boolean"
        },
        "justBlockTime": {
          "type": "boolean",
          "description": "JustBlockTime means when enabled, do not add any participants in the events that are\ncreated in external calendars."
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "calendarv1Event": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "entityEventId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendarId": {
          "type": "string"
        },
        "calendarEventId": {
          "type": "string"
        },
        "calendarConferenceId": {
          "type": "string"
        },
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        },
        "subject": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "location": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "attendees": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "organizer": {
          "type": "string"
        },
        "isCancelled": {
          "type": "boolean"
        },
        "status": {
          "$ref": "#/definitions/v1EventStatus"
        },
        "pushedToCalendar": {
          "type": "boolean"
        },
        "pulledFromCalendar": {
          "type": "boolean"
        },
        "userId": {
          "type": "string",
          "title": "event is corresponding to this user"
        },
        "recurringId": {
          "type": "string",
          "title": "only used in outlook"
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        },
        "isRecurring": {
          "type": "boolean"
        }
      }
    },
    "typesBooleanFilter": {
      "type": "string",
      "enum": [
        "ALL",
        "TRUE",
        "FALSE"
      ],
      "default": "ALL"
    },
    "v1BatchGetCalendarSettingsResponse": {
      "type": "object",
      "properties": {
        "settings": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarSettings"
          }
        }
      }
    },
    "v1Calendar": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "pushFutureEventsOnCalendar": {
          "type": "boolean"
        },
        "pullFutureEventsFromCalendar": {
          "type": "boolean"
        },
        "accountName": {
          "type": "string"
        },
        "integrationId": {
          "type": "string"
        },
        "twoWay": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "oneWay": {
          "type": "boolean"
        }
      }
    },
    "v1CalendarSettings": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        },
        "blockedEventStatuses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1EventStatus"
          }
        },
        "createMeetingLink": {
          "type": "boolean"
        },
        "justBlockTime": {
          "type": "boolean",
          "description": "JustBlockTime means when enabled, do not add any participants in the events that are\ncreated in external calendars."
        },
        "isReminderOn": {
          "type": "boolean"
        },
        "reminderMinutesBeforeStart": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1CalendarsList": {
      "type": "object",
      "properties": {
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Calendar"
          }
        }
      }
    },
    "v1ConferenceData": {
      "type": "object",
      "properties": {
        "meetingType": {
          "$ref": "#/definitions/typesIntegrationType"
        },
        "iconUrl": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1CreateEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1EventStatus": {
      "type": "string",
      "enum": [
        "NeedAction",
        "Accepted",
        "Declined",
        "Tentative",
        "Delegated"
      ],
      "default": "NeedAction"
    },
    "v1GetCalendarTypeResponse": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1ImprovedCreateEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1ImprovedListEventsResponse": {
      "type": "object",
      "properties": {
        "events": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "nextSyncToken": {
          "type": "string"
        }
      }
    },
    "v1ImprovedUpsertEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "v1ListEventsResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        }
      }
    },
    "v1ListInstanceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/calendarv1Event"
          }
        },
        "nextPageToken": {
          "type": "string"
        },
        "isRecurring": {
          "type": "boolean"
        }
      }
    },
    "v1UpsertEventResponse": {
      "type": "object",
      "properties": {
        "conferenceData": {
          "$ref": "#/definitions/v1ConferenceData"
        }
      }
    },
    "ConsumerRestrictionsUpsertConsumerRestrictionBody": {
      "type": "object",
      "properties": {
        "consumerRestriction": {
          "type": "object",
          "properties": {
            "bookingType": {
              "$ref": "#/definitions/v1ConsumerBookingType",
              "title": "ConsumerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ConsumerLimitRestrictions"
              },
              "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "consumerOverridden": {
              "type": "boolean",
              "title": "consumer overridden read-only value"
            },
            "consumerRestrictionLevel": {
              "$ref": "#/definitions/v1ConsumerRestrictionLevel"
            }
          }
        },
        "updateMask": {
          "type": "string"
        },
        "parent": {
          "type": "string"
        },
        "title": {
          "type": "string"
        }
      }
    },
    "ConsumerRestrictionsUpsertConsumerRestrictionsGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "consumerRestriction": {
          "type": "object",
          "properties": {
            "bookingType": {
              "$ref": "#/definitions/v1ConsumerBookingType",
              "title": "ConsumerBookingType"
            },
            "limitRestrictions": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1ConsumerLimitRestrictions"
              },
              "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
            },
            "consumerOverridden": {
              "type": "boolean",
              "title": "consumer overridden read-only value"
            },
            "consumerRestrictionLevel": {
              "$ref": "#/definitions/v1ConsumerRestrictionLevel"
            }
          }
        }
      }
    },
    "typesDayOfWeek": {
      "type": "string",
      "enum": [
        "SUNDAY",
        "MONDAY",
        "TUESDAY",
        "WEDNESDAY",
        "THURSDAY",
        "FRIDAY",
        "SATURDAY"
      ],
      "default": "SUNDAY",
      "description": "Represents a day of week.\n\n - SUNDAY: The day-of-week of Sunday.\n - MONDAY: The day-of-week of Monday.\n - TUESDAY: The day-of-week of Tuesday.\n - WEDNESDAY: The day-of-week of Wednesday.\n - THURSDAY: The day-of-week of Thursday.\n - FRIDAY: The day-of-week of Friday.\n - SATURDAY: The day-of-week of Saturday."
    },
    "typesFrequency": {
      "type": "string",
      "enum": [
        "ONCE",
        "DAILY",
        "WEEKLY",
        "MONTHLY",
        "YEARLY",
        "FIXED",
        "HOURLY"
      ],
      "default": "ONCE",
      "title": "Frequency"
    },
    "typesFrequencyInfo": {
      "type": "object",
      "properties": {
        "startDay": {
          "$ref": "#/definitions/typesDayOfWeek"
        },
        "monthDate": {
          "type": "string",
          "format": "int64"
        },
        "startMonth": {
          "$ref": "#/definitions/typesMonths"
        }
      }
    },
    "typesLimitRestrictionType": {
      "type": "string",
      "enum": [
        "ALLOWED",
        "NOT_ALLOWED",
        "CUSTOM"
      ],
      "default": "ALLOWED",
      "title": "Type of restriction on a entity"
    },
    "typesMonths": {
      "type": "string",
      "enum": [
        "JANUARY",
        "FEBRUARY",
        "MARCH",
        "APRIL",
        "MAY",
        "JUNE",
        "JULY",
        "AUGUST",
        "SEPTEMBER",
        "OCTOBER",
        "NOVEMBER",
        "DECEMBER"
      ],
      "default": "JANUARY",
      "description": "Represents a month."
    },
    "v1BatchConsumerRestriction": {
      "type": "object",
      "properties": {
        "restriction": {
          "$ref": "#/definitions/v1ConsumerRestriction"
        },
        "parent": {
          "type": "string"
        }
      }
    },
    "v1BatchGetConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1BatchUpsertConsumerRestrictionRequest": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1BatchConsumerRestriction"
          }
        },
        "updateMask": {
          "type": "string"
        },
        "titles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1BatchUpsertConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1ConsumerBookingType": {
      "type": "string",
      "enum": [
        "Limited",
        "Unlimited",
        "Blocked"
      ],
      "default": "Limited"
    },
    "v1ConsumerLimitRestrictions": {
      "type": "object",
      "properties": {
        "type": {
          "$ref": "#/definitions/typesLimitRestrictionType",
          "title": "Type of limit to restrict the booking of a consumer"
        },
        "allowedBookingsInDuration": {
          "type": "integer",
          "format": "int32",
          "title": "No. of bookings that are allowed in a specific duration"
        },
        "frequency": {
          "$ref": "#/definitions/typesFrequency",
          "title": "Restriction will be applied for the following frequency"
        },
        "interval": {
          "$ref": "#/definitions/typesDateslot",
          "description": "optional (not present in UI)",
          "title": "Restriction will be applied b/w these days"
        },
        "frequencyInfo": {
          "$ref": "#/definitions/typesFrequencyInfo",
          "title": "Frequency Info"
        }
      },
      "title": "Services that are restricted for a consumer\nThis restriction can be override at per consumer level"
    },
    "v1ConsumerRestriction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "bookingType": {
          "$ref": "#/definitions/v1ConsumerBookingType",
          "title": "ConsumerBookingType"
        },
        "limitRestrictions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerLimitRestrictions"
          },
          "title": "Consumers who are restricted from performing this service\nonly apply if booking_type is Limited"
        },
        "consumerOverridden": {
          "type": "boolean",
          "title": "consumer overridden read-only value"
        },
        "consumerRestrictionLevel": {
          "$ref": "#/definitions/v1ConsumerRestrictionLevel"
        }
      }
    },
    "v1ConsumerRestrictionLevel": {
      "type": "string",
      "enum": [
        "Consumer",
        "Service",
        "Location"
      ],
      "default": "Consumer"
    },
    "v1ListConsumerRestrictionResponse": {
      "type": "object",
      "properties": {
        "consumerRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ConsumerRestriction"
          }
        }
      }
    },
    "v1CompositeBookingFlowCompanySetting": {
      "type": "object",
      "properties": {
        "companyInfo": {
          "$ref": "#/definitions/v1CompositeCompanyInfo"
        },
        "childLocationsInfo": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CompositeLocationInfo"
          }
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1CompositeBookingPortalSettings"
        }
      }
    },
    "v1CompositeBookingFlowLocationSetting": {
      "type": "object",
      "properties": {
        "locationInfo": {
          "$ref": "#/definitions/v1CompositeLocationInfo"
        },
        "bookingPortalSettings": {
          "$ref": "#/definitions/v1CompositeBookingPortalSettings"
        }
      }
    },
    "v1CompositeBookingPortalSettings": {
      "type": "object",
      "properties": {
        "customerInformation": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enableBookingPortal": {
          "type": "boolean"
        },
        "enableGuestLogin": {
          "type": "boolean"
        },
        "enabledLogins": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removeBranding": {
          "type": "boolean"
        },
        "defaultTab": {
          "type": "string"
        },
        "menuOrder": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "availableLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "customCss": {
          "type": "string"
        },
        "template": {
          "type": "string"
        },
        "backgroundImage": {
          "type": "string"
        },
        "social": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "logoUrl": {
          "type": "string"
        },
        "showHomeMenu": {
          "type": "boolean"
        },
        "showAppointmentTab": {
          "type": "boolean"
        }
      }
    },
    "v1CompositeCompanyInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "preferences": {
          "$ref": "#/definitions/v1CompositePreferences"
        }
      }
    },
    "v1CompositeLocationInfo": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/typesAddress"
        },
        "telephones": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gallery": {
          "$ref": "#/definitions/typesGallery"
        },
        "preferences": {
          "$ref": "#/definitions/v1CompositePreferences"
        }
      }
    },
    "v1CompositePreferences": {
      "type": "object",
      "properties": {
        "language": {
          "type": "string"
        }
      }
    },
    "v1CreateDynamicLinkRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent will be location Id"
        },
        "dynamicLink": {
          "$ref": "#/definitions/v1DynamicLink"
        }
      }
    },
    "v1DynamicLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "unique id"
        },
        "userId": {
          "type": "string",
          "title": "user id of user who creates user"
        },
        "guid": {
          "type": "string",
          "title": "guid is the dynamic id (link)"
        },
        "settings": {
          "$ref": "#/definitions/protobufAny",
          "title": "Settings is the setting of the app from which Dynamic link is called\ngenerally when we created dynamic link of staff then the staff id is compulsory\nor they can add additional filters like service id , timeslot , customer email"
        },
        "expireAt": {
          "type": "string",
          "format": "date-time",
          "title": "Expiry date of the url\nfor single use as well as multiuse for both we have  expire date"
        },
        "appId": {
          "type": "string",
          "title": "corresponding to which app link is created"
        },
        "bookingId": {
          "type": "string",
          "title": "After booking booking id will be stored"
        },
        "isSingleUse": {
          "type": "boolean",
          "title": "There are two types of links\non is single use and other is multiple use"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "meta data will store title , note etc"
        },
        "bookingUpdatedOn": {
          "type": "string",
          "format": "date-time",
          "title": "booking id after booking using the link"
        },
        "isExpired": {
          "type": "boolean",
          "title": "is link is used"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time",
          "title": "link created on"
        },
        "resourceId": {
          "type": "string",
          "title": "resource id"
        }
      }
    },
    "v1DynamicLinkNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position is the current position of the cursor in the location list eg :row\nnumber"
        },
        "node": {
          "$ref": "#/definitions/v1DynamicLink",
          "title": "Node is the actual dynamic object"
        }
      },
      "title": "LocationNode is the actual location object"
    },
    "v1ListDynamicLinkResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1DynamicLinkNode"
          },
          "description": "HasNext is used to indicate whether more edges exist following the set\n defined by the clients arguments. If the client is paginating with\n first/after, then the server must return true if further edges exist,\n otherwise false. If the client is paginating with last/before, then the\n client may return true if edges further from before exist, if it can do so\n efficiently, otherwise may return false.",
          "title": "Nodes contains the list of locations"
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        }
      },
      "title": "ListLocationResponse contains all the locations of a given parent"
    },
    "OpenHoursUpdateOpenHourRuleBody": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "object",
          "properties": {
            "resourceId": {
              "type": "string",
              "title": "Id of the resource"
            },
            "openHour": {
              "type": "array",
              "items": {
                "type": "object",
                "$ref": "#/definitions/v1OpenHour"
              },
              "title": "Specifies individual open hour"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              },
              "title": "Additional data for open hour"
            },
            "timezone": {
              "type": "string",
              "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
            },
            "openHourType": {
              "$ref": "#/definitions/v1OpenHourType"
            }
          },
          "title": "Represents the open hour rule"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "to contain start and until of rrule-set.\noptional (if empty delete from current time)"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "originalOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule",
          "title": "internal"
        },
        "deletedOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "OpenHoursUpdateOpenHourRuleMetadataBody": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional information/data"
        }
      },
      "title": "UpdateOpenHourRuleMetadataRequest updates metadata corresponding to rule_id\ncurrently exists corresponding to rule_id"
    },
    "OpenHoursUpdateSingleSlotBody": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "specifies the time slot of new updated slot"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids in new slots"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "bookable": {
          "type": "boolean",
          "title": "whether the resource can be booked or not"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "openHourRuleId": {
          "type": "string",
          "title": "OpenHourRuleId is the id of open hour rule to which this slot belongs"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "originalBuiltSlot": {
          "$ref": "#/definitions/v1OpenHourBuiltSlot",
          "title": "internal"
        }
      },
      "title": "To update a particular slot from all the slots"
    },
    "OpenHoursUpsertRecurrenceRuleBody": {
      "type": "object",
      "properties": {
        "recurrenceId": {
          "type": "string",
          "title": "open hour id"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "specifies the time slot of recurrence in a day"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids in new slots"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "bookable": {
          "type": "boolean",
          "title": "whether the resource can be booked or not"
        },
        "newRecurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rrule set containing : string{\"rrule\", \"rdate\", \"exrule\", \"exdate\"}\nmust be a valid rrule-set\nonly used for initial building of sessions during create or update"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "to contain start and until of rrule-set.\noptional (if empty delete from current time)"
        },
        "updateMask": {
          "type": "string",
          "description": "UpdateMask controls which fields of the Slot object can be updated."
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "deletedOpenHour": {
          "$ref": "#/definitions/v1OpenHour",
          "title": "internal use"
        },
        "originalOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      },
      "title": "To update the recurrence set"
    },
    "v1BatchGetOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      },
      "description": "BatchGetOpenHourResponse contains the list of open hour rules given in the \nrequest object."
    },
    "v1ChannelRestriction": {
      "type": "object",
      "properties": {
        "channelId": {
          "type": "string",
          "title": "ID of channel that is restricted for a specific resource"
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "duration of slots to be built"
        }
      },
      "title": "ChannelRestriction represents duration of slots allowed corresponding to channel"
    },
    "v1CheckOpenHourAvailabilityRequest": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "id can be staff or service"
        }
      }
    },
    "v1CheckOpenHourAvailabilityResponse": {
      "type": "object",
      "properties": {
        "availability": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "map for each ID with true if any future open hour slots available"
        }
      }
    },
    "v1CreateOpenHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given company like group"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids of the resource"
        },
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          },
          "title": "Specifies individual open hour(s)"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour rule"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "openHourType": {
          "$ref": "#/definitions/v1OpenHourType"
        },
        "skipBuildSlots": {
          "type": "boolean",
          "title": "can be used to skip building of slots here and build them in background\ndone for optimization of endpoint"
        }
      },
      "title": "CreateOpenHourRuleRequest is the request to create a new open hour rule ,"
    },
    "v1CreateOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal use"
        }
      }
    },
    "v1DeleteAndCreateOpenHourRulesRequest": {
      "type": "object",
      "properties": {
        "deleteRequest": {
          "$ref": "#/definitions/v1DeleteOpenHourRulesRequest"
        },
        "createRequest": {
          "$ref": "#/definitions/v1CreateOpenHourRuleRequest"
        }
      }
    },
    "v1DeleteAndCreateOpenHourRulesResponse": {
      "type": "object",
      "properties": {
        "openHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal"
        }
      }
    },
    "v1DeleteOpenHourRulesRequest": {
      "type": "object",
      "properties": {
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteType": {
          "$ref": "#/definitions/v1DeleteType"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "optional (if empty deleted from current time)"
        },
        "end": {
          "type": "string",
          "format": "date-time"
        },
        "openHourRuleIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recurrenceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "activity": {
          "type": "string"
        },
        "internalUse": {
          "$ref": "#/definitions/v1InternalUse",
          "title": "internal use"
        }
      }
    },
    "v1DeleteRelatedOpenHoursTimePeriod": {
      "type": "string",
      "enum": [
        "NoTime",
        "FutureTime"
      ],
      "default": "NoTime"
    },
    "v1DeleteRelatedOpenHoursType": {
      "type": "string",
      "enum": [
        "RelatedToNone",
        "RelatedToLocation",
        "RelatedToEmployee"
      ],
      "default": "RelatedToNone"
    },
    "v1DeleteType": {
      "type": "string",
      "enum": [
        "DATE_RANGE",
        "DAY",
        "DATE_AND_FOLLOWING",
        "FUTURE"
      ],
      "default": "DATE_RANGE"
    },
    "v1Filter": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot"
        },
        "services": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Services is the list of services that are required to be booked.\nServices are fetched using an 'OR' condition. For example,\nServices '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "employees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Employees is the list of employees that are required to be booked.\nEmployees are fetched using an 'OR' condition. For example,\nEmployees '1' and '2' are sent. Slots which can book either '1' or '2' will be returned\nBut if some value in HostEmployee is passed then all these Employees will work in 'AND'\ncondition along with the HostEmployee and all these Employees will be considered as\nthe other invitees in the booking."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources is the list of resources that are required to be booked.\nResources are fetched using an 'OR' condition. For example,\nresources '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Channels is the list of Channels that are required to be booked.\nChannels are fetched using an 'OR' condition. For example,\nChannels '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ResourceTypes is the list of resource types that are required to be booked.\nResourceTypes are fetched using an 'OR' condition. For example,\nresource types '1' and '2' are sent. Slots which can book either '1' or '2' will be returned"
        },
        "skipValidations": {
          "type": "boolean",
          "title": "skip validations"
        },
        "duration": {
          "type": "string",
          "format": "int64",
          "title": "duration in seconds if provided then the slot will only returned if their duration matches"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity is the min allowed capacity for the slot"
        },
        "lastRequestTime": {
          "type": "string",
          "format": "date-time",
          "description": "LastRequestTime is used to provide an added buffer to some time based settings, check. When\nthe difference between allowed time and current time is less than 2 minutes."
        },
        "exactlyInBetween": {
          "type": "boolean",
          "title": "exactly in between"
        },
        "hostEmployee": {
          "type": "string",
          "description": "HostEmployee will represent the host of the meeting and when this is passed, and all the other\nEmployees will be considered as the other invitees (participants) of the meeting."
        },
        "consumerId": {
          "type": "string",
          "title": "ConsumerId is used for getting the consumer restrictions and filtering the restrictions at availability level"
        },
        "existingAppointmentId": {
          "type": "string",
          "title": "ExistingAppointmentId"
        },
        "existingAppointmentIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "ExistingAppointmentIds - Use this to handle Multiple Existing Id Case"
        },
        "serviceTemplateMatchingRules": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "timezone": {
          "type": "string"
        },
        "skipLookBusy": {
          "type": "boolean"
        }
      },
      "description": "Parent and time_slot are required, while all rest are optional",
      "title": "Filter is the critieria for filtering available slots.\nEach root level field is applied in an 'AND' condition.\nFor example, Services is ['1'] and Employees ['5'], it returns slots which are performed\nby Employee '5' and of Service '1'"
    },
    "v1GetNextAvailabilityResponse": {
      "type": "object",
      "properties": {
        "nextAvailability": {
          "type": "object",
          "additionalProperties": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "v1GetOpenHourSlotsTrackerReportResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourSlotsTrackerReportNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPaginationInfo"
        },
        "total": {
          "type": "string",
          "format": "int64"
        },
        "downloadLimit": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "v1InternalUse": {
      "type": "object",
      "properties": {
        "futureOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        },
        "deletedOpenHourIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedOpenHourExceptionIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deletedOpenHourExceptionParentIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "newAndOldOpenHourIds": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ListFutureOpenHourRulesResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1ListOpenHourBuildSlotsForAvailabilityResponse": {
      "type": "object",
      "properties": {
        "openHourBuiltSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourBuiltSlot"
          }
        }
      }
    },
    "v1ListOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRuleNode"
          },
          "description": "Nodes contains the list of open hour rule."
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "PageInfo returns the information about pagination."
        }
      },
      "title": "ListOpenHourRuleResponse contains the list of open hour rule"
    },
    "v1ListOpenHourRulesForAvailabilityResponse": {
      "type": "object",
      "properties": {
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1ListOpenHourRulesForCalendarResponse": {
      "type": "object",
      "properties": {
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1OpenHour": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the open hour rule"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Timeslot of recurrence in a day"
        },
        "recurrenceSet": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "rrule set containing : [\"RRULE\", \"RDATE\", \"EXRULE\", \"EXDATE\"]\nmust be a valid rrule-set\nonly used for initial building of sessions during create or update"
        },
        "start": {
          "type": "string",
          "format": "date-time",
          "title": "Start of the OpenHour"
        },
        "until": {
          "type": "string",
          "format": "date-time",
          "title": "End of the OpenHour"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids linked with open-hour"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "builtSlots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourBuiltSlot"
          },
          "title": "Slots built using above recurrence set"
        },
        "builtTill": {
          "type": "string",
          "format": "date-time",
          "title": "BuiltTill represents the time until which open hour rule has been built in DB\nIt is used to extends built slots for open hours"
        },
        "exceptions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourException"
          },
          "title": "will be added when single slot update/delete is called and rule is not changed"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        }
      },
      "title": "OpenHour represents recurrence rule to built slots corresponding to Open Hour Rules"
    },
    "v1OpenHourBuiltSlot": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "recurrenceId": {
          "type": "string",
          "title": "RecurrenceId is the id of open-hour-id from which slot is built"
        },
        "slot": {
          "$ref": "#/definitions/typesTimeslot",
          "title": "Slot is the timeslot of recurrence in a day"
        },
        "bookable": {
          "type": "boolean",
          "title": "Tells whether a resource can be booked or not"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "service-ids linked with open-hour-built-slot"
        },
        "serviceRestriction": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ServiceRestriction"
          },
          "title": "ServiceRestrictions for this open hour rule"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "capacity"
        },
        "locationId": {
          "type": "string",
          "description": "parent",
          "title": "extra fields for query"
        },
        "resourceId": {
          "type": "string"
        },
        "exceptionDeleted": {
          "type": "boolean"
        },
        "specialCase": {
          "type": "boolean",
          "title": "special case - when built slot start_time > until of open hour"
        }
      },
      "title": "OpenHourBuiltSlot represents the each single slot(timing + bookable-status) built from recurrence rule in open hour rule"
    },
    "v1OpenHourException": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "date": {
          "type": "string",
          "format": "date-time"
        },
        "builtSlot": {
          "$ref": "#/definitions/v1OpenHourBuiltSlot"
        },
        "exceptionDeleted": {
          "type": "boolean",
          "description": "else than chaku's is-deleted(not used), to avoid not-deleted default condition in list..."
        }
      }
    },
    "v1OpenHourLocationStaffFilter": {
      "type": "object",
      "properties": {
        "locationId": {
          "type": "string"
        },
        "employeeIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenHourRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Id of the open hour rule"
        },
        "resourceId": {
          "type": "string",
          "title": "Id of the resource"
        },
        "openHour": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          },
          "title": "Specifies individual open hour"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "openHourType": {
          "$ref": "#/definitions/v1OpenHourType"
        }
      },
      "title": "Represents the open hour rule"
    },
    "v1OpenHourRuleNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string",
          "title": "Position in the list of open hour rule"
        },
        "node": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      },
      "title": "Represents data corresponding to a position in the list of open hour rule"
    },
    "v1OpenHourSlotsTrackerReportData": {
      "type": "object",
      "properties": {
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "availabilityDate": {
          "type": "string",
          "format": "date-time"
        },
        "numberOfSlots": {
          "type": "integer",
          "format": "int32"
        },
        "employeeFirstName": {
          "type": "string"
        },
        "employeeLastName": {
          "type": "string"
        },
        "employeeEmail": {
          "type": "string"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "serviceTitles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1OpenHourSlotsTrackerReportNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1OpenHourSlotsTrackerReportData"
        }
      }
    },
    "v1OpenHourType": {
      "type": "string",
      "enum": [
        "UNKNOWN",
        "WEEKLY",
        "CUSTOM"
      ],
      "default": "UNKNOWN"
    },
    "v1OverrideOpenHourRuleRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent contains the hierarchical information of the given company like group"
        },
        "resourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Ids of the resource"
        },
        "openHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          }
        },
        "customOpenHours": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHour"
          }
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional data for open hour rule"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone is the IANA timezone string. For example, 'America/Los_Angeles'"
        },
        "serviceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "deleteExistingRules": {
          "type": "boolean"
        },
        "activity": {
          "type": "string",
          "title": "to be used in displaying details for activity log(not to be stored)"
        },
        "deletedOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          },
          "title": "internal use"
        },
        "deletedCustomOpenHourRule": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1OpenHourRule"
          }
        }
      }
    },
    "v1OverrideOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        },
        "customOpenHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      }
    },
    "v1ServiceRestriction": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "just for chaku, no other significance"
        },
        "serviceId": {
          "type": "string",
          "title": "ID of service that is restricted for a specific resource"
        },
        "channels": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1ChannelRestriction"
          },
          "title": "ChannelRestriction represents duration of slots allowed corresponding to channel"
        }
      },
      "title": "ServiceRestriction represent group of channel restrictions: restriction on slot duration of service corresponding to a channel"
    },
    "v1UpdateOpenHourRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        }
      }
    },
    "v1UpsertRecurrenceRuleResponse": {
      "type": "object",
      "properties": {
        "openHourRule": {
          "$ref": "#/definitions/v1OpenHourRule"
        },
        "newOpenHour": {
          "$ref": "#/definitions/v1OpenHour",
          "title": "internal"
        }
      }
    },
    "v1ListAdminSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListAdminSlotsRequest"
        }
      }
    },
    "v1ListAdminSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListDatesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "timezone": {
          "type": "string",
          "title": "Timezone of the ListDateRequest (Min Length : 1)"
        }
      }
    },
    "v1ListDatesResponse": {
      "type": "object",
      "properties": {
        "available": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          },
          "title": "Available contains dates as key and true/false as values, true if available"
        },
        "errorMessage": {
          "type": "string"
        },
        "datesStatus": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "DatesStatus contains dates as key and type of slot(available/booked) as values"
        }
      }
    },
    "v1ListDynamicSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListDynamicSlotsRequest"
        },
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/typesTimeslot"
          }
        },
        "isDynamic": {
          "type": "boolean"
        }
      }
    },
    "v1ListDynamicSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Slot"
          },
          "title": "Slots contains time slots for resources"
        }
      }
    },
    "v1ListServicesOrEmployeesRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filter for ListDateRequest"
        },
        "listEmployees": {
          "type": "boolean",
          "title": "default behaviour of the endpoint is to return available services\nand if employees are required set list_employees field true"
        }
      }
    },
    "v1ListServicesOrEmployeesResponse": {
      "type": "object",
      "properties": {
        "availableIds": {
          "type": "object",
          "additionalProperties": {
            "type": "boolean"
          }
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ListSlotsRequest": {
      "type": "object",
      "properties": {
        "filter": {
          "$ref": "#/definitions/v1Filter",
          "title": "Filters for ListSlotsRequest"
        }
      }
    },
    "v1ListSlotsResponse": {
      "type": "object",
      "properties": {
        "slots": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotWrapper"
          },
          "title": "Slots contains time slots for resources"
        },
        "slotRules": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1SlotRule"
          },
          "title": "deprecated"
        },
        "errorMessage": {
          "type": "string"
        }
      }
    },
    "v1ReasonOfUnavailability": {
      "type": "string",
      "enum": [
        "None",
        "EmployeeUnavailable",
        "ResourceUnavailable",
        "ResourceTypeUnavailable",
        "ServiceUnavailable"
      ],
      "default": "None"
    },
    "v1Slot": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "Parent is a fully qualified string that contains information about the\nowner in hierarchical manner\nParent is usually location. Not sure what it will be"
        },
        "timeSlot": {
          "$ref": "#/definitions/typesTimeslot",
          "description": "TimeSlot is the time of the slot."
        },
        "service": {
          "type": "string",
          "description": "Service is the id of the service."
        },
        "employee": {
          "type": "string",
          "description": "Employee is the id of the employee."
        },
        "channel": {
          "type": "string",
          "description": "Channel is the id of the channel."
        },
        "resources": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resources are the ids of the resources that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "Resource types are the ids of the resource types that are required for this slot\n(either resource is to be used or resource_type is to be used)"
        },
        "capacity": {
          "type": "string",
          "format": "int64",
          "title": "Total capacity of the slot"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "title": "slot metadata"
        },
        "otherEmployees": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "OtherEmployees of the meeting"
        },
        "maxCapacity": {
          "type": "string",
          "format": "int64",
          "title": "MaxCapacity of the slot"
        }
      },
      "title": "Slot only contains corresponding id's of each item only"
    },
    "v1SlotRule": {
      "type": "object",
      "properties": {
        "slot": {
          "$ref": "#/definitions/v1Slot",
          "description": "Slot contains time slots for resources."
        },
        "startTime": {
          "type": "string",
          "format": "date-time",
          "description": "StartTime of the slot."
        },
        "endTime": {
          "type": "string",
          "format": "date-time",
          "description": "Endtime of slot."
        },
        "durations": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Duration of slot."
        }
      },
      "description": "SlotRule returns the slots available as a rule.\nSlot is repeated from StartTime to EndTime with the given Durations from StartTime.\nFor example, StartTime is 9:00 AM PST, EndTime is 5:00 PM PST. and a Duration is 30 min. Slot is available\nfrom 9:00 AM PST to 9:30 AM PST, 9:30 AM PST to 10:00 AM PST and so on until 4:30 PM PST to 5:00 PM PST.\nsimilarly for each duration in the duration-slice."
    },
    "v1SlotType": {
      "type": "string",
      "enum": [
        "Available",
        "AvailableAppointment",
        "BookedAppointment",
        "BlockedHours",
        "NonOpenHours",
        "LeasedAppointment"
      ],
      "default": "Available",
      "title": "- NonOpenHours: not handled\n - LeasedAppointment: Partial availability - not considered"
    },
    "v1SlotWrapper": {
      "type": "object",
      "properties": {
        "slotType": {
          "$ref": "#/definitions/v1SlotType"
        },
        "slot": {
          "$ref": "#/definitions/v1Slot"
        },
        "reason": {
          "$ref": "#/definitions/v1ReasonOfUnavailability"
        }
      }
    },
    "AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowGroupSettingsBody": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "appointmentBookingFlowSetting": {
          "type": "object",
          "properties": {
            "allowBookingFromBookingPortal": {
              "type": "boolean"
            },
            "allowMultipleItemsBooking": {
              "type": "boolean"
            },
            "allowRecurringBookingAdmin": {
              "type": "boolean"
            },
            "allowRecurringBookingCustomer": {
              "type": "boolean"
            },
            "allowQuantityBooking": {
              "type": "boolean"
            },
            "maxQuantityPerBookingPerCustomer": {
              "type": "string",
              "format": "int64"
            },
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "enableTierBasedStaffPrioritization": {
              "type": "boolean"
            },
            "tierEmployeeAllocation": {
              "$ref": "#/definitions/v1EmployeeTierAllocation"
            },
            "staffPrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
            },
            "resourcePrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Criteria of selecting a resource in booking"
            },
            "strikeOutBlockTime": {
              "type": "boolean"
            },
            "strikeOutBookedTime": {
              "type": "boolean"
            },
            "strikeOutPercentage": {
              "type": "number",
              "format": "double"
            },
            "showCart": {
              "type": "boolean"
            },
            "showPolicyInline": {
              "type": "boolean"
            },
            "calendarStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "fixedOrCompactSlotsGeneration": {
              "type": "boolean",
              "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
            },
            "allCustomersInformationNeeded": {
              "type": "boolean"
            },
            "whoseInfoNeeded": {
              "$ref": "#/definitions/v1WhoseInformationNeeded"
            },
            "sendNotificationToSecondaryCustomers": {
              "type": "boolean"
            },
            "allCustomersIntakeFormNeeded": {
              "type": "boolean"
            },
            "teachingFlow": {
              "$ref": "#/definitions/v1TeachingFlow"
            },
            "doNotSendBookingNotificationToAdmin": {
              "type": "boolean"
            },
            "intakeFormMandatoryInAdminSide": {
              "type": "boolean"
            },
            "doNotAllowOverlappingBookingForCustomer": {
              "type": "boolean"
            },
            "doNotAllowAdminToBookIfResourceNotAvailable": {
              "type": "boolean"
            },
            "doNotAllowBookingIfOpenHourNotAvailable": {
              "type": "boolean",
              "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
            },
            "blockHourApprovalRequired": {
              "type": "boolean",
              "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
            },
            "preferSameStaffOnReschedule": {
              "type": "boolean",
              "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
            }
          }
        }
      }
    },
    "AppointmentBookingFlowSettingsUpsertAppointmentBookingFlowSettingBody": {
      "type": "object",
      "properties": {
        "appointmentBookingFlowSetting": {
          "type": "object",
          "properties": {
            "allowBookingFromBookingPortal": {
              "type": "boolean"
            },
            "allowMultipleItemsBooking": {
              "type": "boolean"
            },
            "allowRecurringBookingAdmin": {
              "type": "boolean"
            },
            "allowRecurringBookingCustomer": {
              "type": "boolean"
            },
            "allowQuantityBooking": {
              "type": "boolean"
            },
            "maxQuantityPerBookingPerCustomer": {
              "type": "string",
              "format": "int64"
            },
            "uiSettings": {
              "type": "string"
            },
            "metadata": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            },
            "enableTierBasedStaffPrioritization": {
              "type": "boolean"
            },
            "tierEmployeeAllocation": {
              "$ref": "#/definitions/v1EmployeeTierAllocation"
            },
            "staffPrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
            },
            "resourcePrioritization": {
              "$ref": "#/definitions/v1Prioritization",
              "title": "Criteria of selecting a resource in booking"
            },
            "strikeOutBlockTime": {
              "type": "boolean"
            },
            "strikeOutBookedTime": {
              "type": "boolean"
            },
            "strikeOutPercentage": {
              "type": "number",
              "format": "double"
            },
            "showCart": {
              "type": "boolean"
            },
            "showPolicyInline": {
              "type": "boolean"
            },
            "calendarStartDate": {
              "type": "string",
              "format": "date-time"
            },
            "fixedOrCompactSlotsGeneration": {
              "type": "boolean",
              "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
            },
            "allCustomersInformationNeeded": {
              "type": "boolean"
            },
            "whoseInfoNeeded": {
              "$ref": "#/definitions/v1WhoseInformationNeeded"
            },
            "sendNotificationToSecondaryCustomers": {
              "type": "boolean"
            },
            "allCustomersIntakeFormNeeded": {
              "type": "boolean"
            },
            "teachingFlow": {
              "$ref": "#/definitions/v1TeachingFlow"
            },
            "doNotSendBookingNotificationToAdmin": {
              "type": "boolean"
            },
            "intakeFormMandatoryInAdminSide": {
              "type": "boolean"
            },
            "doNotAllowOverlappingBookingForCustomer": {
              "type": "boolean"
            },
            "doNotAllowAdminToBookIfResourceNotAvailable": {
              "type": "boolean"
            },
            "doNotAllowBookingIfOpenHourNotAvailable": {
              "type": "boolean",
              "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
            },
            "blockHourApprovalRequired": {
              "type": "boolean",
              "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
            },
            "preferSameStaffOnReschedule": {
              "type": "boolean",
              "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
            }
          }
        },
        "updateMask": {
          "type": "string",
          "title": "UpdateMask controls which fields of the given appointment booking flow setting\nobject that can be updated.\nList of fields which can be updated are  :\nbooking rules, payment settings, tax setting, notification setting,\navailability interval"
        }
      },
      "title": "UpsertAppointmentBookingFlowSettingRequest contains the appointment booking flow setting object\nand the update mask\nThe update mask will be used to update a specific field in appointment booking flow setting object"
    },
    "v1AppointmentBookingFlowSetting": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "allowBookingFromBookingPortal": {
          "type": "boolean"
        },
        "allowMultipleItemsBooking": {
          "type": "boolean"
        },
        "allowRecurringBookingAdmin": {
          "type": "boolean"
        },
        "allowRecurringBookingCustomer": {
          "type": "boolean"
        },
        "allowQuantityBooking": {
          "type": "boolean"
        },
        "maxQuantityPerBookingPerCustomer": {
          "type": "string",
          "format": "int64"
        },
        "uiSettings": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "enableTierBasedStaffPrioritization": {
          "type": "boolean"
        },
        "tierEmployeeAllocation": {
          "$ref": "#/definitions/v1EmployeeTierAllocation"
        },
        "staffPrioritization": {
          "$ref": "#/definitions/v1Prioritization",
          "title": "Unspecified prioritization means prioritization not set\nCriteria of selecting a staff for a service"
        },
        "resourcePrioritization": {
          "$ref": "#/definitions/v1Prioritization",
          "title": "Criteria of selecting a resource in booking"
        },
        "strikeOutBlockTime": {
          "type": "boolean"
        },
        "strikeOutBookedTime": {
          "type": "boolean"
        },
        "strikeOutPercentage": {
          "type": "number",
          "format": "double"
        },
        "showCart": {
          "type": "boolean"
        },
        "showPolicyInline": {
          "type": "boolean"
        },
        "calendarStartDate": {
          "type": "string",
          "format": "date-time"
        },
        "fixedOrCompactSlotsGeneration": {
          "type": "boolean",
          "title": "FixedOrCompactSlotsGeneration is opposite of Optimize slot generation\n* true means fixed or non-optimize slot generation or appointy nine flow \n* false means compact or optimize slot generations or new flow"
        },
        "allCustomersInformationNeeded": {
          "type": "boolean"
        },
        "whoseInfoNeeded": {
          "$ref": "#/definitions/v1WhoseInformationNeeded"
        },
        "sendNotificationToSecondaryCustomers": {
          "type": "boolean"
        },
        "allCustomersIntakeFormNeeded": {
          "type": "boolean"
        },
        "teachingFlow": {
          "$ref": "#/definitions/v1TeachingFlow"
        },
        "doNotSendBookingNotificationToAdmin": {
          "type": "boolean"
        },
        "intakeFormMandatoryInAdminSide": {
          "type": "boolean"
        },
        "doNotAllowOverlappingBookingForCustomer": {
          "type": "boolean"
        },
        "doNotAllowAdminToBookIfResourceNotAvailable": {
          "type": "boolean"
        },
        "doNotAllowBookingIfOpenHourNotAvailable": {
          "type": "boolean",
          "description": "DoNotAllowBookingIfOpenHourNotAvailable will return error for bookings from admin side if error not available."
        },
        "blockHourApprovalRequired": {
          "type": "boolean",
          "title": "BlockHourApprovalRequired if set to true then for all roles who have a checkBlockHourApproval right will need\napproval from admin for block-hours to take effect in bookings"
        },
        "preferSameStaffOnReschedule": {
          "type": "boolean",
          "title": "PreferSameStaffOnReschedule: if set, prioritize same staff assignment(if available) whenever appointment is reschedule"
        }
      }
    },
    "v1BatchGetAppointmentBookingFlowSettingResponse": {
      "type": "object",
      "properties": {
        "appointmentBookingFlowSetting": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AppointmentBookingFlowSetting"
          }
        }
      }
    },
    "v1EmployeeTierAllocation": {
      "type": "string",
      "enum": [
        "LOCATION_BASED_ALLOCATION",
        "SERVICE_BASED_ALLOCATION"
      ],
      "default": "LOCATION_BASED_ALLOCATION"
    },
    "v1Prioritization": {
      "type": "string",
      "enum": [
        "UNSPECIFIED",
        "MAX_OCCUPIED_TIME",
        "MAX_OCCUPIED_APPOINTMENT",
        "LEAST_OCCUPIED_TIME",
        "LEAST_OCCUPIED_APPOINTMENT",
        "DISPLAY_ORDER"
      ],
      "default": "UNSPECIFIED",
      "description": "Parameters over which a resource is selected for a particular booking, whether\nit is random or is selected to the resource that is maximum occupied or least\noccupied or has maximum or least occupied time."
    },
    "v1TeachingFlow": {
      "type": "string",
      "enum": [
        "Normal",
        "PodTeaching",
        "TeamTeaching"
      ],
      "default": "Normal"
    },
    "v1WhoseInformationNeeded": {
      "type": "string",
      "enum": [
        "AllCustomers",
        "OnlyPrimaryCustomer"
      ],
      "default": "AllCustomers"
    },
    "v1CalendarSyncStatusOfEmployee": {
      "type": "object",
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "oneWaySync": {
          "type": "boolean"
        },
        "twoWaySync": {
          "type": "boolean"
        }
      }
    },
    "v1EmployeeSyncedCalendar": {
      "type": "object",
      "properties": {
        "calendarName": {
          "type": "string"
        },
        "integratedAccountName": {
          "type": "string"
        },
        "oneWaySync": {
          "type": "boolean"
        },
        "twoWaySync": {
          "type": "boolean"
        },
        "integrationType": {
          "$ref": "#/definitions/typesIntegrationType"
        }
      }
    },
    "v1FetchCalendarSyncStatusOfEmployeesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1CalendarSyncStatusOfEmployee"
          }
        }
      }
    },
    "v1FetchEmployeeSyncedCalendarsResponse": {
      "type": "object",
      "properties": {
        "calendars": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1EmployeeSyncedCalendar"
          }
        }
      }
    }
  }
}
