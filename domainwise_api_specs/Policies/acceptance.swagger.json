{
  "swagger": "2.0",
  "info": {
    "title": "acceptance/pb/acceptance.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Acceptances"
    },
    {
      "name": "ParentService"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/v1/acceptance": {
      "get": {
        "operationId": "Acceptances_ListAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAcceptanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "signerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask defines the object properties which needs to be returned as output.\nIf passed empty than all properties are returned",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      },
      "post": {
        "summary": "Create acceptance when a signer accepts a policy",
        "operationId": "Acceptances_CreateAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Acceptance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAcceptanceRequest"
            }
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    },
    "/v1/acceptance/check": {
      "get": {
        "summary": "ListUnacceptedPolicies lists all the policies linked to the provided sources that are not\naccepted by the user (signer)",
        "operationId": "Acceptances_ListUnacceptedPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUnacceptedPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "signerId",
            "description": "Signer contains information of the signer.\n\nempty in case of guest login",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "company id in parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "description": "source_ids are the ids of the sources attached to any policy.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    }
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string",
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics."
        }
      },
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }"
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "v1Acceptance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the acceptance."
        },
        "policyId": {
          "type": "string",
          "title": "PolicyId is the id of the policy being accepted. (required)"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Version is the version of the policy that was accepted. (required)"
        },
        "signerData": {
          "$ref": "#/definitions/v1SignerData",
          "title": "SignerData holds data of the person accepting this policy. (required)"
        },
        "acceptedDate": {
          "type": "string",
          "format": "date-time",
          "description": "AcceptedDate indicates the time at which the user accepted the policy."
        },
        "issuerName": {
          "type": "string",
          "description": "IssuerName indicates the name of the entity/person that issued the policy."
        },
        "place": {
          "type": "string",
          "description": "Place represents the place at which this policy was signed."
        },
        "sourceId": {
          "type": "string",
          "title": "source for which policy is applied"
        },
        "itemId": {
          "type": "string",
          "title": "source item id for which policy is applied and source is utilised"
        }
      },
      "title": "Acceptance represents the action of an individual accepting a policy"
    },
    "v1AcceptanceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Acceptance"
        }
      }
    },
    "v1AcceptancePolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "contentUrl": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "oneTimeAcceptance": {
          "type": "boolean"
        },
        "policyType": {
          "type": "string"
        }
      }
    },
    "v1AcceptanceRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateAcceptanceResponse": {
      "type": "object",
      "properties": {
        "acceptances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Acceptance"
          }
        }
      }
    },
    "v1CreateAcceptanceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent: company_id"
        },
        "acceptance": {
          "$ref": "#/definitions/v1Acceptance",
          "title": "acceptance to be added"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "v1ListAcceptanceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptanceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "PageInfo contains the information about of the current page."
        }
      }
    },
    "v1ListUnacceptedPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptancePolicy"
          }
        }
      }
    },
    "v1SignerData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique id of the signer"
        },
        "firstName": {
          "type": "string",
          "title": "Name of the signer"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "title": "Email of the signer"
        }
      },
      "description": "SignerData holds information about the person/entity accepting the contract."
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    }
  }
}
