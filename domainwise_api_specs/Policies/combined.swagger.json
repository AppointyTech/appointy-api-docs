{
  "openapi": "3.0.0",
  "info": {
    "title": "Policies",
    "version": "1.0.0"
  },
  "paths": {
    "/v1/acceptance": {
      "get": {
        "operationId": "Acceptances_ListAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListAcceptanceResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "policyId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "signerId",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "first",
            "description": "First specifies the number of rows that are to be returned starting after\nthe the cursor (value of after) (required if last is 0 and before is\nempty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "after",
            "description": "After takes any value as cursor to get the data after that point. Data\nshould be sorted on type of value specified for After For Ex. id, datetime,\nname...\n(required if last is 0 and before is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "last",
            "description": "Last specifies the number of rows that are to be returned ending before the\nthe cursor (value of before) (required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "before",
            "description": "Before takes any value as cursor to get the data before that point. Data\nshould be sorted on type of value specified for Before For Ex. id,\ndatetime, name...\n(required if first is 0 and after is empty).",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "viewMask",
            "description": "ViewMask defines the object properties which needs to be returned as output.\nIf passed empty than all properties are returned",
            "in": "query",
            "required": false,
            "type": "string"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      },
      "post": {
        "summary": "Create acceptance when a signer accepts a policy",
        "operationId": "Acceptances_CreateAcceptance",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Acceptance"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreateAcceptanceRequest"
            }
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    },
    "/v1/acceptance/check": {
      "get": {
        "summary": "ListUnacceptedPolicies lists all the policies linked to the provided sources that are not\naccepted by the user (signer)",
        "operationId": "Acceptances_ListUnacceptedPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListUnacceptedPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "signerId",
            "description": "Signer contains information of the signer.\n\nempty in case of guest login",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "parent",
            "description": "company id in parent",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "sourceIds",
            "description": "source_ids are the ids of the sources attached to any policy.",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          }
        ],
        "tags": [
          "Acceptances"
        ]
      }
    },
    "/v1/policies": {
      "post": {
        "summary": "Adds a Policy with a single active policy version",
        "operationId": "Policies_CreatePolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/change/acceptance/criteria/{policyId}": {
      "put": {
        "operationId": "Policies_ChangePolicyAcceptanceCriteria",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PoliciesChangePolicyAcceptanceCriteriaBody"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/change/status/{policyId}": {
      "put": {
        "operationId": "Policies_ChangePolicyStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "policyId",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/PoliciesChangePolicyStatusBody"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/delete": {
      "put": {
        "operationId": "Policies_DeleteDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1DeleteDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/publish": {
      "put": {
        "summary": "Publish draft and make the version published",
        "operationId": "Policies_PublishDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1PublishDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/draft/update": {
      "put": {
        "summary": "published cannot be updated",
        "operationId": "Policies_UpdateDraft",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1UpdateDraftRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/list/{parent}": {
      "get": {
        "summary": "Get all policies according to specified request",
        "operationId": "Policies_ListPolicies",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1ListPoliciesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "parent",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "sourceId",
            "in": "query",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            },
            "collectionFormat": "multi"
          },
          {
            "name": "onlyActive",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "onlyPublished",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "policyNumber",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isDefault",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "trigger",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "isTypeAnnouncement",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/version": {
      "put": {
        "summary": "Saves Policy as Version and makes it active\nIncrease the version number from the last added Policy Version",
        "operationId": "Policies_CreatePolicyVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1Policy"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1CreatePolicyVersionRequest"
            }
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    },
    "/v1/policies/{id}": {
      "get": {
        "summary": "Get policy by id",
        "operationId": "Policies_GetPolicy",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/v1GetPolicyResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": ".+"
          },
          {
            "name": "viewMask",
            "in": "query",
            "required": false,
            "type": "string"
          },
          {
            "name": "withAttachedSources",
            "in": "query",
            "required": false,
            "type": "boolean"
          }
        ],
        "tags": [
          "Policies"
        ]
      }
    }
  },
  "components": {
    "schemas": null,
    "responses": null,
    "parameters": null,
    "requestBodies": null
  },
  "definitions": {
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "typesPageInfo": {
      "type": "object",
      "properties": {
        "hasNext": {
          "type": "boolean",
          "description": "HasNext is used to indicate whether more edges exist following the set\ndefined by the clients arguments. If the client is paginating with\nfirst/after, then the server must return true if further edges exist,\notherwise false. If the client is paginating with last/before, then the\nclient may return true if edges further from before exist, if it can do so\nefficiently, otherwise may return false."
        },
        "hasPrevious": {
          "type": "boolean",
          "description": "HasPrevious is used to indicate whether more edges exist prior to the set\ndefined by the clients arguments.\nIf the client is paginating with last/before, then the server must return\ntrue if prior edges exist, otherwise false. If the client is paginating\nwith first/after, then the client may return true if edges prior to after\nexist, if it can do so efficiently, otherwise may return false."
        },
        "startCursor": {
          "type": "string"
        },
        "endCursor": {
          "type": "string"
        }
      }
    },
    "v1Acceptance": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Id of the acceptance."
        },
        "policyId": {
          "type": "string",
          "title": "PolicyId is the id of the policy being accepted. (required)"
        },
        "version": {
          "type": "string",
          "format": "uint64",
          "title": "Version is the version of the policy that was accepted. (required)"
        },
        "signerData": {
          "$ref": "#/definitions/v1SignerData",
          "title": "SignerData holds data of the person accepting this policy. (required)"
        },
        "acceptedDate": {
          "type": "string",
          "format": "date-time",
          "description": "AcceptedDate indicates the time at which the user accepted the policy."
        },
        "issuerName": {
          "type": "string",
          "description": "IssuerName indicates the name of the entity/person that issued the policy."
        },
        "place": {
          "type": "string",
          "description": "Place represents the place at which this policy was signed."
        },
        "sourceId": {
          "type": "string",
          "title": "source for which policy is applied"
        },
        "itemId": {
          "type": "string",
          "title": "source item id for which policy is applied and source is utilised"
        }
      },
      "title": "Acceptance represents the action of an individual accepting a policy"
    },
    "v1AcceptanceNode": {
      "type": "object",
      "properties": {
        "position": {
          "type": "string"
        },
        "node": {
          "$ref": "#/definitions/v1Acceptance"
        }
      }
    },
    "v1AcceptancePolicy": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "contentUrl": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "oneTimeAcceptance": {
          "type": "boolean"
        },
        "policyType": {
          "type": "string"
        }
      }
    },
    "v1AcceptanceRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1BatchCreateAcceptanceResponse": {
      "type": "object",
      "properties": {
        "acceptances": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1Acceptance"
          }
        }
      }
    },
    "v1CreateAcceptanceRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string",
          "title": "parent: company_id"
        },
        "acceptance": {
          "$ref": "#/definitions/v1Acceptance",
          "title": "acceptance to be added"
        },
        "policyName": {
          "type": "string"
        }
      }
    },
    "v1ListAcceptanceResponse": {
      "type": "object",
      "properties": {
        "nodes": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptanceNode"
          }
        },
        "pageInfo": {
          "$ref": "#/definitions/typesPageInfo",
          "description": "PageInfo contains the information about of the current page."
        }
      }
    },
    "v1ListUnacceptedPoliciesResponse": {
      "type": "object",
      "properties": {
        "policies": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1AcceptancePolicy"
          }
        }
      }
    },
    "v1SignerData": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "title": "Unique id of the signer"
        },
        "firstName": {
          "type": "string",
          "title": "Name of the signer"
        },
        "lastName": {
          "type": "string"
        },
        "email": {
          "type": "string",
          "title": "Email of the signer"
        }
      },
      "description": "SignerData holds information about the person/entity accepting the contract."
    },
    "v1ValidateParentResponse": {
      "type": "object",
      "properties": {
        "valid": {
          "type": "boolean"
        }
      }
    },
    "PoliciesChangePolicyAcceptanceCriteriaBody": {
      "type": "object",
      "properties": {
        "oneTimeAcceptance": {
          "type": "boolean"
        }
      }
    },
    "PoliciesChangePolicyStatusBody": {
      "type": "object",
      "properties": {
        "status": {
          "type": "boolean"
        }
      }
    },
    "v1BatchGetPolicyResponse": {
      "type": "object",
      "properties": {
        "response": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1GetPolicyResponse"
          }
        }
      }
    },
    "v1CreatePolicyRequest": {
      "type": "object",
      "properties": {
        "parent": {
          "type": "string"
        },
        "policy": {
          "$ref": "#/definitions/v1Policy"
        }
      }
    },
    "v1CreatePolicyVersionRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersion": {
          "$ref": "#/definitions/v1PolicyVersion"
        }
      }
    },
    "v1DeleteDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1GetPolicyResponse": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        },
        "sourceId": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1ListAnnouncementsResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyWrapper"
          }
        }
      }
    },
    "v1ListPoliciesResponse": {
      "type": "object",
      "properties": {
        "list": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyWrapper"
          }
        }
      }
    },
    "v1Policy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "policyNumber": {
          "type": "string"
        },
        "createdOn": {
          "type": "string",
          "format": "date-time"
        },
        "active": {
          "type": "boolean",
          "title": "default inactive in create"
        },
        "isDefault": {
          "type": "boolean"
        },
        "description": {
          "type": "string"
        },
        "oneTimeAcceptance": {
          "type": "boolean",
          "title": "one_time_acceptance: if true specifies that the policy is accepted only\nonce or only when a new version is published.\nAnd when it is false, the policy will be accepted every time the source\nis invoked or used"
        },
        "trigger": {
          "type": "string"
        },
        "versions": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/v1PolicyVersion"
          }
        },
        "policyType": {
          "$ref": "#/definitions/v1PolicyType"
        }
      },
      "description": "Policy object contains the meta-information of Policy\nIt contains multiple PolicyVersions only latest will be active."
    },
    "v1PolicySourceLink": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        },
        "sourceId": {
          "type": "string"
        }
      }
    },
    "v1PolicyType": {
      "type": "string",
      "enum": [
        "Policy_UNKNOWN",
        "Display",
        "Acceptance",
        "Signature",
        "Announcement"
      ],
      "default": "Policy_UNKNOWN"
    },
    "v1PolicyVersion": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "content": {
          "type": "string"
        },
        "version": {
          "type": "string",
          "format": "uint64"
        },
        "versionCreatedOn": {
          "type": "string",
          "format": "date-time"
        },
        "published": {
          "type": "boolean"
        },
        "metadata": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "title": "PolicyVersion contains the content of policy.\nMultiple versions can be saved for a policy but only one can be active"
    },
    "v1PolicyWrapper": {
      "type": "object",
      "properties": {
        "policy": {
          "$ref": "#/definitions/v1Policy"
        },
        "sourceIds": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1PublishDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersionId": {
          "type": "string"
        }
      }
    },
    "v1UpdateDraftRequest": {
      "type": "object",
      "properties": {
        "policyId": {
          "type": "string"
        },
        "policyVersion": {
          "$ref": "#/definitions/v1PolicyVersion"
        }
      }
    }
  }
}
